"use strict";var t=require("obsidian");
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
<<<<<<< Updated upstream
***************************************************************************** */function e(t,e,n,r){return new(n||(n=Promise))((function(i,a){function o(t){try{u(r.next(t))}catch(t){a(t)}}function l(t){try{u(r.throw(t))}catch(t){a(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}u((r=r.apply(t,e||[])).next())}))}function n(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function r(t){let e=t,r=t;function i(t,e,n,i){for(null==n&&(n=0),null==i&&(i=t.length);n<i;){const a=n+i>>>1;r(t[a],e)<0?n=a+1:i=a}return n}return 1===t.length&&(e=(e,n)=>t(e)-n,r=function(t){return(e,r)=>n(t(e),r)}(t)),{left:i,center:function(t,n,r,a){null==r&&(r=0),null==a&&(a=t.length);const o=i(t,n,r,a-1);return o>r&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,n,i){for(null==n&&(n=0),null==i&&(i=t.length);n<i;){const a=n+i>>>1;r(t[a],e)>0?i=a:n=a+1}return n}}}const i=r(n).right;function a(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}r((function(t){return null===t?NaN:+t})).center;var o=Math.sqrt(50),l=Math.sqrt(10),u=Math.sqrt(2);function s(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),a=r/Math.pow(10,i);return i>=0?(a>=o?10:a>=l?5:a>=u?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(a>=o?10:a>=l?5:a>=u?2:1)}function f(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),a=r/i;return a>=o?i*=10:a>=l?i*=5:a>=u&&(i*=2),e<t?-i:i}function c(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function h(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n>i||void 0===n&&i>=i)&&(n=i)}return n}function d(t,e,r=0,i=t.length-1,a=n){for(;i>r;){if(i-r>600){const n=i-r+1,o=e-r+1,l=Math.log(n),u=.5*Math.exp(2*l/3),s=.5*Math.sqrt(l*u*(n-u)/n)*(o-n/2<0?-1:1);d(t,e,Math.max(r,Math.floor(e-o*u/n+s)),Math.min(i,Math.floor(e+(n-o)*u/n+s)),a)}const n=t[e];let o=r,l=i;for(g(t,r,e),a(t[i],n)>0&&g(t,r,i);o<l;){for(g(t,o,l),++o,--l;a(t[o],n)<0;)++o;for(;a(t[l],n)>0;)--l}0===a(t[r],n)?g(t,r,l):(++l,g(t,l,i)),l<=e&&(r=l+1),e<=l&&(i=l-1)}return t}function g(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function p(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return h(t);if(e>=1)return c(t);var r,i=(r-1)*e,a=Math.floor(i),o=c(d(t,a).subarray(0,a+1));return o+(h(t.subarray(a+1))-o)*(i-a)}}function y(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),a=new Array(i);++r<i;)a[r]=t+r*n;return a}function m(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let i of t)(i=+e(i,++r,t))&&(n+=i)}return n}var v=Array.prototype.slice;function w(t){return t}function x(t){return"translate("+t+",0)"}function A(t){return"translate(0,"+t+")"}function b(t){return e=>+t(e)}function D(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function k(){return!this.__axis}function M(t,e){var n=[],r=null,i=null,a=6,o=6,l=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",c=1===t||3===t?x:A;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==i?e.tickFormat?e.tickFormat.apply(e,n):w:i,p=Math.max(a,0)+l,y=e.range(),m=+y[0]+u,v=+y[y.length-1]+u,x=(e.bandwidth?D:b)(e.copy(),u),A=h.selection?h.selection():h,M=A.selectAll(".domain").data([null]),T=A.selectAll(".tick").data(d,e).order(),C=T.exit(),F=T.enter().append("g").attr("class","tick"),_=T.select("line"),S=T.select("text");M=M.merge(M.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),T=T.merge(F),_=_.merge(F.append("line").attr("stroke","currentColor").attr(f+"2",s*a)),S=S.merge(F.append("text").attr("fill","currentColor").attr(f,s*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==A&&(M=M.transition(h),T=T.transition(h),_=_.transition(h),S=S.transition(h),C=C.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=x(t))?c(t+u):this.getAttribute("transform")})),F.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return c((e&&isFinite(e=e(t))?e:x(t))+u)}))),C.remove(),M.attr("d",4===t||2===t?o?"M"+s*o+","+m+"H"+u+"V"+v+"H"+s*o:"M"+u+","+m+"V"+v:o?"M"+m+","+s*o+"V"+u+"H"+v+"V"+s*o:"M"+m+","+u+"H"+v),T.attr("opacity",1).attr("transform",(function(t){return c(x(t)+u)})),_.attr(f+"2",s*a),S.attr(f,s*p).text(g),A.filter(k).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),A.each((function(){this.__axis=x}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=v.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:v.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:v.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(i=t,h):i},h.tickSize=function(t){return arguments.length?(a=o=+t,h):a},h.tickSizeInner=function(t){return arguments.length?(a=+t,h):a},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(l=+t,h):l},h.offset=function(t){return arguments.length?(u=+t,h):u},h}function T(t){return M(3,t)}function C(t){return M(4,t)}var F={value:()=>{}};function _(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new S(r)}function S(t){this._=t}function E(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function B(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function N(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=F,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}S.prototype=_.prototype={constructor:S,on:function(t,e){var n,r=this._,i=E(t+"",r),a=-1,o=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<o;)if(n=(t=i[a]).type)r[n]=N(r[n],t.name,e);else if(null==e)for(n in r)r[n]=N(r[n],t.name,null);return this}for(;++a<o;)if((n=(t=i[a]).type)&&(n=B(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new S(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),a=0;a<n;++a)i[a]=arguments[a+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(a=0,n=(r=this._[t]).length;a<n;++a)r[a].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,a=r.length;i<a;++i)r[i].value.apply(e,n)}};var L="http://www.w3.org/1999/xhtml",V={svg:"http://www.w3.org/2000/svg",xhtml:L,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function I(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),V.hasOwnProperty(e)?{space:V[e],local:t}:t}function Y(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===L&&e.documentElement.namespaceURI===L?e.createElement(t):e.createElementNS(n,t)}}function z(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function P(t){var e=I(t);return(e.local?z:Y)(e)}function O(){}function U(t){return null==t?O:function(){return this.querySelector(t)}}function R(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function W(){return[]}function $(t){return null==t?W:function(){return this.querySelectorAll(t)}}function H(t){return function(){return this.matches(t)}}function X(t){return function(e){return e.matches(t)}}var q=Array.prototype.find;function j(){return this.firstElementChild}var G=Array.prototype.filter;function Q(){return this.children}function Z(t){return new Array(t.length)}function J(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function K(t){return function(){return t}}function tt(t,e,n,r,i,a){for(var o,l=0,u=e.length,s=a.length;l<s;++l)(o=e[l])?(o.__data__=a[l],r[l]=o):n[l]=new J(t,a[l]);for(;l<u;++l)(o=e[l])&&(i[l]=o)}function et(t,e,n,r,i,a,o){var l,u,s,f=new Map,c=e.length,h=a.length,d=new Array(c);for(l=0;l<c;++l)(u=e[l])&&(d[l]=s=o.call(u,u.__data__,l,e)+"",f.has(s)?i[l]=u:f.set(s,u));for(l=0;l<h;++l)s=o.call(t,a[l],l,a)+"",(u=f.get(s))?(r[l]=u,u.__data__=a[l],f.delete(s)):n[l]=new J(t,a[l]);for(l=0;l<c;++l)(u=e[l])&&f.get(d[l])===u&&(i[l]=u)}function nt(t){return t.__data__}function rt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function it(t){return function(){this.removeAttribute(t)}}function at(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ot(t,e){return function(){this.setAttribute(t,e)}}function lt(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ut(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function st(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function ft(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ct(t){return function(){this.style.removeProperty(t)}}function ht(t,e,n){return function(){this.style.setProperty(t,e,n)}}function dt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function gt(t,e){return t.style.getPropertyValue(e)||ft(t).getComputedStyle(t,null).getPropertyValue(e)}function pt(t){return function(){delete this[t]}}function yt(t,e){return function(){this[t]=e}}function mt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function vt(t){return t.trim().split(/^|\s+/)}function wt(t){return t.classList||new xt(t)}function xt(t){this._node=t,this._names=vt(t.getAttribute("class")||"")}function At(t,e){for(var n=wt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function bt(t,e){for(var n=wt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function Dt(t){return function(){At(this,t)}}function kt(t){return function(){bt(this,t)}}function Mt(t,e){return function(){(e.apply(this,arguments)?At:bt)(this,t)}}function Tt(){this.textContent=""}function Ct(t){return function(){this.textContent=t}}function Ft(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function _t(){this.innerHTML=""}function St(t){return function(){this.innerHTML=t}}function Et(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Bt(){this.nextSibling&&this.parentNode.appendChild(this)}function Nt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Lt(){return null}function Vt(){var t=this.parentNode;t&&t.removeChild(this)}function It(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Yt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function zt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Pt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function Ot(t,e,n){return function(){var r,i=this.__on,a=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var o=0,l=i.length;o<l;++o)if((r=i[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=a,r.options=n),void(r.value=e);this.addEventListener(t.type,a,n),r={type:t.type,name:t.name,value:e,listener:a,options:n},i?i.push(r):this.__on=[r]}}function Ut(t,e,n){var r=ft(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Rt(t,e){return function(){return Ut(this,t,e)}}function Wt(t,e){return function(){return Ut(this,t,e.apply(this,arguments))}}J.prototype={constructor:J,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},xt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var $t=[null];function Ht(t,e){this._groups=t,this._parents=e}function Xt(){return new Ht([[document.documentElement]],$t)}function qt(t){return"string"==typeof t?new Ht([[document.querySelector(t)]],[document.documentElement]):new Ht([[t]],$t)}function jt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Gt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Qt(){}Ht.prototype=Xt.prototype={constructor:Ht,select:function(t){"function"!=typeof t&&(t=U(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o,l=e[i],u=l.length,s=r[i]=new Array(u),f=0;f<u;++f)(a=l[f])&&(o=t.call(a,a.__data__,f,l))&&("__data__"in a&&(o.__data__=a.__data__),s[f]=o);return new Ht(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:R(e)}}(t):$(t);for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var o,l=e[a],u=l.length,s=0;s<u;++s)(o=l[s])&&(r.push(t.call(o,o.__data__,s,l)),i.push(o));return new Ht(r,i)},selectChild:function(t){return this.select(null==t?j:function(t){return function(){return q.call(this.children,t)}}("function"==typeof t?t:X(t)))},selectChildren:function(t){return this.selectAll(null==t?Q:function(t){return function(){return G.call(this.children,t)}}("function"==typeof t?t:X(t)))},filter:function(t){"function"!=typeof t&&(t=H(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],l=o.length,u=r[i]=[],s=0;s<l;++s)(a=o[s])&&t.call(a,a.__data__,s,o)&&u.push(a);return new Ht(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,nt);var n=e?et:tt,r=this._parents,i=this._groups;"function"!=typeof t&&(t=K(t));for(var a=i.length,o=new Array(a),l=new Array(a),u=new Array(a),s=0;s<a;++s){var f=r[s],c=i[s],h=c.length,d=R(t.call(f,f&&f.__data__,s,r)),g=d.length,p=l[s]=new Array(g),y=o[s]=new Array(g),m=u[s]=new Array(h);n(f,c,p,y,m,d,e);for(var v,w,x=0,A=0;x<g;++x)if(v=p[x]){for(x>=A&&(A=x+1);!(w=y[A])&&++A<g;);v._next=w||null}}return(o=new Ht(o,r))._enter=l,o._exit=u,o},enter:function(){return new Ht(this._enter||this._groups.map(Z),this._parents)},exit:function(){return new Ht(this._exit||this._groups.map(Z),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?a.remove():n(a),r&&i?r.merge(i).order():i},merge:function(t){if(!(t instanceof Ht))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),l=0;l<a;++l)for(var u,s=e[l],f=n[l],c=s.length,h=o[l]=new Array(c),d=0;d<c;++d)(u=s[d]||f[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new Ht(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=rt);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,l=n[a],u=l.length,s=i[a]=new Array(u),f=0;f<u;++f)(o=l[f])&&(s[f]=o);s.sort(e)}return new Ht(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],o=0,l=a.length;o<l;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,e){var n=I(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?at:it:"function"==typeof e?n.local?st:ut:n.local?lt:ot)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ct:"function"==typeof e?dt:ht)(t,e,null==n?"":n)):gt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?pt:"function"==typeof e?mt:yt)(t,e)):this.node()[t]},classed:function(t,e){var n=vt(t+"");if(arguments.length<2){for(var r=wt(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?Mt:e?Dt:kt)(n,e))},text:function(t){return arguments.length?this.each(null==t?Tt:("function"==typeof t?Ft:Ct)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?_t:("function"==typeof t?Et:St)(t)):this.node().innerHTML},raise:function(){return this.each(Bt)},lower:function(){return this.each(Nt)},append:function(t){var e="function"==typeof t?t:P(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:P(t),r=null==e?Lt:"function"==typeof e?e:U(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Vt)},clone:function(t){return this.select(t?Yt:It)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=zt(t+""),o=a.length;if(!(arguments.length<2)){for(l=e?Ot:Pt,r=0;r<o;++r)this.each(l(a[r],e,n));return this}var l=this.node().__on;if(l)for(var u,s=0,f=l.length;s<f;++s)for(r=0,u=l[s];r<o;++r)if((i=a[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Wt:Rt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],a=0,o=i.length;a<o;++a)(r=i[a])&&(yield r)}};var Zt=1/.7,Jt="\\s*([+-]?\\d+)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ee=/^#([0-9a-f]{3,8})$/,ne=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),re=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),ie=new RegExp("^rgba\\("+[Jt,Jt,Jt,Kt]+"\\)$"),ae=new RegExp("^rgba\\("+[te,te,te,Kt]+"\\)$"),oe=new RegExp("^hsl\\("+[Kt,te,te]+"\\)$"),le=new RegExp("^hsla\\("+[Kt,te,te,Kt]+"\\)$"),ue={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function se(){return this.rgb().formatHex()}function fe(){return this.rgb().formatRgb()}function ce(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ee.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?he(e):3===n?new ye(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?de(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?de(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ne.exec(t))?new ye(e[1],e[2],e[3],1):(e=re.exec(t))?new ye(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ie.exec(t))?de(e[1],e[2],e[3],e[4]):(e=ae.exec(t))?de(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=oe.exec(t))?xe(e[1],e[2]/100,e[3]/100,1):(e=le.exec(t))?xe(e[1],e[2]/100,e[3]/100,e[4]):ue.hasOwnProperty(t)?he(ue[t]):"transparent"===t?new ye(NaN,NaN,NaN,0):null}function he(t){return new ye(t>>16&255,t>>8&255,255&t,1)}function de(t,e,n,r){return r<=0&&(t=e=n=NaN),new ye(t,e,n,r)}function ge(t){return t instanceof Qt||(t=ce(t)),t?new ye((t=t.rgb()).r,t.g,t.b,t.opacity):new ye}function pe(t,e,n,r){return 1===arguments.length?ge(t):new ye(t,e,n,null==r?1:r)}function ye(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function me(){return"#"+we(this.r)+we(this.g)+we(this.b)}function ve(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function we(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function xe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new be(t,e,n,r)}function Ae(t){if(t instanceof be)return new be(t.h,t.s,t.l,t.opacity);if(t instanceof Qt||(t=ce(t)),!t)return new be;if(t instanceof be)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),a=Math.max(e,n,r),o=NaN,l=a-i,u=(a+i)/2;return l?(o=e===a?(n-r)/l+6*(n<r):n===a?(r-e)/l+2:(e-n)/l+4,l/=u<.5?a+i:2-a-i,o*=60):l=u>0&&u<1?0:o,new be(o,l,u,t.opacity)}function be(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function De(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}jt(Qt,ce,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:se,formatHex:se,formatHsl:function(){return Ae(this).formatHsl()},formatRgb:fe,toString:fe}),jt(ye,pe,Gt(Qt,{brighter:function(t){return t=null==t?Zt:Math.pow(Zt,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:me,formatHex:me,formatRgb:ve,toString:ve})),jt(be,(function(t,e,n,r){return 1===arguments.length?Ae(t):new be(t,e,n,null==r?1:r)}),Gt(Qt,{brighter:function(t){return t=null==t?Zt:Math.pow(Zt,t),new be(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new be(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new ye(De(t>=240?t-240:t+120,i,r),De(t,i,r),De(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const ke=Math.PI/180,Me=180/Math.PI,Te=4/29,Ce=6/29,Fe=3*Ce*Ce;function _e(t){if(t instanceof Ee)return new Ee(t.l,t.a,t.b,t.opacity);if(t instanceof Ye)return ze(t);t instanceof ye||(t=ge(t));var e,n,r=Ve(t.r),i=Ve(t.g),a=Ve(t.b),o=Be((.2225045*r+.7168786*i+.0606169*a)/1);return r===i&&i===a?e=n=o:(e=Be((.4360747*r+.3850649*i+.1430804*a)/.96422),n=Be((.0139322*r+.0971045*i+.7141733*a)/.82521)),new Ee(116*o-16,500*(e-o),200*(o-n),t.opacity)}function Se(t,e,n,r){return 1===arguments.length?_e(t):new Ee(t,e,n,null==r?1:r)}function Ee(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Be(t){return t>.008856451679035631?Math.pow(t,1/3):t/Fe+Te}function Ne(t){return t>Ce?t*t*t:Fe*(t-Te)}function Le(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ve(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ie(t){if(t instanceof Ye)return new Ye(t.h,t.c,t.l,t.opacity);if(t instanceof Ee||(t=_e(t)),0===t.a&&0===t.b)return new Ye(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Me;return new Ye(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Ye(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function ze(t){if(isNaN(t.h))return new Ee(t.l,0,0,t.opacity);var e=t.h*ke;return new Ee(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}jt(Ee,Se,Gt(Qt,{brighter:function(t){return new Ee(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ee(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ye(Le(3.1338561*(e=.96422*Ne(e))-1.6168667*(t=1*Ne(t))-.4906146*(n=.82521*Ne(n))),Le(-.9787684*e+1.9161415*t+.033454*n),Le(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),jt(Ye,(function(t,e,n,r){return 1===arguments.length?Ie(t):new Ye(t,e,n,null==r?1:r)}),Gt(Qt,{brighter:function(t){return new Ye(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ye(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return ze(this).rgb()}}));var Pe,Oe,Ue=0,Re=0,We=0,$e=0,He=0,Xe=0,qe="object"==typeof performance&&performance.now?performance:Date,je="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ge(){return He||(je(Qe),He=qe.now()+Xe)}function Qe(){He=0}function Ze(){this._call=this._time=this._next=null}function Je(t,e,n){var r=new Ze;return r.restart(t,e,n),r}function Ke(){He=($e=qe.now())+Xe,Ue=Re=0;try{!function(){Ge(),++Ue;for(var t,e=Pe;e;)(t=He-e._time)>=0&&e._call.call(null,t),e=e._next;--Ue}()}finally{Ue=0,function(){var t,e,n=Pe,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Pe=e);Oe=t,en(r)}(),He=0}}function tn(){var t=qe.now(),e=t-$e;e>1e3&&(Xe-=e,$e=t)}function en(t){Ue||(Re&&(Re=clearTimeout(Re)),t-He>24?(t<1/0&&(Re=setTimeout(Ke,t-qe.now()-Xe)),We&&(We=clearInterval(We))):(We||($e=qe.now(),We=setInterval(tn,1e3)),Ue=1,je(Ke)))}function nn(t,e,n){var r=new Ze;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Ze.prototype=Je.prototype={constructor:Ze,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ge():+n)+(null==e?0:+e),this._next||Oe===this||(Oe?Oe._next=this:Pe=this,Oe=this),this._call=t,this._time=n,en()},stop:function(){this._call&&(this._call=null,this._time=1/0,en())}};var rn=_("start","end","cancel","interrupt"),an=[];function on(t,e,n,r,i,a){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function a(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(a){var s,f,c,h;if(1!==n.state)return u();for(s in i)if((h=i[s]).name===n.name){if(3===h.state)return nn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(nn((function(){3===n.state&&(n.state=4,n.timer.restart(l,n.delay,n.time),l(a))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(c=n.tween.length),s=0,f=-1;s<c;++s)(h=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++f]=h);r.length=f+1}}function l(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),a=-1,o=r.length;++a<o;)r[a].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Je(a,0,n.time)}(t,n,{name:e,index:r,group:i,on:rn,tween:an,time:a.time,delay:a.delay,duration:a.duration,ease:a.ease,timer:null,state:0})}function ln(t,e){var n=sn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function un(t,e){var n=sn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function sn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var fn=t=>()=>t;function cn(t){return 1==(t=+t)?hn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):fn(isNaN(e)?n:e)}}function hn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):fn(isNaN(t)?e:t)}var dn=function t(e){var n=cn(e);function r(t,e){var r=n((t=pe(t)).r,(e=pe(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=hn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function gn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var pn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yn=new RegExp(pn.source,"g");function mn(t,e){var n,r,i,a=pn.lastIndex=yn.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=pn.exec(t))&&(r=yn.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),l[o]?l[o]+=i:l[++o]=i),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:gn(n,r)})),a=yn.lastIndex;return a<e.length&&(i=e.slice(a),l[o]?l[o]+=i:l[++o]=i),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}var vn,wn=180/Math.PI,xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function An(t,e,n,r,i,a){var o,l,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,u/=l),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:i,translateY:a,rotate:Math.atan2(e,t)*wn,skewX:Math.atan(u)*wn,scaleX:o,scaleY:l}}function bn(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(a,o){var l=[],u=[];return a=t(a),o=t(o),function(t,r,i,a,o,l){if(t!==i||r!==a){var u=o.push("translate(",null,e,null,n);l.push({i:u-4,x:gn(t,i)},{i:u-2,x:gn(r,a)})}else(i||a)&&o.push("translate("+i+e+a+n)}(a.translateX,a.translateY,o.translateX,o.translateY,l,u),function(t,e,n,a){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),a.push({i:n.push(i(n)+"rotate(",null,r)-2,x:gn(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(a.rotate,o.rotate,l,u),function(t,e,n,a){t!==e?a.push({i:n.push(i(n)+"skewX(",null,r)-2,x:gn(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(a.skewX,o.skewX,l,u),function(t,e,n,r,a,o){if(t!==n||e!==r){var l=a.push(i(a)+"scale(",null,",",null,")");o.push({i:l-4,x:gn(t,n)},{i:l-2,x:gn(e,r)})}else 1===n&&1===r||a.push(i(a)+"scale("+n+","+r+")")}(a.scaleX,a.scaleY,o.scaleX,o.scaleY,l,u),a=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)l[(e=u[n]).i]=e.x(t);return l.join("")}}}var Dn=bn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?xn:An(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),kn=bn((function(t){return null==t?xn:(vn||(vn=document.createElementNS("http://www.w3.org/2000/svg","g")),vn.setAttribute("transform",t),(t=vn.transform.baseVal.consolidate())?An((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):xn)}),", ",")",")");function Mn(t,e){var n,r;return function(){var i=un(this,t),a=i.tween;if(a!==n)for(var o=0,l=(r=n=a).length;o<l;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}i.tween=r}}function Tn(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var a=un(this,t),o=a.tween;if(o!==r){i=(r=o).slice();for(var l={name:e,value:n},u=0,s=i.length;u<s;++u)if(i[u].name===e){i[u]=l;break}u===s&&i.push(l)}a.tween=i}}function Cn(t,e,n){var r=t._id;return t.each((function(){var t=un(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return sn(t,r).value[e]}}function Fn(t,e){var n;return("number"==typeof e?gn:e instanceof ce?dn:(n=ce(e))?(e=n,dn):mn)(t,e)}function _n(t){return function(){this.removeAttribute(t)}}function Sn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function En(t,e,n){var r,i,a=n+"";return function(){var o=this.getAttribute(t);return o===a?null:o===r?i:i=e(r=o,n)}}function Bn(t,e,n){var r,i,a=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===a?null:o===r?i:i=e(r=o,n)}}function Nn(t,e,n){var r,i,a;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttribute(t))===(l=u+"")?null:o===r&&l===i?a:(i=l,a=e(r=o,u));this.removeAttribute(t)}}function Ln(t,e,n){var r,i,a;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===(l=u+"")?null:o===r&&l===i?a:(i=l,a=e(r=o,u));this.removeAttributeNS(t.space,t.local)}}function Vn(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function In(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Yn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&In(t,i)),n}return i._value=e,i}function zn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Vn(t,i)),n}return i._value=e,i}function Pn(t,e){return function(){ln(this,t).delay=+e.apply(this,arguments)}}function On(t,e){return e=+e,function(){ln(this,t).delay=e}}function Un(t,e){return function(){un(this,t).duration=+e.apply(this,arguments)}}function Rn(t,e){return e=+e,function(){un(this,t).duration=e}}function Wn(t,e){if("function"!=typeof e)throw new Error;return function(){un(this,t).ease=e}}function $n(t,e,n){var r,i,a=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ln:un;return function(){var o=a(this,t),l=o.on;l!==r&&(i=(r=l).copy()).on(e,n),o.on=i}}var Hn=Xt.prototype.constructor;function Xn(t){return function(){this.style.removeProperty(t)}}function qn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function jn(t,e,n){var r,i;function a(){var a=e.apply(this,arguments);return a!==i&&(r=(i=a)&&qn(t,a,n)),r}return a._value=e,a}function Gn(t){return function(e){this.textContent=t.call(this,e)}}function Qn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Gn(r)),e}return r._value=t,r}var Zn=0;function Jn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Kn(){return++Zn}var tr=Xt.prototype;Jn.prototype={constructor:Jn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=U(t));for(var r=this._groups,i=r.length,a=new Array(i),o=0;o<i;++o)for(var l,u,s=r[o],f=s.length,c=a[o]=new Array(f),h=0;h<f;++h)(l=s[h])&&(u=t.call(l,l.__data__,h,s))&&("__data__"in l&&(u.__data__=l.__data__),c[h]=u,on(c[h],e,n,h,c,sn(l,n)));return new Jn(a,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=$(t));for(var r=this._groups,i=r.length,a=[],o=[],l=0;l<i;++l)for(var u,s=r[l],f=s.length,c=0;c<f;++c)if(u=s[c]){for(var h,d=t.call(u,u.__data__,c,s),g=sn(u,n),p=0,y=d.length;p<y;++p)(h=d[p])&&on(h,e,n,p,d,g);a.push(d),o.push(u)}return new Jn(a,o,e,n)},filter:function(t){"function"!=typeof t&&(t=H(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],l=o.length,u=r[i]=[],s=0;s<l;++s)(a=o[s])&&t.call(a,a.__data__,s,o)&&u.push(a);return new Jn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),l=0;l<a;++l)for(var u,s=e[l],f=n[l],c=s.length,h=o[l]=new Array(c),d=0;d<c;++d)(u=s[d]||f[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new Jn(o,this._parents,this._name,this._id)},selection:function(){return new Hn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Kn(),r=this._groups,i=r.length,a=0;a<i;++a)for(var o,l=r[a],u=l.length,s=0;s<u;++s)if(o=l[s]){var f=sn(o,e);on(o,t,n,s,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Jn(r,this._parents,t,n)},call:tr.call,nodes:tr.nodes,node:tr.node,size:tr.size,empty:tr.empty,each:tr.each,on:function(t,e){var n=this._id;return arguments.length<2?sn(this.node(),n).on.on(t):this.each($n(n,t,e))},attr:function(t,e){var n=I(t),r="transform"===n?kn:Fn;return this.attrTween(t,"function"==typeof e?(n.local?Ln:Nn)(n,r,Cn(this,"attr."+t,e)):null==e?(n.local?Sn:_n)(n):(n.local?Bn:En)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=I(t);return this.tween(n,(r.local?Yn:zn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Dn:Fn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var a=gt(this,t),o=(this.style.removeProperty(t),gt(this,t));return a===o?null:a===n&&o===r?i:i=e(n=a,r=o)}}(t,r)).on("end.style."+t,Xn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,a;return function(){var o=gt(this,t),l=n(this),u=l+"";return null==l&&(this.style.removeProperty(t),u=l=gt(this,t)),o===u?null:o===r&&u===i?a:(i=u,a=e(r=o,l))}}(t,r,Cn(this,"style."+t,e))).each(function(t,e){var n,r,i,a,o="style."+e,l="end."+o;return function(){var u=un(this,t),s=u.on,f=null==u.value[o]?a||(a=Xn(e)):void 0;s===n&&i===f||(r=(n=s).copy()).on(l,i=f),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,a=n+"";return function(){var o=gt(this,t);return o===a?null:o===r?i:i=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,jn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Cn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Qn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=sn(this.node(),n).tween,a=0,o=i.length;a<o;++a)if((r=i[a]).name===t)return r.value;return null}return this.each((null==e?Mn:Tn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Pn:On)(e,t)):sn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Un:Rn)(e,t)):sn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Wn(e,t)):sn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;un(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(a,o){var l={value:o},u={value:function(){0==--i&&a()}};n.each((function(){var n=un(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(u)),n.on=e})),0===i&&a()}))},[Symbol.iterator]:tr[Symbol.iterator]};var er={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function nr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}Xt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,a=t.__transition,o=!0;if(a){for(i in e=null==e?null:e+"",a)(n=a[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete a[i]):o=!1;o&&delete t.__transition}}(this,t)}))},Xt.prototype.transition=function(t){var e,n;t instanceof Jn?(e=t._id,t=t._name):(e=Kn(),(n=er).time=Ge(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,a=0;a<i;++a)for(var o,l=r[a],u=l.length,s=0;s<u;++s)(o=l[s])&&on(o,t,e,s,l,n||nr(o,e));return new Jn(r,this._parents,t,e)};const rr=Math.PI,ir=2*rr,ar=ir-1e-6;function or(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function lr(){return new or}function ur(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function sr(t){return(t=ur(Math.abs(t)))?t[1]:NaN}or.prototype=lr.prototype={constructor:or,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,a){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+a)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var a=this._x1,o=this._y1,l=n-t,u=r-e,s=a-t,f=o-e,c=s*s+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(c>1e-6)if(Math.abs(f*l-u*s)>1e-6&&i){var h=n-a,d=r-o,g=l*l+u*u,p=h*h+d*d,y=Math.sqrt(g),m=Math.sqrt(c),v=i*Math.tan((rr-Math.acos((g+c-p)/(2*y*m)))/2),w=v/m,x=v/y;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*s)+","+(e+w*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>s*d)+","+(this._x1=t+x*l)+","+(this._y1=e+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,a){t=+t,e=+e,a=!!a;var o=(n=+n)*Math.cos(r),l=n*Math.sin(r),u=t+o,s=e+l,f=1^a,c=a?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+s:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+u+","+s),n&&(c<0&&(c=c%ir+ir),c>ar?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=u)+","+(this._y1=s):c>1e-6&&(this._+="A"+n+","+n+",0,"+ +(c>=rr)+","+f+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var fr,cr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hr(t){if(!(e=cr.exec(t)))throw new Error("invalid format: "+t);var e;return new dr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function dr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function gr(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}hr.prototype=dr.prototype,dr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var pr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>gr(100*t,e),r:gr,s:function(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],i=n[1],a=i-(fr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,o=r.length;return a===o?r:a>o?r+new Array(a-o+1).join("0"):a>0?r.slice(0,a)+"."+r.slice(a):"0."+new Array(1-a).join("0")+ur(t,Math.max(0,e+a-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function yr(t){return t}var mr,vr,wr,xr=Array.prototype.map,Ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function br(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?yr:(e=xr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,a=[],o=0,l=e[0],u=0;i>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),a.push(t.substring(i-=l,i+l)),!((u+=l+1)>r));)l=e[o=(o+1)%e.length];return a.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",a=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?yr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(xr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function c(t){var e=(t=hr(t)).fill,n=t.align,c=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,y=t.precision,m=t.trim,v=t.type;"n"===v?(p=!0,v="g"):pr[v]||(void 0===y&&(y=12),m=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",x="$"===h?a:/[%p]/.test(v)?u:"",A=pr[v],b=/[defgprs%]/.test(v);function D(t){var i,a,u,h=w,D=x;if("c"===v)D=A(t)+D,t="";else{var k=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:A(Math.abs(t),y),m&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),k&&0==+t&&"+"!==c&&(k=!1),h=(k?"("===c?c:s:"-"===c||"("===c?"":c)+h,D=("s"===v?Ar[8+fr/3]:"")+D+(k&&"("===c?")":""),b)for(i=-1,a=t.length;++i<a;)if(48>(u=t.charCodeAt(i))||u>57){D=(46===u?o+t.slice(i+1):t.slice(i))+D,t=t.slice(0,i);break}}p&&!d&&(t=r(t,1/0));var M=h.length+t.length+D.length,T=M<g?new Array(g-M+1).join(e):"";switch(p&&d&&(t=r(T+t,T.length?g-D.length:1/0),T=""),n){case"<":t=h+t+D+T;break;case"=":t=h+T+t+D;break;case"^":t=T.slice(0,M=T.length>>1)+h+t+D+T.slice(M);break;default:t=T+h+t+D}return l(t)}return y=void 0===y?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),D.toString=function(){return t+""},D}return{format:c,formatPrefix:function(t,e){var n=c(((t=hr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(sr(e)/3))),i=Math.pow(10,-r),a=Ar[8+r/3];return function(t){return n(i*t)+a}}}}mr=br({thousands:",",grouping:[3],currency:["$",""]}),vr=mr.format,wr=mr.formatPrefix;function Dr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):(t=>()=>t)(isNaN(t)?e:t)}function kr(t,e){var n=Dr((t=Se(t)).l,(e=Se(e)).l),r=Dr(t.a,e.a),i=Dr(t.b,e.b),a=Dr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=i(e),t.opacity=a(e),t+""}}function Mr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}const Tr=Symbol("implicit");function Cr(){var t=new Map,e=[],n=[],r=Tr;function i(i){var a=i+"",o=t.get(a);if(!o){if(r!==Tr)return r;t.set(a,o=e.push(i))}return n[(o-1)%n.length]}return i.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return i},i.range=function(t){return arguments.length?(n=Array.from(t),i):n.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return Cr(e,n).unknown(r)},Mr.apply(i,arguments),i}var Fr=t=>()=>t;function _r(t){return 1==(t=+t)?Sr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Fr(isNaN(e)?n:e)}}function Sr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Fr(isNaN(t)?e:t)}var Er=function t(e){var n=_r(e);function r(t,e){var r=n((t=pe(t)).r,(e=pe(e)).r),i=n(t.g,e.g),a=n(t.b,e.b),o=Sr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=a(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Br(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(a){for(n=0;n<r;++n)i[n]=t[n]*(1-a)+e[n]*a;return i}}function Nr(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,a=new Array(i),o=new Array(r);for(n=0;n<i;++n)a[n]=Or(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<i;++n)o[n]=a[n](t);return o}}function Lr(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Vr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Ir(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Or(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}var Yr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,zr=new RegExp(Yr.source,"g");function Pr(t,e){var n,r,i,a=Yr.lastIndex=zr.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=Yr.exec(t))&&(r=zr.exec(e));)(i=r.index)>a&&(i=e.slice(a,i),l[o]?l[o]+=i:l[++o]=i),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:Vr(n,r)})),a=zr.lastIndex;return a<e.length&&(i=e.slice(a),l[o]?l[o]+=i:l[++o]=i),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}function Or(t,e){var n,r=typeof e;return null==e||"boolean"===r?Fr(e):("number"===r?Vr:"string"===r?(n=ce(e))?(e=n,Er):Pr:e instanceof ce?Er:e instanceof Date?Lr:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Br:Array.isArray(e)?Nr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Ir:Vr)(t,e)}function Ur(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Rr(t){return+t}var Wr=[0,1];function $r(t){return t}function Hr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function Xr(t,e,n){var r=t[0],i=t[1],a=e[0],o=e[1];return i<r?(r=Hr(i,r),a=n(o,a)):(r=Hr(r,i),a=n(a,o)),function(t){return a(r(t))}}function qr(t,e,n){var r=Math.min(t.length,e.length)-1,a=new Array(r),o=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)a[l]=Hr(t[l],t[l+1]),o[l]=n(e[l],e[l+1]);return function(e){var n=i(t,e,1,r)-1;return o[n](a[n](e))}}function jr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Gr(){var t,e,n,r,i,a,o=Wr,l=Wr,u=Or,s=$r;function f(){var t,e,n,u=Math.min(o.length,l.length);return s!==$r&&(t=o[0],e=o[u-1],t>e&&(n=t,t=e,e=n),s=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?qr:Xr,i=a=null,c}function c(e){return null==e||isNaN(e=+e)?n:(i||(i=r(o.map(t),l,u)))(t(s(e)))}return c.invert=function(n){return s(e((a||(a=r(l,o.map(t),Vr)))(n)))},c.domain=function(t){return arguments.length?(o=Array.from(t,Rr),f()):o.slice()},c.range=function(t){return arguments.length?(l=Array.from(t),f()):l.slice()},c.rangeRound=function(t){return l=Array.from(t),u=Ur,f()},c.clamp=function(t){return arguments.length?(s=!!t||$r,f()):s!==$r},c.interpolate=function(t){return arguments.length?(u=t,f()):u},c.unknown=function(t){return arguments.length?(n=t,c):n},function(n,r){return t=n,e=r,f()}}function Qr(){return Gr()($r,$r)}function Zr(t,e,n,r){var i,a=f(t,e,n);switch((r=hr(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sr(e)/3)))-sr(Math.abs(t)))}(a,o))||(r.precision=i),wr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,sr(e)-sr(t))+1}(a,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-sr(Math.abs(t)))}(a))||(r.precision=i-2*("%"===r.type))}return vr(r)}function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,i,a,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(o=s(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,a=new Array(i=r-n+1);++l<i;)a[l]=(n+l)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,a=new Array(i=r-n+1);++l<i;)a[l]=(n+l)/o}return r&&a.reverse(),a}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Zr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,a=e(),o=0,l=a.length-1,u=a[o],f=a[l],c=10;for(f<u&&(i=u,u=f,f=i,i=o,o=l,l=i);c-- >0;){if((i=s(u,f,n))===r)return a[o]=u,a[l]=f,e(a);if(i>0)u=Math.floor(u/i)*i,f=Math.ceil(f/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,f=Math.floor(f*i)/i}r=i}return t},t}function Kr(){var t=Qr();return t.copy=function(){return jr(t,Kr())},Mr.apply(t,arguments),Jr(t)}var ti=new Date,ei=new Date;function ni(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,a){var o,l=[];if(n=i.ceil(n),a=null==a?1:Math.floor(a),!(n<r&&a>0))return l;do{l.push(o=new Date(+n)),e(n,a),t(n)}while(o<n&&n<r);return l},i.filter=function(n){return ni((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return ti.setTime(+e),ei.setTime(+r),t(ti),t(ei),Math.floor(n(ti,ei))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var ri=ni((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ri.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ni((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ri:null};var ii=ni((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ai=ni((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),oi=ni((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),li=ni((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function ui(t){return ni((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var si=ui(0),fi=ui(1);ui(2),ui(3);var ci=ui(4);ui(5),ui(6);var hi=ni((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),di=ni((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));di.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ni((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},ni((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),ni((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var gi=ni((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function pi(t){return ni((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var yi=pi(0),mi=pi(1);pi(2),pi(3);var vi=pi(4);pi(5),pi(6),ni((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var wi=ni((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));wi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ni((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[xi,Ai]=function(t,e,n,i,a,o){const l=[[ii,1,1e3],[ii,5,5e3],[ii,15,15e3],[ii,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[a,1,36e5],[a,3,108e5],[a,6,216e5],[a,12,432e5],[i,1,864e5],[i,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function u(e,n,i){const a=Math.abs(n-e)/i,o=r((([,,t])=>t)).right(l,a);if(o===l.length)return t.every(f(e/31536e6,n/31536e6,i));if(0===o)return ri.every(Math.max(f(e,n,i),1));const[u,s]=l[a/l[o-1][2]<l[o][2]/a?o-1:o];return u.every(s)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const i=n&&"function"==typeof n.range?n:u(t,e,n),a=i?i.range(t,+e+1):[];return r?a.reverse():a},u]}(di,hi,si,li,oi,ai);function bi(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Di(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ki(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Mi,Ti,Ci={"-":"",_:" ",0:"0"},Fi=/^\s*\d+/,_i=/^%/,Si=/[\\^$*+?|[\]().{}]/g;function Ei(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<n?new Array(n-a+1).join(e)+i:i)}function Bi(t){return t.replace(Si,"\\$&")}function Ni(t){return new RegExp("^(?:"+t.map(Bi).join("|")+")","i")}function Li(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Vi(t,e,n){var r=Fi.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ii(t,e,n){var r=Fi.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Yi(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function zi(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Pi(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Oi(t,e,n){var r=Fi.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Ui(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ri(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Wi(t,e,n){var r=Fi.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function $i(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Hi(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Xi(t,e,n){var r=Fi.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function qi(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ji(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Gi(t,e,n){var r=Fi.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Qi(t,e,n){var r=Fi.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Zi(t,e,n){var r=Fi.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ji(t,e,n){var r=_i.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ki(t,e,n){var r=Fi.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ta(t,e,n){var r=Fi.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function ea(t,e){return Ei(t.getDate(),e,2)}function na(t,e){return Ei(t.getHours(),e,2)}function ra(t,e){return Ei(t.getHours()%12||12,e,2)}function ia(t,e){return Ei(1+li.count(di(t),t),e,3)}function aa(t,e){return Ei(t.getMilliseconds(),e,3)}function oa(t,e){return aa(t,e)+"000"}function la(t,e){return Ei(t.getMonth()+1,e,2)}function ua(t,e){return Ei(t.getMinutes(),e,2)}function sa(t,e){return Ei(t.getSeconds(),e,2)}function fa(t){var e=t.getDay();return 0===e?7:e}function ca(t,e){return Ei(si.count(di(t)-1,t),e,2)}function ha(t){var e=t.getDay();return e>=4||0===e?ci(t):ci.ceil(t)}function da(t,e){return t=ha(t),Ei(ci.count(di(t),t)+(4===di(t).getDay()),e,2)}function ga(t){return t.getDay()}function pa(t,e){return Ei(fi.count(di(t)-1,t),e,2)}function ya(t,e){return Ei(t.getFullYear()%100,e,2)}function ma(t,e){return Ei((t=ha(t)).getFullYear()%100,e,2)}function va(t,e){return Ei(t.getFullYear()%1e4,e,4)}function wa(t,e){var n=t.getDay();return Ei((t=n>=4||0===n?ci(t):ci.ceil(t)).getFullYear()%1e4,e,4)}function xa(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ei(e/60|0,"0",2)+Ei(e%60,"0",2)}function Aa(t,e){return Ei(t.getUTCDate(),e,2)}function ba(t,e){return Ei(t.getUTCHours(),e,2)}function Da(t,e){return Ei(t.getUTCHours()%12||12,e,2)}function ka(t,e){return Ei(1+gi.count(wi(t),t),e,3)}function Ma(t,e){return Ei(t.getUTCMilliseconds(),e,3)}function Ta(t,e){return Ma(t,e)+"000"}function Ca(t,e){return Ei(t.getUTCMonth()+1,e,2)}function Fa(t,e){return Ei(t.getUTCMinutes(),e,2)}function _a(t,e){return Ei(t.getUTCSeconds(),e,2)}function Sa(t){var e=t.getUTCDay();return 0===e?7:e}function Ea(t,e){return Ei(yi.count(wi(t)-1,t),e,2)}function Ba(t){var e=t.getUTCDay();return e>=4||0===e?vi(t):vi.ceil(t)}function Na(t,e){return t=Ba(t),Ei(vi.count(wi(t),t)+(4===wi(t).getUTCDay()),e,2)}function La(t){return t.getUTCDay()}function Va(t,e){return Ei(mi.count(wi(t)-1,t),e,2)}function Ia(t,e){return Ei(t.getUTCFullYear()%100,e,2)}function Ya(t,e){return Ei((t=Ba(t)).getUTCFullYear()%100,e,2)}function za(t,e){return Ei(t.getUTCFullYear()%1e4,e,4)}function Pa(t,e){var n=t.getUTCDay();return Ei((t=n>=4||0===n?vi(t):vi.ceil(t)).getUTCFullYear()%1e4,e,4)}function Oa(){return"+0000"}function Ua(){return"%"}function Ra(t){return+t}function Wa(t){return Math.floor(+t/1e3)}function $a(t){return new Date(t)}function Ha(t){return t instanceof Date?+t:+new Date(+t)}function Xa(t,e,n,r,i,a,o,l,u,s){var f=Qr(),c=f.invert,h=f.domain,d=s(".%L"),g=s(":%S"),p=s("%I:%M"),y=s("%I %p"),m=s("%a %d"),v=s("%b %d"),w=s("%B"),x=s("%Y");function A(t){return(u(t)<t?d:l(t)<t?g:o(t)<t?p:a(t)<t?y:r(t)<t?i(t)<t?m:v:n(t)<t?w:x)(t)}return f.invert=function(t){return new Date(c(t))},f.domain=function(t){return arguments.length?h(Array.from(t,Ha)):h().map($a)},f.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},f.tickFormat=function(t,e){return null==e?A:s(e)},f.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,i=(t=t.slice()).length-1,a=t[r],o=t[i];return o<a&&(n=r,r=i,i=n,n=a,a=o,o=n),t[r]=e.floor(a),t[i]=e.ceil(o),t}(n,t)):f},f.copy=function(){return jr(f,Xa(t,e,n,r,i,a,o,l,u,s))},f}!function(t){Mi=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,a=t.days,o=t.shortDays,l=t.months,u=t.shortMonths,s=Ni(i),f=Li(i),c=Ni(a),h=Li(a),d=Ni(o),g=Li(o),p=Ni(l),y=Li(l),m=Ni(u),v=Li(u),w={a:function(t){return o[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:ea,e:ea,f:oa,g:ma,G:wa,H:na,I:ra,j:ia,L:aa,m:la,M:ua,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ra,s:Wa,S:sa,u:fa,U:ca,V:da,w:ga,W:pa,x:null,X:null,y:ya,Y:va,Z:xa,"%":Ua},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return a[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:Aa,e:Aa,f:Ta,g:Ya,G:Pa,H:ba,I:Da,j:ka,L:Ma,m:Ca,M:Fa,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ra,s:Wa,S:_a,u:Sa,U:Ea,V:Na,w:La,W:Va,x:null,X:null,y:Ia,Y:za,Z:Oa,"%":Ua},A={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return k(t,e,n,r)},d:Hi,e:Hi,f:Zi,g:Ui,G:Oi,H:qi,I:qi,j:Xi,L:Qi,m:$i,M:ji,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=f.get(r[0].toLowerCase()),n+r[0].length):-1},q:Wi,Q:Ki,s:ta,S:Gi,u:Ii,U:Yi,V:zi,w:Vi,W:Pi,x:function(t,e,r){return k(t,n,e,r)},X:function(t,e,n){return k(t,r,e,n)},y:Ui,Y:Oi,Z:Ri,"%":Ji};function b(t,e){return function(n){var r,i,a,o=[],l=-1,u=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(u,l)),null!=(i=Ci[r=t.charAt(++l)])?r=t.charAt(++l):i="e"===r?" ":"0",(a=e[r])&&(r=a(n,i)),o.push(r),u=l+1);return o.push(t.slice(u,l)),o.join("")}}function D(t,e){return function(n){var r,i,a=ki(1900,void 0,1);if(k(a,t,n+="",0)!=n.length)return null;if("Q"in a)return new Date(a.Q);if("s"in a)return new Date(1e3*a.s+("L"in a?a.L:0));if(e&&!("Z"in a)&&(a.Z=0),"p"in a&&(a.H=a.H%12+12*a.p),void 0===a.m&&(a.m="q"in a?a.q:0),"V"in a){if(a.V<1||a.V>53)return null;"w"in a||(a.w=1),"Z"in a?(i=(r=Di(ki(a.y,0,1))).getUTCDay(),r=i>4||0===i?mi.ceil(r):mi(r),r=gi.offset(r,7*(a.V-1)),a.y=r.getUTCFullYear(),a.m=r.getUTCMonth(),a.d=r.getUTCDate()+(a.w+6)%7):(i=(r=bi(ki(a.y,0,1))).getDay(),r=i>4||0===i?fi.ceil(r):fi(r),r=li.offset(r,7*(a.V-1)),a.y=r.getFullYear(),a.m=r.getMonth(),a.d=r.getDate()+(a.w+6)%7)}else("W"in a||"U"in a)&&("w"in a||(a.w="u"in a?a.u%7:"W"in a?1:0),i="Z"in a?Di(ki(a.y,0,1)).getUTCDay():bi(ki(a.y,0,1)).getDay(),a.m=0,a.d="W"in a?(a.w+6)%7+7*a.W-(i+5)%7:a.w+7*a.U-(i+6)%7);return"Z"in a?(a.H+=a.Z/100|0,a.M+=a.Z%100,Di(a)):bi(a)}}function k(t,e,n,r){for(var i,a,o=0,l=e.length,u=n.length;o<l;){if(r>=u)return-1;if(37===(i=e.charCodeAt(o++))){if(i=e.charAt(o++),!(a=A[i in Ci?e.charAt(o++):i])||(r=a(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),x.x=b(n,x),x.X=b(r,x),x.c=b(e,x),{format:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}(t),Ti=Mi.format}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var qa,ja=(qa=function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],a=t[r+1],o=r>0?t[r-1]:2*i-a,l=r<e-1?t[r+2]:2*a-i;return function(t,e,n,r,i){var a=t*t,o=a*t;return((1-3*t+3*a-o)*e+(4-6*a+3*o)*n+(1+3*t+3*a-3*o)*r+o*i)/6}((n-r/e)*e,o,i,a,l)}},function(t){var e,n,r=t.length,i=new Array(r),a=new Array(r),o=new Array(r);for(e=0;e<r;++e)n=pe(t[e]),i[e]=n.r||0,a[e]=n.g||0,o[e]=n.b||0;return i=qa(i),a=qa(a),o=qa(o),n.opacity=1,function(t){return n.r=i(t),n.g=a(t),n.b=o(t),n+""}}),Ga=new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map((function(t){for(var e=t.length/6|0,n=new Array(e),r=0;r<e;)n[r]="#"+t.slice(6*r,6*++r);return n}));function Qa(t){return function(){return t}}(t=>{ja(t[t.length-1])})(Ga);var Za,Ja,Ka,to=Math.abs,eo=Math.atan2,no=Math.cos,ro=Math.max,io=Math.min,ao=Math.sin,oo=Math.sqrt,lo=Math.PI,uo=lo/2,so=2*lo;function fo(t){return t>1?0:t<-1?lo:Math.acos(t)}function co(t){return t>=1?uo:t<=-1?-uo:Math.asin(t)}function ho(t){return t.innerRadius}function go(t){return t.outerRadius}function po(t){return t.startAngle}function yo(t){return t.endAngle}function mo(t){return t&&t.padAngle}function vo(t,e,n,r,i,a,o,l){var u=n-t,s=r-e,f=o-i,c=l-a,h=c*u-f*s;if(!(h*h<1e-12))return[t+(h=(f*(e-a)-c*(t-i))/h)*u,e+h*s]}function wo(t,e,n,r,i,a,o){var l=t-n,u=e-r,s=(o?a:-a)/oo(l*l+u*u),f=s*u,c=-s*l,h=t+f,d=e+c,g=n+f,p=r+c,y=(h+g)/2,m=(d+p)/2,v=g-h,w=p-d,x=v*v+w*w,A=i-a,b=h*p-g*d,D=(w<0?-1:1)*oo(ro(0,A*A*x-b*b)),k=(b*w-v*D)/x,M=(-b*v-w*D)/x,T=(b*w+v*D)/x,C=(-b*v+w*D)/x,F=k-y,_=M-m,S=T-y,E=C-m;return F*F+_*_>S*S+E*E&&(k=T,M=C),{cx:k,cy:M,x01:-f,y01:-c,x11:k*(i/A-1),y11:M*(i/A-1)}}function xo(){var t=ho,e=go,n=Qa(0),r=null,i=po,a=yo,o=mo,l=null;function u(){var u,s,f=+t.apply(this,arguments),c=+e.apply(this,arguments),h=i.apply(this,arguments)-uo,d=a.apply(this,arguments)-uo,g=to(d-h),p=d>h;if(l||(l=u=lr()),c<f&&(s=c,c=f,f=s),c>1e-12)if(g>so-1e-12)l.moveTo(c*no(h),c*ao(h)),l.arc(0,0,c,h,d,!p),f>1e-12&&(l.moveTo(f*no(d),f*ao(d)),l.arc(0,0,f,d,h,p));else{var y,m,v=h,w=d,x=h,A=d,b=g,D=g,k=o.apply(this,arguments)/2,M=k>1e-12&&(r?+r.apply(this,arguments):oo(f*f+c*c)),T=io(to(c-f)/2,+n.apply(this,arguments)),C=T,F=T;if(M>1e-12){var _=co(M/f*ao(k)),S=co(M/c*ao(k));(b-=2*_)>1e-12?(x+=_*=p?1:-1,A-=_):(b=0,x=A=(h+d)/2),(D-=2*S)>1e-12?(v+=S*=p?1:-1,w-=S):(D=0,v=w=(h+d)/2)}var E=c*no(v),B=c*ao(v),N=f*no(A),L=f*ao(A);if(T>1e-12){var V,I=c*no(w),Y=c*ao(w),z=f*no(x),P=f*ao(x);if(g<lo&&(V=vo(E,B,z,P,I,Y,N,L))){var O=E-V[0],U=B-V[1],R=I-V[0],W=Y-V[1],$=1/ao(fo((O*R+U*W)/(oo(O*O+U*U)*oo(R*R+W*W)))/2),H=oo(V[0]*V[0]+V[1]*V[1]);C=io(T,(f-H)/($-1)),F=io(T,(c-H)/($+1))}}D>1e-12?F>1e-12?(y=wo(z,P,E,B,c,F,p),m=wo(I,Y,N,L,c,F,p),l.moveTo(y.cx+y.x01,y.cy+y.y01),F<T?l.arc(y.cx,y.cy,F,eo(y.y01,y.x01),eo(m.y01,m.x01),!p):(l.arc(y.cx,y.cy,F,eo(y.y01,y.x01),eo(y.y11,y.x11),!p),l.arc(0,0,c,eo(y.cy+y.y11,y.cx+y.x11),eo(m.cy+m.y11,m.cx+m.x11),!p),l.arc(m.cx,m.cy,F,eo(m.y11,m.x11),eo(m.y01,m.x01),!p))):(l.moveTo(E,B),l.arc(0,0,c,v,w,!p)):l.moveTo(E,B),f>1e-12&&b>1e-12?C>1e-12?(y=wo(N,L,I,Y,f,-C,p),m=wo(E,B,z,P,f,-C,p),l.lineTo(y.cx+y.x01,y.cy+y.y01),C<T?l.arc(y.cx,y.cy,C,eo(y.y01,y.x01),eo(m.y01,m.x01),!p):(l.arc(y.cx,y.cy,C,eo(y.y01,y.x01),eo(y.y11,y.x11),!p),l.arc(0,0,f,eo(y.cy+y.y11,y.cx+y.x11),eo(m.cy+m.y11,m.cx+m.x11),p),l.arc(m.cx,m.cy,C,eo(m.y11,m.x11),eo(m.y01,m.x01),!p))):l.arc(0,0,f,A,x,p):l.lineTo(N,L)}else l.moveTo(0,0);if(l.closePath(),u)return l=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-lo/2;return[no(r)*n,ao(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Qa(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Qa(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Qa(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Qa(+t),u):r},u.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:Qa(+t),u):i},u.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Qa(+t),u):a},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Qa(+t),u):o},u.context=function(t){return arguments.length?(l=null==t?null:t,u):l},u}function Ao(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function bo(t){this._context=t}function Do(t){return new bo(t)}function ko(t){return t[0]}function Mo(t){return t[1]}function To(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function Co(t){return t}bo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.WikiLink=3]="WikiLink",t[t.WikiDisplay=4]="WikiDisplay",t[t.Text=5]="Text",t[t.dvField=6]="dvField",t[t.Table=7]="Table",t[t.FileMeta=8]="FileMeta",t[t.Task=9]="Task",t[t.TaskDone=10]="TaskDone",t[t.TaskNotDone=11]="TaskNotDone"}(Za||(Za={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Pie=2]="Pie",t[t.Radar=3]="Radar",t[t.Summary=4]="Summary",t[t.Table=5]="Table",t[t.Month=6]="Month",t[t.Heatmap=7]="Heatmap",t[t.Bullet=8]="Bullet",t[t.Unknown=9]="Unknown"}(Ja||(Ja={})),function(t){t[t.Number=0]="Number",t[t.Int=1]="Int",t[t.Date=2]="Date",t[t.Time=3]="Time",t[t.DateTime=4]="DateTime",t[t.String=5]="String"}(Ka||(Ka={}));class Fo{constructor(t,e){this.date=t,this.value=e}}class _o{constructor(t,e,n){if(this.type=e,this.target=n,this.separator="",this.id=t,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueType=Ka.Number,this.usedAsXDataset=!1,this.numTargets=0,e===Za.Table){let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);if(Number.isNumber(r)&&void 0!==t.groups.accessor1){let i=parseFloat(t.groups.accessor1);if(Number.isNumber(i)){let a;void 0!==t.groups.accessor2&&(a=parseFloat(t.groups.accessor2)),this.accessor=r,this.accessor1=i,Number.isNumber(a)&&(this.accessor2=a),this.parentTarget=n.replace(e,"")}break}}}else{let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);Number.isNumber(r)&&(this.accessor=r,this.parentTarget=n.replace(e,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}setSeparator(t){this.separator=t}getSeparator(t=!1){return""===this.separator?t?",":"/":this.separator}addNumTargets(t=1){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}}class So{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.startDate=null,this.endDate=null,this.numTargets=0,this.lineInfo=null,this.barInfo=null,this.isTmpDataset=!1,this.valueType=null==e?void 0:e.valueType;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}cloneToTmpDataset(){if(!this.isTmpDataset){let t=new So(this.parent,null);return t.name="tmp",t.values=[...this.values],t.yMin=this.yMin,t.yMax=this.yMax,t.startDate=this.startDate.clone(),t.endDate=this.endDate.clone(),t.numTargets=this.numTargets,t.isTmpDataset=!0,t.valueType=this.valueType,t}return this}getName(){return this.name}setName(t){this.name=t}getId(){return this.id}setId(t){this.id=t}addNumTargets(t){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}getValue(t,e=0){let n=this.parent.getIndexOfDate(t)+Math.floor(e);return n>=0&&n<this.values.length?this.values[n]:null}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&n<this.values.length&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e),(null===this.startDate||t<this.startDate)&&(this.startDate=t.clone()),(null===this.endDate||t>this.endDate)&&(this.endDate=t.clone()))}recalculateMinMax(){this.yMin=Math.min(...this.values),this.yMax=Math.max(...this.values)}getYMin(){return this.yMin}getYMax(){return this.yMax}getStartDate(){return this.startDate}getEndDate(){return this.endDate}shift(t){for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(this.values[e]=this.values[e]+t);this.yMin=this.yMin+t,this.yMax=this.yMax+t}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new Fo(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class Eo{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new So(this,t);return n.setId(t.getId()),e&&n.setName(e.datasetName[t.getId()]),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e;return null}getXDatasetIds(){let t=[];for(let e of this.datasets)if(e.getQuery().usedAsXDataset){let n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class Bo{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.file=[],this.specifiedFilesOnly=!1,this.fileContainsLinkedFiles=[],this.fileMultiplierAfterLink="",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.valueShift=[],this.valueType=[],this.textValueMap={},this.dataAreaSize=new Ro(300,300),this.margin=new Wo(10,10,10,10),this.tooltipSize=new Ro(90,45),this.fixedScale=1,this.fitPanelWidth=!1,this.output=[],this.line=[],this.bar=[],this.pie=[],this.summary=[],this.month=[],this.heatmap=[],this.bullet=[],this.customDataset=[],this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class No{constructor(){this.id=-1,this.name="",this.xData=[],this.yData=[]}}class Lo{constructor(){this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.xAxisTickInterval=null,this.yAxisTickInterval=[],this.xAxisTickLabelFormat=null,this.yAxisTickLabelFormat=[],this.yMin=[],this.yMax=[],this.reverseYAxis=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return Ja.Unknown}}class Vo extends Lo{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}GetGraphType(){return Ja.Line}}class Io extends Lo{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}GetGraphType(){return Ja.Bar}}class Yo{constructor(){this.title="",this.data=[],this.dataColor=[],this.dataName=[],this.label=[],this.hideLabelLessThan=.03,this.extLabel=[],this.showExtLabelOnlyIfNoLabel=!1,this.ratioInnerRadius=0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return Ja.Pie}}class zo{constructor(){this.template="",this.style=""}GetGraphType(){return Ja.Summary}}class Po{constructor(){this.mode="circle",this.dataset=[],this.startWeekOn="Sun",this.threshold=[],this.yMin=[],this.yMax=[],this.color=null,this.dimNotInMonth=!0,this.initMonth="",this.showSelectedValue=!0,this.headerYearColor=null,this.headerMonthColor=null,this.dividingLineColor=null,this.showCircle=!0,this.showStreak=!0,this.showTodayRing=!0,this.showSelectedRing=!0,this.circleColor=null,this.circleColorByValue=!1,this.todayRingColor="",this.selectedRingColor="firebrick",this.showAnnotation=!0,this.annotation=[],this.showAnnotationOfAllTargets=!0,this.selectedDate="",this.selectedDataset=null}GetGraphType(){return Ja.Month}}class Oo{constructor(){this.dataset="0",this.startWeekOn="Sun",this.orientation="vertical",this.yMin=null,this.yMax=null,this.color=null}GetGraphType(){return Ja.Heatmap}}class Uo{constructor(){this.title="",this.dataset="0",this.orientation="horizontal",this.value="",this.valueUnit="",this.valueColor="#69b3a2",this.range=[],this.rangeColor=[],this.showMarker=!1,this.markerValue=0,this.markerColor=""}GetGraphType(){return Ja.Bullet}}class Ro{constructor(t,e){this.width=t,this.height=e}}class Wo{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class $o{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class Ho{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}class Xo{constructor(){this.fileTotal=0,this.fileAvailable=0,this.fileOutOfDateRange=0,this.fileNotInFormat=0,this.errorMessage="",this.minDate=window.moment(""),this.maxDate=window.moment(""),this.gotAnyValidXValue=!1,this.gotAnyValidYValue=!1}}const qo=function(){const t=["HH","H","hh","h"],e=["mm","m"],n=["ss","s",""];let r=[];for(let i of t)for(let t of e)for(let e of n){let n=`${i}:${t}`;""!==e&&(n+=`:${e}`),i.contains("h")&&(n+=" a"),r.push(n)}return r}();function jo(t,e,n){if(!e&&!n)return t;let r=t;if(r.startsWith("^")&&(r=r.slice(1)),e){let t=new RegExp("^("+e+")","gm");t.test(r)&&(r=r.replace(t,""))}if(n){let t=new RegExp("("+n+")$","gm");t.test(r)&&(r=r.replace(t,""))}return r}function Go(t,e){let n=e;t.length>4&&t.startsWith("[[")&&t.endsWith("]]")&&(t=t.substring(2,t.length-2)),"iso-8601"===e.toLowerCase()&&(n=window.moment.ISO_8601);let r=window.moment(t,n,!0);return r=r.startOf("day"),r}function Qo(t,e,n=!0){if(!t||!e||0===e.length)return[null,t];let r=null;const i="(?<value>[0-9]+)("+e.join("|")+")",a=new RegExp(i,"gm");let o=a.exec(t);return o&&void 0!==o.groups&&void 0!==o.groups.value&&(r=parseFloat(o.groups.value),Number.isNumber(r)&&!Number.isNaN(r))?(n&&(t=t.replace(a,"")),[r,t]):[null,t]}function Zo(t){if(!t)return null;let e=window.moment.duration(0),n=!1,r=!1;t.startsWith("+")&&(r=!1,t=t.substring(1)),t.startsWith("-")&&(r=!0,t=t.substring(1));let i=null;[i,t]=Qo(t,["year","years","Y","y"]),null!==i&&(r&&(i*=-1),e.add(i,"years"),n=!0);let a=null;[a,t]=Qo(t,["month","months","M"]),null!==a&&(r&&(a*=-1),e.add(a,"months"),n=!0);let o=null;[o,t]=Qo(t,["week","weeks","W","w"]),null!==o&&(r&&(o*=-1),e.add(o,"weeks"),n=!0);let l=null;[l,t]=Qo(t,["day","days","D","d"]),null!==l&&(r&&(l*=-1),e.add(l,"days"),n=!0);let u=null;[u,t]=Qo(t,["hour","hours","H","h"]),null!==u&&(r&&(u*=-1),e.add(u,"hours"),n=!0);let s=null;[s,t]=Qo(t,["minute","minutes","m"]),null!==s&&(r&&(s*=-1),e.add(s,"minutes"),n=!0);let f=null;return[f,t]=Qo(t,["second","seconds","S","s"]),null!==f&&(r&&(f*=-1),e.add(f,"seconds"),n=!0),n?e:null}function Jo(t,e){let n=null,r=Zo(t);return r&&window.moment.isDuration(r)&&(n=el(e),n=n.add(r),n&&n.isValid()),n}function Ko(t,e){return null==t?null:"iso-8601"===e.toLowerCase()?t.format():t.format(e)}function tl(t,e){return Go(Ko(window.moment(t),e),e)}function el(t){return Go(Ko(window.moment(),t),t)}function nl(t,e){for(var n=(e=e.replace(/^\./,"")).split("."),r=0,i=n.length;r<i;++r){var a=n[r];if(!(a in t))return null;t=t[a]}return"string"==typeof t||Array.isArray(t)?t:"number"==typeof t?t.toString():null}function rl(t,e){const n=Array.from(t),r=n.findIndex((t=>t!==e)),i=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===i?t:t.substring(r,t.length-i)}function il(t,e=null){let n=null,r=Ka.Number;if("string"==typeof t)if(t.includes(":")){let e=!1;t.startsWith("-")&&(e=!0,t=t.substring(1));let i=window.moment(t,qo,!0);i.isValid()&&(n=i.diff(window.moment("00:00","HH:mm",!0),"seconds"),e&&(n*=-1),r=Ka.Time)}else if(e){let r=!1;const i=Object.keys(e);for(let a of i)if(t===a){n=e[a],r=!0;break}r||(n=parseFloat(t),Number.isNaN(n)&&(n=null))}else n=parseFloat(t),Number.isNaN(n)&&(n=null);else"number"==typeof t&&(n=t);return{type:r,value:n}}function al(t,e="",n=""){var r=qt("body").append("svg");let i=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&i.attr("class",e),n&&i.attr("transform","rotate("+n+")");var a=r.node().getBBox();return r.remove(),{width:a.width,height:a.height}}function ol(t,e,n){let r=(0|parseFloat(t.attr("width")))+e,i=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",i)}function ll(t,e,n){let r=new $o(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")}function ul(t){return t=(t=(t=t.replace(/(^\\s\*)|(\\s\*$)/gi,"")).replace(/\[ \]{2,}/gi," ")).replace(/\\n /,"\\n")}var sl=a((function(t,e){!function(n){var r="Compound",i="MemberExpression",a="Literal",o=function(t,e){var n=new Error(t+" at character "+e);throw n.index=e,n.description=t,n},l=!0,u={"-":l,"!":l,"~":l,"+":l},s={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},f={$:l,_:l},c=function(t){var e,n=0;for(var r in t)(e=r.length)>n&&t.hasOwnProperty(r)&&(n=e);return n},h=c(u),d=c(s),g={true:!0,false:!1,null:null},p=function(t){return s[t]||0},y=function(t,e,n){return{type:"||"===t||"&&"===t?"LogicalExpression":"BinaryExpression",operator:t,left:e,right:n}},m=function(t){return t>=48&&t<=57},v=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=128&&!s[String.fromCharCode(t)]||f.hasOwnProperty(String.fromCharCode(t))},w=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||t>=128&&!s[String.fromCharCode(t)]||f.hasOwnProperty(String.fromCharCode(t))},x=function(t){for(var e,n,l=0,f=t.charAt,c=t.charCodeAt,x=function(e){return f.call(t,e)},A=function(e){return c.call(t,e)},b=t.length,D=function(){for(var t=A(l);32===t||9===t||10===t||13===t;)t=A(++l)},k=function(){var t,e,n=T();return D(),63!==A(l)?n:(l++,(t=k())||o("Expected expression",l),D(),58===A(l)?(l++,(e=k())||o("Expected expression",l),{type:"ConditionalExpression",test:n,consequent:t,alternate:e}):void o("Expected :",l))},M=function(){D();for(var e=t.substr(l,d),n=e.length;n>0;){if(s.hasOwnProperty(e)&&(!v(A(l))||l+e.length<t.length&&!w(A(l+e.length))))return l+=n,e;e=e.substr(0,--n)}return!1},T=function(){var t,e,n,r,i,a,u,s,f;if(a=C(),!(e=M()))return a;for(i={value:e,prec:p(e)},(u=C())||o("Expected expression after "+e,l),r=[a,i,u];(e=M())&&0!==(n=p(e));){for(i={value:e,prec:n},f=e;r.length>2&&n<=r[r.length-2].prec;)u=r.pop(),e=r.pop().value,a=r.pop(),t=y(e,a,u),r.push(t);(t=C())||o("Expected expression after "+f,l),r.push(i,t)}for(t=r[s=r.length-1];s>1;)t=y(r[s-1].value,r[s-2],t),s-=2;return t},C=function(){var e,n,r,a;if(D(),e=A(l),m(e)||46===e)return F();if(39===e||34===e)a=_();else if(91===e)a=N();else{for(r=(n=t.substr(l,h)).length;r>0;){if(u.hasOwnProperty(n)&&(!v(A(l))||l+n.length<t.length&&!w(A(l+n.length))))return l+=r,{type:"UnaryExpression",operator:n,argument:C(),prefix:!0};n=n.substr(0,--r)}v(e)?a=S():40===e&&(a=B())}if(!a)return!1;for(D(),e=A(l);46===e||91===e||40===e;)l++,46===e?(D(),a={type:i,computed:!1,object:a,property:S()}):91===e?(a={type:i,computed:!0,object:a,property:k()},D(),93!==(e=A(l))&&o("Unclosed [",l),l++):40===e&&(a={type:"CallExpression",arguments:E(41),callee:a}),D(),e=A(l);return a},F=function(){for(var t,e,n="";m(A(l));)n+=x(l++);if(46===A(l))for(n+=x(l++);m(A(l));)n+=x(l++);if("e"===(t=x(l))||"E"===t){for(n+=x(l++),"+"!==(t=x(l))&&"-"!==t||(n+=x(l++));m(A(l));)n+=x(l++);m(A(l-1))||o("Expected exponent ("+n+x(l)+")",l)}return e=A(l),v(e)?o("Variable names cannot start with a number ("+n+x(l)+")",l):46===e&&o("Unexpected period",l),{type:a,value:parseFloat(n),raw:n}},_=function(){for(var t,e="",n=x(l++),r=!1;l<b;){if((t=x(l++))===n){r=!0;break}if("\\"===t)switch(t=x(l++)){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:e+=t}else e+=t}return r||o('Unclosed quote after "'+e+'"',l),{type:a,value:e,raw:n+e+n}},S=function(){var e,n=A(l),r=l;for(v(n)?l++:o("Unexpected "+x(l),l);l<b&&(n=A(l),w(n));)l++;return e=t.slice(r,l),g.hasOwnProperty(e)?{type:a,value:g[e],raw:e}:"this"===e?{type:"ThisExpression"}:{type:"Identifier",name:e}},E=function(t){for(var e,n,i=[],a=!1,u=0;l<b;){if(D(),(e=A(l))===t){a=!0,l++,41===t&&u&&u>=i.length&&o("Unexpected token "+String.fromCharCode(t),l);break}if(44===e){if(l++,++u!==i.length)if(41===t)o("Unexpected token ,",l);else if(93===t)for(var s=i.length;s<u;s++)i.push(null)}else(n=k())&&n.type!==r||o("Expected comma",l),i.push(n)}return a||o("Expected "+String.fromCharCode(t),l),i},B=function(){l++;var t=k();if(D(),41===A(l))return l++,t;o("Unclosed (",l)},N=function(){return l++,{type:"ArrayExpression",elements:E(93)}},L=[];l<b;)59===(e=A(l))||44===e?l++:(n=k())?L.push(n):l<b&&o('Unexpected "'+x(l)+'"',l);return 1===L.length?L[0]:{type:r,body:L}};x.version="0.4.0",x.toString=function(){return"JavaScript Expression Parser (JSEP) v"+x.version},x.addUnaryOp=function(t){return h=Math.max(t.length,h),u[t]=l,this},x.addBinaryOp=function(t,e){return d=Math.max(t.length,d),s[t]=e,this},x.addIdentifierChar=function(t){return f[t]=l,this},x.addLiteral=function(t,e){return g[t]=e,this},x.removeUnaryOp=function(t){return delete u[t],t.length===h&&(h=c(u)),this},x.removeAllUnaryOps=function(){return u={},h=0,this},x.removeIdentifierChar=function(t){return delete f[t],this},x.removeBinaryOp=function(t){return delete s[t],t.length===d&&(d=c(s)),this},x.removeAllBinaryOps=function(){return s={},d=0,this},x.removeLiteral=function(t){return delete g[t],this},x.removeAllLiterals=function(){return g={},this},t.exports?e=t.exports=x:e.parse=x}()})),fl=a((function(t,e){!function(){var t={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function n(t){return i(o(t),arguments)}function r(t,e){return n.apply(null,[t].concat(e||[]))}function i(e,r){var i,a,o,l,u,s,f,c,h,d=1,g=e.length,p="";for(a=0;a<g;a++)if("string"==typeof e[a])p+=e[a];else if("object"==typeof e[a]){if((l=e[a]).keys)for(i=r[d],o=0;o<l.keys.length;o++){if(null==i)throw new Error(n('[sprintf] Cannot access property "%s" of undefined value "%s"',l.keys[o],l.keys[o-1]));i=i[l.keys[o]]}else i=l.param_no?r[l.param_no]:r[d++];if(t.not_type.test(l.type)&&t.not_primitive.test(l.type)&&i instanceof Function&&(i=i()),t.numeric_arg.test(l.type)&&"number"!=typeof i&&isNaN(i))throw new TypeError(n("[sprintf] expecting number but found %T",i));switch(t.number.test(l.type)&&(c=i>=0),l.type){case"b":i=parseInt(i,10).toString(2);break;case"c":i=String.fromCharCode(parseInt(i,10));break;case"d":case"i":i=parseInt(i,10);break;case"j":i=JSON.stringify(i,null,l.width?parseInt(l.width):0);break;case"e":i=l.precision?parseFloat(i).toExponential(l.precision):parseFloat(i).toExponential();break;case"f":i=l.precision?parseFloat(i).toFixed(l.precision):parseFloat(i);break;case"g":i=l.precision?String(Number(i.toPrecision(l.precision))):parseFloat(i);break;case"o":i=(parseInt(i,10)>>>0).toString(8);break;case"s":i=String(i),i=l.precision?i.substring(0,l.precision):i;break;case"t":i=String(!!i),i=l.precision?i.substring(0,l.precision):i;break;case"T":i=Object.prototype.toString.call(i).slice(8,-1).toLowerCase(),i=l.precision?i.substring(0,l.precision):i;break;case"u":i=parseInt(i,10)>>>0;break;case"v":i=i.valueOf(),i=l.precision?i.substring(0,l.precision):i;break;case"x":i=(parseInt(i,10)>>>0).toString(16);break;case"X":i=(parseInt(i,10)>>>0).toString(16).toUpperCase()}t.json.test(l.type)?p+=i:(!t.number.test(l.type)||c&&!l.sign?h="":(h=c?"+":"-",i=i.toString().replace(t.sign,"")),s=l.pad_char?"0"===l.pad_char?"0":l.pad_char.charAt(1):" ",f=l.width-(h+i).length,u=l.width&&f>0?s.repeat(f):"",p+=l.align?h+i+u:"0"===s?h+u+i:u+h+i)}return p}var a=Object.create(null);function o(e){if(a[e])return a[e];for(var n,r=e,i=[],o=0;r;){if(null!==(n=t.text.exec(r)))i.push(n[0]);else if(null!==(n=t.modulo.exec(r)))i.push("%");else{if(null===(n=t.placeholder.exec(r)))throw new SyntaxError("[sprintf] unexpected placeholder");if(n[2]){o|=1;var l=[],u=n[2],s=[];if(null===(s=t.key.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(l.push(s[1]);""!==(u=u.substring(s[0].length));)if(null!==(s=t.key_access.exec(u)))l.push(s[1]);else{if(null===(s=t.index_access.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");l.push(s[1])}n[2]=l}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");i.push({placeholder:n[0],param_no:n[1],keys:n[2],sign:n[3],pad_char:n[4],align:n[5],width:n[6],precision:n[7],type:n[8]})}r=r.substring(n[0].length)}return a[e]=i}e.sprintf=n,e.vsprintf=r,"undefined"!=typeof window&&(window.sprintf=n,window.vsprintf=r)}()}));function cl(t){if("number"==typeof t){if(0===t)return!1}else if(t instanceof So&&t.getValues().some((function(t){return 0===t})))return!1;return!0}const hl={min:function(t,e){return h(t.getValues())},minDate:function(t,e){let n=h(t.getValues());if(Number.isNumber(n)){let e=Array.from(t);for(let t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: min not found"},max:function(t,e){return c(t.getValues())},maxDate:function(t,e){let n=c(t.getValues());if(Number.isNumber(n)){let e=Array.from(t);for(let t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: max not found"},startDate:function(t,e){if(t){let e=t.getStartDate();if(e&&e.isValid())return e}return e.startDate},endDate:function(t,e){if(t){let e=t.getEndDate();if(e&&e.isValid())return e}return e.endDate},sum:function(t,e){return m(t.getValues())},count:function(t,e){return"Error: deprecated function 'count'"},numTargets:function(t,e){return t.getNumTargets()},days:function(t,e){return"Error: deprecated function 'days'"},numDays:function(t,e){return t.getLength()},numDaysHavingData:function(t,e){return t.getLengthNotNull()},maxStreak:function(t,e){let n=0,r=0;for(let e of t)null!==e.value?n++:n=0,n>=r&&(r=n);return r},maxStreakStart:function(t,e){let n=0,r=0,i=null,a=null;if(t)for(let e of t)null!==e.value?(0===n&&(i=e.date),n++):n=0,n>=r&&(r=n,a=i);return a},maxStreakEnd:function(t,e){let n=0,r=0,i=null,a=null;if(t){let e=Array.from(t);for(let t=0;t<e.length;t++){let o=e[t],l=null;t<e.length-1&&(l=e[t+1]),null!==o.value?(n++,null===(null==l?void 0:l.value)&&(i=o.date)):n=0,n>=r&&(r=n,a=i)}}return a},maxBreaks:function(t,e){let n=0,r=0;for(let e of t)null===e.value?n++:n=0,n>r&&(r=n);return r},maxBreaksStart:function(t,e){let n=0,r=0,i=null,a=null;if(t)for(let e of t)null===e.value?(0===n&&(i=e.date),n++):n=0,n>=r&&(r=n,a=i);return a},maxBreaksEnd:function(t,e){let n=0,r=0,i=null,a=null;if(t){let e=Array.from(t);for(let t=0;t<e.length;t++){let o=e[t],l=null;t<e.length-1&&(l=e[t+1]),null===o.value?(n++,null!==(null==l?void 0:l.value)&&(i=o.date)):n=0,n>=r&&(r=n,a=i)}}return a},lastStreak:function(t,e){return"Error: deprecated function 'lastStreak'"},currentStreak:function(t,e){let n=0;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null===e[t].value)break;n++}}return n},currentStreakStart:function(t,e){let n=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let r=e[t];if(t<e.length-1&&(n=e[t+1].date),null===r.value)break}}return null===n?"Error: absense":n},currentStreakEnd:function(t,e){let n=0,r=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let i=e[t];if(null===i.value)break;0===n&&(r=i.date),n++}}return null===r?"Error: absense":r},currentBreaks:function(t,e){let n=0;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null!==e[t].value)break;n++}}return n},currentBreaksStart:function(t,e){let n=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let r=e[t];if(t<e.length-1&&(n=e[t+1].date),null!==r.value)break}}return null===n?"Error: absense":n},currentBreaksEnd:function(t,e){let n=0,r=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let i=e[t];if(null!==i.value)break;0===n&&(r=i.date),n++}}return null===r?"Error: absense":r},average:function(t,e){let n=t.getLengthNotNull();return cl(n)?m(t.getValues())/n:"Error: divide by zero in expression"},median:function(t,e){return p(t.getValues(),.5,n);var n},variance:function(t,e){return function(t,e){let n,r=0,i=0,a=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-i,i+=n/++r,a+=n*(e-i));else{let o=-1;for(let l of t)null!=(l=e(l,++o,t))&&(l=+l)>=l&&(n=l-i,i+=n/++r,a+=n*(l-i))}if(r>1)return a/(r-1)}(t.getValues())}},dl={"-":function(t){if("number"==typeof t)return-1*t;if(t instanceof So){let e=t.cloneToTmpDataset();return e.getValues().forEach((function(t,e,n){null!==n[e]&&(n[e]=-1*t)})),e.recalculateMinMax(),e}return"Error: unknown operation for '-'"},"+":function(t){if("number"==typeof t)return t;if(t instanceof So){return t.cloneToTmpDataset()}return"Error: unknown operation for '+'"}},gl={"+":function(t,e){if("number"==typeof t&&"number"==typeof e)return t+e;if("number"==typeof t&&e instanceof So){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&e instanceof So){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t+e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '+'"},"-":function(t,e){if("number"==typeof t&&"number"==typeof e)return t-e;if("number"==typeof t&&e instanceof So){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t-e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t-e:r[n]=null})),n}if(t instanceof So&&e instanceof So){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t-e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '-'"},"*":function(t,e){if("number"==typeof t&&"number"==typeof e)return t*e;if("number"==typeof t&&e instanceof So){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&e instanceof So){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t*e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '*'"},"/":function(t,e){if(!cl(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t/e;if("number"==typeof t&&e instanceof So){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&e instanceof So){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t/e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '/'"},"%":function(t,e){if(!cl(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t%e;if("number"==typeof t&&e instanceof So){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof So&&e instanceof So){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t%e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '%'"}},pl={normalize:function(t,e,n){let r=t.getYMin(),i=t.getYMax();if(null!==r&&null!==i&&i>r){let e=t.cloneToTmpDataset();return e.getValues().forEach((function(t,e,n){n[e]=(t-r)/(i-r)})),e.recalculateMinMax(),e}return"Error: invalid data range for function 'normalize'"},setMissingValues:function(t,e,n){if(e&&e.length>0){let n=e[0],r=t.cloneToTmpDataset();return Number.isNumber(n)&&!Number.isNaN(n)?(r.getValues().forEach((function(t,e,r){null===t&&(r[e]=n)})),r.recalculateMinMax(),r):"Error: invalid arguments for function 'setMissingValues'"}return"Error: invalid arguments for function 'setMissingValues"}};function yl(t,e){switch(t.type){case"Literal":return t.value;case"Identifier":let n=t.name;return n in hl||n in pl?`Error: deprecated template variable '${n}', use '${n}()' instead`:`Error: unknown function name '${n}'`;case"UnaryExpression":let r=t,i=yl(r.argument,e);return"string"==typeof i?i:dl[r.operator](i);case"BinaryExpression":let a=t,o=yl(a.left,e),l=yl(a.right,e),u=function(t,e){return"string"==typeof t?t:"string"==typeof e?e:"number"==typeof t||window.moment.isMoment(t)||t instanceof So?"number"==typeof e||window.moment.isMoment(e)||e instanceof So?"":"Error: invalide operant type":"Error: invalid operant type"}(o,l);return"string"==typeof u&&u.startsWith("Error:")?u:gl[a.operator](o,l);case"CallExpression":let s=t,f=s.callee.name,c=function(t,e){return t.map((function(t){return yl(t,e)}))}(s.arguments,e);if("string"==typeof c)return c;if("dataset"===f){if(1===c.length){let t=c[0];if("string"==typeof t)return t;if("number"!=typeof t)return"Error: function 'dataset' only accepts id in number";let n=function(t,e){return e.datasets.getDatasetById(t)}(t,e);return n||`Error: no dataset found for id '${t}'`}}else{if(f in hl){if(0===c.length){let t=null;for(let n of e.datasets)t||n.getQuery().usedAsXDataset||(t=n);return t?hl[f](t,e):`No available dataset found for function ${f}`}if(1===c.length){let t=c[0];return"string"==typeof t?t:t instanceof So?hl[f](t,e):`Error: function '${f}' only accepts Dataset`}return`Error: Too many arguments for function ${f}`}if(f in pl){if(1===c.length){if("string"==typeof c[0])return c[0];if(c[0]instanceof So){let t=c[0];return pl[f](t,null,e)}return`Error: function ${f} only accept Dataset`}if(c.length>1){if("string"==typeof c[0])return c[0];if(c[0]instanceof So){let t=c[0];return pl[f](t,c.filter((function(t,e,n){return e>0})),e)}return`Error: function ${f} only accept Dataset`}return`Error: Too many arguments for function ${f}`}}return`Error: unknown function name '${f}'`}return"Error: unknown expression"}function ml(t,e){let n,r=[],i=new RegExp("{{(?<expr>[\\w+\\-*\\/0-9\\s()\\[\\]%.,]+)(::(?<format>[\\w+\\-*\\/0-9\\s()\\[\\]%.:]+))?}}","gm");for(;n=i.exec(t);){let t=n[0];if(!r.some((e=>e.source===t))&&(void 0!==n.groups&&void 0!==n.groups.expr)){let i=n.groups.expr,a=null;try{a=sl(i)}catch(t){return"Error:"+t.message}if(!a)return"Error: failed to parse expression";const o=yl(a,e);if("string"==typeof o)return o;if("number"==typeof o||window.moment.isMoment(o)){let e=null;void 0!==n.groups.format&&(e=n.groups.format),r.push({source:t,value:o,format:e})}}}return r}function vl(t,e){let n=ml(t,e);if("string"==typeof n)return n;let r=n;for(let n of r){let r=n.source,i=n.value,a=n.format,o="";"number"==typeof i?o=a?fl.sprintf("%"+a,i):i.toFixed(1):window.moment.isMoment(i)&&(o=Ko(i,a||e.dateFormat)),o&&(t=t.split(r).join(o))}return t}function wl(t,e){if(t=t.trim(),/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)$/.test(t))return parseFloat(t);let n=ml(t,e);if("string"==typeof n)return n;let r=n;return r.length>0?r[0].value:"Error: failed to resolve values"}function xl(t,e,n,r){let i="",a=.5*n.dataAreaSize.width,o=.7*a,l=o*r.ratioInnerRadius,u=[];for(let t of r.data){let e=wl(t,n);if("string"==typeof e){i=e;break}"number"==typeof e&&u.push(e)}if(""!==i)return i;let s=[];for(let t of r.label){let e=vl(t,n);if(e.startsWith("Error")){i=e;break}s.push(e)}if(""!==i)return i;let f=r.hideLabelLessThan,c=s.map((function(t){return al(t,"tracker-tick-label")})),h=[];for(let t of r.extLabel){let e=vl(t,n);if(e.startsWith("Error")){i=e;break}h.push(e)}if(""!==i)return i;let d=h.map((function(t){return al(t,"tracker-pie-label")})),g=r.showExtLabelOnlyIfNoLabel,p=Cr().range(r.dataColor),y=e.dataArea.append("g");y.attr("transform",(function(){return"translate("+.5*n.dataAreaSize.width+","+.5*n.dataAreaSize.height+")"}));let m=function(){var t=Co,e=To,n=null,r=Qa(0),i=Qa(so),a=Qa(0);function o(o){var l,u,s,f,c,h=(o=Ao(o)).length,d=0,g=new Array(h),p=new Array(h),y=+r.apply(this,arguments),m=Math.min(so,Math.max(-so,i.apply(this,arguments)-y)),v=Math.min(Math.abs(m)/h,a.apply(this,arguments)),w=v*(m<0?-1:1);for(l=0;l<h;++l)(c=p[g[l]=l]=+t(o[l],l,o))>0&&(d+=c);for(null!=e?g.sort((function(t,n){return e(p[t],p[n])})):null!=n&&g.sort((function(t,e){return n(o[t],o[e])})),l=0,s=d?(m-h*w)/d:0;l<h;++l,y=f)u=g[l],f=y+((c=p[u])>0?c*s:0)+w,p[u]={data:o[u],index:l,value:c,startAngle:y,endAngle:f,padAngle:v};return p}return o.value=function(e){return arguments.length?(t="function"==typeof e?e:Qa(+e),o):t},o.sortValues=function(t){return arguments.length?(e=t,n=null,o):e},o.sort=function(t){return arguments.length?(n=t,e=null,o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Qa(+t),o):r},o.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Qa(+t),o):i},o.padAngle=function(t){return arguments.length?(a="function"==typeof t?t:Qa(+t),o):a},o}(),v=m(u),w=y.selectAll("sector").data(v).enter().append("g").attr("class","sector"),x=xo().innerRadius(l).outerRadius(o);var A=xo().innerRadius(.9*a).outerRadius(.9*a);function b(t){return(t.endAngle-t.startAngle)/(2*Math.PI)<f}function D(t){return t.startAngle+(t.endAngle-t.startAngle)/2}function k(t,e){let n=c[e].width,r=d[e].width;b(t);let i=D(t),o=x.centroid(t),l=A.centroid(t),u=A.centroid(t),f=Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2));return""!==s[e]&&(o[0]=o[0]+(l[0]-o[0])*n/f,o[1]=o[1]+(l[1]-o[1])*n/f,u[0]=(.99*a-r-3)*(i<Math.PI?1:-1)),f=Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2)),f>Math.sqrt(Math.pow(u[0]-o[0],2)+Math.pow(u[1]-o[1],2))?[o,u]:[o,l,u]}w.append("path").attr("fill",(function(t,e){return p(e.toString())})).attr("d",x),y.selectAll("label").data(m(u)).enter().append("text").text((function(t,e){return b(t)?"":s[e]})).attr("transform",(function(t){return"translate("+x.centroid(t)[0]+","+x.centroid(t)[1]+")"})).style("text-anchor","middle").attr("class","tracker-pie-label"),y.selectAll("extLabel").data(v).enter().append("text").text((function(t,e){return g?""===s[e]||b(t)?h[e]:"":h[e]})).attr("transform",(function(t,e){let n=A.centroid(t),r=D(t);return n[0]=(.99*a-d[e].width)*(r<Math.PI?1:-1),"translate("+n[0]+","+n[1]+")"})).style("text-anchor",(function(t){return D(t)<Math.PI?"start":"end"})).attr("class","tracker-pie-label"),y.selectAll("line").data(v).enter().append("polyline").attr("stroke","black").style("fill","none").attr("stroke-width",1).attr("points",(function(t,e){if(g){if((""===s[e]||b(t))&&""!==h[e])return k(t,e)}else if(""!==h[e])return k(t,e)})).attr("class","tracker-axis")}function Al(t,e,n){if(!e||!n)return;let r={};r=function(t,e,n,r){qt(e).select("#svg").remove();for(var i=Object.getOwnPropertyNames(t),a=0;a<i.length;a++)delete t[i[a]];let o=qt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}(r,t,e);let i=Ga[n.dataColor.length];for(let t=0;t<n.dataColor.length;t++)null===n.dataColor[t]&&(n.dataColor[t]=i[t]);!function(t,e,n,r){if(!n||!r)return;if(!r.title)return;let i=al(r.title,"tracker-title"),a=e.graphArea.append("text").text(r.title).attr("id","title").attr("transform","translate("+n.dataAreaSize.width/2+","+i.height/2+")").attr("height",i.height).attr("class","tracker-title");e.title=a,ol(e.svg,0,i.height),ol(e.graphArea,0,i.height),ll(e.dataArea,0,i.height)}(0,r,e,n),xl(0,r,e,n),n.showLegend&&function(t,e,n,r){let i=e.svg;e.graphArea;let a=e.dataArea,o=e.title,l=0;o&&(l=parseFloat(o.attr("height")));let u=r.dataName,s=u.map((function(t){return al(t,"tracker-legend-label")})),f=0,c=0;for(let t=0;t<u.length;t++)s[t].width>c&&(c=s[t].width,f=t);let h=c/u[f].length,d=s[f].height,g=u.length,p=2*h,y=d,v=2*h,w=0,x=0;"vertical"===r.legendOrientation?(w=3*p+v+c,x=(g+1)*y):"horizontal"===r.legendOrientation&&(w=(2*p+v)*g+p+m(s,(function(t,e){return t.width})),x=y+d);let A=0,b=0;if("top"===r.legendPosition)A=n.dataAreaSize.width/2-w/2,b=l,ol(i,0,x+y),ll(a,0,x+y);else if("bottom"===r.legendPosition)A=n.dataAreaSize.width/2-w/2,b=l+n.dataAreaSize.height+y,ol(i,0,x+y);else if("left"===r.legendPosition)A=0,b=l+n.dataAreaSize.height/2-x/2,ol(i,w+p,0),ll(a,w+p,0);else{if("right"!==r.legendPosition)return;A=n.dataAreaSize.width+p,b=l+n.dataAreaSize.height/2-x/2,ol(i,w+p,0)}let D=e.graphArea.append("g").attr("id","legend").attr("transform","translate("+A+","+b+")"),k=D.append("rect").attr("class","tracker-legend").attr("width",w).attr("height",x);r.legendBgColor&&k.style("fill",r.legendBgColor),r.legendBorderColor&&k.style("stroke",r.legendBorderColor);let M=p,T=d,C=M+p+v,F=T;if("vertical"===r.legendOrientation)D.selectAll("markers").data(u).enter().append("circle").attr("cx",M+v/2).attr("cy",(function(t,e){return T+e*y})).attr("r",(function(t,e){return 5})).style("fill",(function(t,e){return r.dataColor[e]})),D.selectAll("labels").data(u).enter().append("text").attr("x",C).attr("y",(function(t,e){return F+e*y})).text((function(t,e){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",(function(t,e){return r.dataColor[e]}));else if("horizontal"===r.legendOrientation){let t=0;t=0,D.selectAll("markers").data(u).enter().append("circle").attr("cx",(function(e,n){return 0===n?t=M+v/2:t+=s[n].width+p+v+p,t})).attr("cy",T).attr("r",(function(t,e){return 5})).style("fill",(function(t,e){return r.dataColor[e]})),t=0,D.selectAll("labels").data(u).enter().append("text").attr("x",(function(e,n){return 0===n?t=C:t+=s[n].width+p+v+p,t})).attr("y",F).text((function(t,e){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",(function(t,e){return r.dataColor[e]}))}}(0,r,e,n)}function bl(t,e,n){if(!e||!n)return;let r="";n.template,r=n.template;let i=vl(r,e);if(i.startsWith("Error:"))return i;if(r=i,""!==r){let e=qt(t).append("div");if(r.includes("\n")||r.includes("\\n")){let t=r.split(/(\n|\\n)/);for(let n of t)"\n"!==n&&"\\n"!==n&&e.append("div").text(n)}else e.text(r);""!==n.style&&e.attr("style",n.style)}}let Dl=!1;function kl(t,e){let n=e.dataset;if(0===n.length)return!1;let r=null;if(null===e.selectedDataset){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;if(r)return e.selectedDataset=r.getId(),!0}else{let i=e.selectedDataset,a=n.findIndex((t=>t===i));if(a>=0){if(a===e.dataset.length-1){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;return!!r&&(e.selectedDataset=r.getId(),!0)}{a++;let i=n[a];if(r=t.datasets.getDatasetById(i),e.selectedDataset=i,r&&!r.getQuery().usedAsXDataset)return!0;kl(t,e)}}}return!1}function Ml(t,e,n,r){qt(e).select("#svg").remove();for(var i=Object.getOwnPropertyNames(t),a=0;a<i.length;a++)delete t[i[a]];let o=qt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}function Tl(t,e){let n=t.svg.selectAll("circle");for(let t of n){let e=qt(t).attr("id");e&&e.startsWith("tracker-selected-circle-")&&qt(t).style("stroke","none")}e.selectedDate="",t.monitor.text("")}function Cl(t,e,n,r,i){if(!n||!r)return;let a=r.selectedDataset;if(null===a)return;let o=n.datasets.getDatasetById(a);if(!o)return;let l=o.getName();i.month(),i.daysInMonth(),i.year();let u=al("30","tracker-month-label"),s=2.8*Math.max(u.width,u.height),f=i.format("YYYY"),c=i.format("MMM"),h=al(f,"tracker-month-header-year"),d=al(c,"tracker-month-header-month"),g=0,p=e.graphArea.append("g"),y=null;r.headerMonthColor?y=r.headerMonthColor:r.color&&(y=r.color);let m=p.append("text").text(c).attr("id","titleMonth").attr("transform","translate("+s/4+","+d.height+")").attr("class","tracker-month-header-month").style("cursor","default").on("click",(function(t){Tl(e,r)}));y&&m.style("fill",y),g+=d.height;let v=null;r.headerYearColor?v=r.headerYearColor:r.color&&(v=r.color);let w=p.append("text").text(f).attr("id","titleYear").attr("transform","translate("+s/4+","+(g+h.height)+")").attr("class","tracker-month-header-year").style("cursor","default").attr("font-weight","bold").on("click",(function(t){Tl(e,r)}));v&&w.style("fill",v),g+=h.height;let x=al(l,"tracker-month-title-rotator");if("circle"===r.mode||"annotation"===r.mode&&!r.showAnnotationOfAllTargets){let a=p.append("text").text(l).attr("transform","translate("+3.5*s+","+x.height+")").attr("class","tracker-month-title-rotator").style("cursor","pointer").on("click",(function(a){kl(n,r)&&(Tl(e,r),_l(t,e,n,r,i))}));e.rotator=a}let A=al("0.0000","tracker-month-title-monitor"),b=p.append("text").text("").attr("id","monitor").attr("class","tracker-month-title-monitor").attr("transform","translate("+3.5*s+","+(x.height+A.height)+")").style("cursor","pointer").style("fill",r.selectedRingColor);e.monitor=b;let D=al("<","tracker-month-title-arrow");p.append("text").text("<").attr("id","arrowLeft").attr("transform","translate("+5.5*s+","+(g/2+D.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(a){Tl(e,r),r.selectedDate="";let o=i.clone().add(-1,"month");_l(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text(">").attr("id","arrowLeft").attr("transform","translate("+6.5*s+","+(g/2+D.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(a){Tl(e,r);let o=i.clone().add(1,"month");_l(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text("◦").attr("id","arrowToday").attr("transform","translate("+6*s+","+(g/2+D.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){Tl(e,r);let a=el(n.dateFormat);_l(t,e,n,r,a)})).style("cursor","pointer"),g+=8;let k=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];"mon"===r.startWeekOn.toLowerCase()&&k.push(k.shift());let M=al(k[0],"tracker-month-weekday");e.graphArea.selectAll("weekDays").data(k).enter().append("text").text((function(t){return t})).attr("transform",(function(t,e){return"translate("+(e+.5)*s+","+(g+M.height)+")"})).attr("class","tracker-month-weekday").attr("text-anchor","middle").style("cursor","default").on("click",(function(t){Tl(e,r)})),g+=M.height+8;let T=null;r.dividingLineColor?T=r.dividingLineColor:r.color&&(T=r.color);let C=e.graphArea.append("rect").attr("x",0).attr("y",g).attr("width",6.5*s+M.width).attr("height",1).attr("class","tracker-month-dividing-line");T&&C.style("fill",T),g+=1,p.attr("height",g),e.header=p,ll(e.dataArea,0,g)}function Fl(t,e,n,r,i){if(!n||!r)return;let a=r.mode;if("circle"!==a&&"annotation"!==a)return"Unknown month view mode";let o=r.selectedDataset;if(null===o)return;let l=n.datasets.getDatasetById(o);if(!l)return;let u=r.dataset.findIndex((t=>t===o));o<0&&(u=0);let s=r.threshold[u];i.month(),i.daysInMonth();let f=al("30","tracker-month-label"),d=2.8*Math.max(f.width,f.height),g=d/2.8*1.8/2,p=(d-2*g)/2,y=h(l.getValues());null!==r.yMin[u]&&(y=r.yMin[u]);let m=c(l.getValues());null!==r.yMax[u]&&(m=r.yMax[u]);let v=!0;(null===m||null===y||m<=y)&&(v=!1);const w=i.clone().startOf("month");let x=w.clone().subtract(w.day(),"days");"mon"===r.startWeekOn.toLowerCase()&&(x=x.add(1,"days"));const A=i.clone().endOf("month");let b=A.clone().add(7-A.day()-1,"days");"mon"===r.startWeekOn.toLowerCase()&&(b=b.add(1,"days"));const D=l.getStartDate(),k=l.getEndDate();let M=r.showAnnotation,T=r.annotation,C=T[u],F=r.showAnnotationOfAllTargets,_=[],S=0,E=0,B=0;for(let t=x.clone();t<=b;t.add(1,"days")){t=Go(Ko(t,n.dateFormat),n.dateFormat),"2021-01-02"===t.format("YYYY-MM-DD")&&(Dl=!1),"mon"===r.startWeekOn.toLowerCase()?(S=t.day()-1,S<0&&(S=6),E=Math.floor(B/7)):(S=t.day(),E=Math.floor(B/7));let e=!0;(t.diff(w)<0||t.diff(A)>0)&&(e=!1);let i=!0;D&&k&&t.diff(D)>=0&&t.diff(k)<=0&&(i=!1);const a=l.getValue(t);Dl&&(console.log(l),console.log(Ko(t,n.dateFormat)),console.log(l.getValue(window.moment("2021-01-02"))),console.log(a));let o=!1;r.circleColorByValue?(v||null!==a&&a>s)&&(o=!0):null!==a&&a>s&&(o=!0);let u=null;r.circleColorByValue&&v&&null!==a&&(u=(a-y)/(m-y));let f=l.getValue(t,1),c=l.getValue(t,-1),h=!1;null!==a&&a>s&&null!==c&&c>s&&(h=!0);let d=!1;null!==a&&a>s&&null!==f&&f>s&&(d=!0),Dl&&(console.log(`preValue: ${c}, curValue: ${a}, nextValue: ${f}`),console.log(r.threshold),console.log(`streakIn: ${h}, streakOut: ${d}`));let g="";if(M)if(F)for(let e of r.dataset){let i=r.dataset.findIndex((t=>t===e));if(i>=0){let a=n.datasets.getDatasetById(e).getValue(t),o=r.threshold[i];null!==a&&a>o&&(g+=T[i])}}else a>s&&(g=C);_.push({date:Ko(t,n.dateFormat),value:a,scaledValue:u,dayInMonth:t.date(),isInThisMonth:e,isOutOfDataRange:i,row:E,col:S,showCircle:o,streakIn:h,streakOut:d,annotation:g}),B++,Dl&&(Dl=!1)}let N=(S+1)*d,L=Kr().domain([-.5,6.5]).range([0,N]);if("circle"===a&&r.showCircle&&r.showStreak){let t="#69b3a2";r.circleColor?t=r.circleColor:r.color&&(t=r.color),e.dataArea.selectAll("streakIn").data(_.filter((function(t){return t.streakIn}))).enter().append("rect").attr("x",(function(t){return L(t.col)-g-p})).attr("y",(function(t){return L(t.row)-1.5})).attr("width",p).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?kr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})),e.dataArea.selectAll("streakOut").data(_.filter((function(t){return t.streakOut}))).enter().append("rect").attr("x",(function(t){return L(t.col)+g})).attr("y",(function(t){return L(t.row)-1.5})).attr("width",p).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?kr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1}))}let V="#69b3a2";r.circleColor?V=r.circleColor:r.color&&(V=r.color),"circle"===a&&r.showCircle&&e.dataArea.selectAll("dot").data(_).enter().append("circle").attr("r",g).attr("cx",(function(t){return L(t.col)})).attr("cy",(function(t){return L(t.row)})).style("fill",(function(t){if(t.showCircle){if(!r.circleColorByValue)return V;if(null!==t.scaledValue){return kr("white",V)(.8*t.scaledValue+.2)}return V}return"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).style("cursor","default");let I=Ko(window.moment(),n.dateFormat);if("circle"===a&&r.showTodayRing){let t=e.dataArea.selectAll("todayRing").data(_.filter((function(t){return t.date===I}))).enter().append("circle").attr("r",.9*g).attr("cx",(function(t){return L(t.col)})).attr("cy",(function(t){return L(t.row)})).attr("class","tracker-month-today-circle").style("cursor","default");""!==r.todayRingColor?t.style("stroke",r.todayRingColor):t.style("stroke","white")}"circle"===a&&r.showSelectedRing&&e.dataArea.selectAll("selectedRing").data(_).enter().append("circle").attr("r",g).attr("cx",(function(t){return L(t.col)})).attr("cy",(function(t){return L(t.row)})).attr("id",(function(t){return"tracker-selected-circle-"+t.date})).attr("class","tracker-month-selected-circle").style("cursor","default").style("stroke","none"),e.dataArea.selectAll("dayLabel").data(_).enter().append("text").text((function(t){return t.dayInMonth.toString()})).attr("transform",(function(t){return"translate("+L(t.col)+","+(L(t.row)+f.height/4)+")"})).style("fill-opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).attr("date",(function(t){return t.date})).attr("value",(function(t){return t.value})).attr("valueType",(function(t){return Ka[l.valueType]})).attr("class","tracker-month-label").on("click",(function(t){Tl(e,r);let n=qt(this).attr("date");if(r.selectedDate=n,r.showSelectedRing&&e.dataArea.select("#tracker-selected-circle-"+n).style("stroke",r.selectedRingColor),r.showSelectedValue){let t=qt(this).attr("value"),n="";if("Time"===qt(this).attr("valueType")){n=window.moment("00:00","HH:mm",!0).add(parseFloat(t),"seconds").format("HH:mm")}else n=t;e.monitor.text(n)}})).style("cursor","pointer"),"annotation"===a&&M&&e.dataArea.selectAll("dayAnnotation").data(_).enter().append("text").text((function(t){return t.annotation})).attr("transform",(function(t){let e=L(t.col),n=L(t.row)+f.height/4;return t.annotation&&(n+=g),"translate("+e+","+n+")"})).attr("class","tracker-month-annotation");let Y=parseFloat(e.svg.attr("width")),z=parseFloat(e.svg.attr("height")),P=parseFloat(e.graphArea.attr("width")),O=parseFloat(e.graphArea.attr("height")),U=7*d+parseFloat(e.header.attr("height")),R=7*d;U>z&&ol(e.svg,0,U-z),R>Y&&ol(e.svg,R-Y,0),U>O&&ol(e.graphArea,0,U-O),R>P&&ol(e.svg,R-P,0)}function _l(t,e,n,r,i){n&&Sl&&(Cl(t,e=Ml(e,t,n),n,r,i),Fl(0,e,n,r,i))}function Sl(t,e,n){if(!e||!Sl)return;n.dataset;let r=0;for(let t of e.datasets)t.getQuery().usedAsXDataset||r++;if(0===r)return"No available dataset found";if(kl(e,n),null===n.selectedDataset)return"No available dataset found";let i={};i=Ml(i,t,e);let a=null;if(n.initMonth){let t=window.moment(n.initMonth,"YYYY-MM",!0);if(!t.isValid())return"Invalid initMonth";a=t}else window.moment(),a=e.datasets.getDates().last();a&&(Cl(t,i,e,n,a),Fl(0,i,e,n,a))}function El(t,e,n){if(e&&El)return"Under construction"}function Bl(t,e,n){if(!e||!n)return;let r=parseFloat(n.dataset);e.datasets.getDatasetById(r),"horizontal"===n.orientation?e.dataAreaSize={width:250,height:24}:"vertical"===n.orientation&&(e.dataAreaSize={width:24,height:250});let i=function(t,e,n){let r={};if(!e||!n)return;let i=qt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);r.svg=i;let a=i.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);r.graphArea=a;let o=a.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return r.dataArea=o,r}(t,e,n),a=function(t,e,n,r){if(!e||!n)return;let i=n.range,a=i[i.length-1],o=[0,a],l=n.valueUnit,u=function(t){return l&&l.endsWith("%")?Zr(0,a,7)(t)+" %":Zr(0,a,7)(t)},s=al(u(a),"tracker-tick-label");if("horizontal"===n.orientation){let n=Kr();n.domain(o).range([0,e.dataAreaSize.width]),t.scale=n;let r=T(n);r.tickFormat(u);let i=t.dataArea.append("g").attr("id","axis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(r).attr("class","tracker-axis");t.axis=i,i.selectAll("path").style("stroke","none"),i.selectAll("line"),i.selectAll("text").attr("class","tracker-tick-label"),i.attr("width",e.dataAreaSize.width+s.width),i.attr("height",6+s.height),ol(t.svg,+s.width,6+s.height),ol(t.graphArea,+s.width,6+s.height)}else if("vertical"===n.orientation){let n=Kr();n.domain(o).range([e.dataAreaSize.height,0]),t.scale=n;let r=C(n);r.tickFormat(u);let i=t.dataArea.append("g").attr("id","axis").attr("x",0).attr("y",0).call(r).attr("class","tracker-axis");t.axis=i,i.selectAll("path").style("stroke","none"),i.selectAll("line"),i.selectAll("text").attr("class","tracker-tick-label"),i.attr("width",6+s.width),i.attr("height",e.dataAreaSize.width),ol(t.svg,6+s.width,0),ol(t.graphArea,6+s.width,0),ll(t.dataArea,6+s.width,0)}}(i,e,n);if("string"==typeof a)return a;!function(t,e,n){if(!e||!n)return;if(n.title){let r=al(n.title,"tracker-title-small");if("horizontal"===n.orientation){let i=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",r.width/2).attr("y",e.dataAreaSize.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=i,ol(t.svg,r.width+6,0),ol(t.graphArea,r.width+6,0),ll(t.dataArea,r.width+6,0)}else if("vertical"===n.orientation){let i=e.dataAreaSize.width/2;r.width>e.dataAreaSize.width&&(ol(t.svg,r.width-e.dataAreaSize.width,0),ol(t.graphArea,r.width-e.dataAreaSize.width,0),ll(t.dataArea,r.width/2-e.dataAreaSize.width/2,0),i=r.width/2);let a=parseFloat(t.axis.attr("width")),o=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",i+a).attr("y",r.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=o,ol(t.svg,0,r.height+6),ol(t.graphArea,0,r.height+6),ll(t.dataArea,0,r.height+6)}}if(n.valueUnit){let r=al(n.valueUnit,"tracker-tick-label");if("horizontal"===n.orientation){let i=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",-1*(r.width+6)).attr("y",e.dataAreaSize.height+6).attr("height",r.height).attr("class","tracker-tick-label");t.unit=i}else if("vertical"===n.orientation){let i=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",e.dataAreaSize.width/2-r.width/2).attr("y",-(r.height/2+6)).attr("height",r.height).attr("class","tracker-tick-label");t.unit=i,ol(t.svg,0,r.height+6),ol(t.graphArea,0,r.height+6),ll(t.dataArea,0,r.height+6)}}}(i,e,n),function(t,e,n,r){if(!e||!n)return;let i=t.scale,a=n.range,o=n.rangeColor,l=[],u=0;for(let t=0;t<a.length;t++)l.push({start:u,end:a[t],color:o[t]}),u=a[t];"horizontal"===n.orientation?t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return Math.floor(i(t.start))})).attr("y",(function(t){return 0})).attr("width",(function(t,e){return Math.ceil(i(t.end-t.start))})).attr("height",e.dataAreaSize.height).style("fill",(function(t){return t.color})):"vertical"===n.orientation&&t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return 0})).attr("y",(function(t){return Math.floor(i(t.end))})).attr("width",e.dataAreaSize.width).attr("height",(function(t){return e.dataAreaSize.height-Math.floor(i(t.end-t.start))})).style("fill",(function(t){return t.color}))}(i,e,n);let o=function(t,e,n,r){let i="";if(!e||!n)return;let a=wl(n.value,e);if("string"==typeof a)return a;let o=a;if(Number.isNaN(o))return i="Invalid input value: "+a,i;let l=n.valueColor,u=t.scale;if("horizontal"===n.orientation){let n=e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",u(0)).attr("y",n).attr("width",Math.floor(u(o))).attr("height",n).style("fill",l)}else if("vertical"===n.orientation){let n=e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n).attr("y",Math.floor(u(o))).attr("width",n).attr("height",e.dataAreaSize.height-Math.floor(u(o))).style("fill",l)}}(i,e,n);if("string"==typeof o)return o;!function(t,e,n,r){if(!e||!n)return;if(!n.showMarker)return;let i=n.markerValue,a=n.markerColor,o=t.scale;if("horizontal"===n.orientation){let n=2*e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",o(i)-1.5).attr("y",n/4).attr("width",3).attr("height",n).style("fill",a)}else if("vertical"===n.orientation){let n=2*e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n/4).attr("y",o(i)-1.5).attr("width",n).attr("height",3).style("fill",a)}}(i,e,n),function(t,e,n){let r=qt(t),i=e.svg,a=parseFloat(i.attr("width")),o=parseFloat(i.attr("height"));i.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${a} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(a*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}(t,i,e)}function Nl(t,e,n,r=!1){if(r){if(n){function t(t){return window.moment("00:00","HH:mm",!0).add(t,"seconds").format(n)}return t}{function n(n){const r=Math.abs(e-t);let i=window.moment("00:00","HH:mm",!0).add(n,"seconds").format("HH:mm");if(r>43200){let r=(n-t)/3600%2;(n<t||n>e||r<1)&&(i="")}return i}return n}}if(n){function t(t){return fl.sprintf("%"+n,t)}return t}return Zr(t,e,10)}function Ll(t,e,n){if(!e||!n)return;let r=e.datasets,i=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let i=-1;for(let a of t)null!=(a=e(a,++i,t))&&(void 0===n?a>=a&&(n=r=a):(n>a&&(n=a),r<a&&(r=a)))}return[n,r]}(r.getDates()),a=function(){return Mr.apply(Xa(xi,Ai,di,hi,si,li,oi,ai,ii,Ti).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(i).range([0,e.dataAreaSize.width]);t.xScale=a;let o=Zo(n.xAxisTickInterval),[l,u]=function(t,e){let n=[],r=null;if(e){let r=t[0],i=t[t.length-1];n=li.range(r.toDate(),i.toDate(),e.asDays())}else{let e=t.length;r=e<=15?li:e<=60?li.every(4):e<=105?si:e<=450?hi:e<=900?hi.every(2):di}return[n,r]}(r.getDates(),o),s=function(t,e){if(e){function t(t){return Ko(window.moment(t),e)}return t}{let e=null,n=t.length;return e=Ti(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}}(r.getDates(),n.xAxisTickLabelFormat),f=T(a);l&&0!==l.length?f.tickValues(l):u&&f.ticks(u),s&&f.tickFormat(s);let c=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(f).attr("class","tracker-axis");n.xAxisColor&&c.style("stroke",n.xAxisColor),t.xAxis=c;let h=al("99-99-99"),d=c.selectAll("text").attr("x",-1*h.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&d.style("fill",n.xAxisColor);let g=h.width*Math.sin(65/180*Math.PI),p=c.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+g)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&p.style("fill",n.xAxisLabelColor),c.attr("height",6+g),ol(t.svg,0,6+g),ol(t.graphArea,0,6+g)}function Vl(t,e,n,r,i){if(!e||!n)return;let a=e.datasets;if(0===i.length)return;if("left"!==r&&"right"!==r)return;let o=null,l=null,u=null,s=!1;for(let t of i){let e=a.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===l||e.getYMax()>l)&&(l=e.getYMax()),s=e.valueType===Ka.Time,null===u)u=s;else if(s!==u)return"Not all values in time format"}let f=null;"left"===r?f=n.yMin[0]:"right"===r&&(f=n.yMin[1]);let c=!1;"number"!=typeof f?f=o:c=!0;let h=null;"left"===r?h=n.yMax[0]:"right"===r&&(h=n.yMax[1]);let d=!1;if("number"!=typeof h?h=l:d=!0,h<f){let t=f;f=h,h=t;let e=c;c=d,d=e}let g,p,m=h-f,v=Kr();g=c?f:f-.2*m,p=d?h:h+.2*m,n.GetGraphType()===Ja.Bar&&(p<0&&(p=0),g>0&&(g=0));let w=[g,p];("left"===r&&n.reverseYAxis[0]||"right"===r&&n.reverseYAxis[1])&&(w=[p,g]),v.domain(w).range([e.dataAreaSize.height,0]),"left"===r?t.leftYScale=v:"right"===r&&(t.rightYScale=v);let x="";"left"===r?x=n.yAxisColor[0]:"right"===r&&(x=n.yAxisColor[1]);let A="";"left"===r?A=n.yAxisLabelColor[0]:"right"===r&&(A=n.yAxisLabelColor[1]);let b="";"left"===r?b=n.yAxisLabel[0]:"right"===r&&(b=n.yAxisLabel[1]);let D="",k=null,T=null;"left"===r?(D=n.yAxisUnit[0],k=n.yAxisTickInterval[0],T=n.yAxisTickLabelFormat[0]):"right"===r&&(D=n.yAxisUnit[1],k=n.yAxisTickInterval[1],T=n.yAxisTickLabelFormat[1]);let F,_=null;if(s?_=Zo(k):(_=parseFloat(k),Number.isNumber(_)&&!Number.isNaN(_)||(_=null)),"left"===r?F=C(v):"right"===r&&(F=M(2,v)),F){let t=Nl(g,p,T,s);t&&F.tickFormat(t);let e=function(t,e,n,r=!1){const i=Math.abs(e-t);let a=[];r?a=n&&window.moment.isDuration(n)?y(t,e,Math.abs(n.asSeconds())):i>18e3?y(t=3600*Math.floor(t/3600),e=3600*Math.ceil(e/3600),3600):y(t=1800*Math.floor(t/1800),e=1800*Math.ceil(e/1800),1800):n&&"number"==typeof n&&(a=y(t,e,n));return 0===a.length?null:a}(g,p,_,s);e&&F.tickValues(e)}let S=t.dataArea.append("g").attr("id","yAxis").call(F).attr("class","tracker-axis");"right"==r&&S.attr("transform","translate("+e.dataAreaSize.width+" ,0)"),"left"===r?t.leftYAxis=S:"right"===r&&(t.rightYAxis=S);let E=S.selectAll("path");x&&E.style("stroke",x);let B=S.selectAll("line");x&&B.style("stroke",x);let N=S.selectAll("text").attr("class","tracker-tick-label");x&&N.style("fill",x);let L=Nl(g,p,T,s),V=al(L(g),"tracker-axis-label"),I=al(L(p),"tracker-axis-label"),Y=Math.max(V.width,I.width);""!==D&&(b+=" ("+D+")");let z=al(b),P=S.append("text").text(b).attr("transform","rotate(-90)").attr("x",-1*e.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===r?P.attr("y",-6-Y-z.height/2):P.attr("y",6+Y+z.height),A&&P.style("fill",A);let O=z.height+Y+6;S.attr("width",O),ol(t.svg,O,0),ol(t.graphArea,O,0),"left"===r&&(ll(t.dataArea,O,0),t.title&&ll(t.title,O,0))}function Il(t,e,n,r,i){if(!e||!n)return;let a=null;if("left"===i?a=t.leftYScale:"right"===i&&(a=t.rightYScale),n.showLine[r.getId()]){let e=function(t,e){var n=Qa(!0),r=null,i=Do,a=null;function o(o){var l,u,s,f=(o=Ao(o)).length,c=!1;for(null==r&&(a=i(s=lr())),l=0;l<=f;++l)!(l<f&&n(u=o[l],l,o))===c&&((c=!c)?a.lineStart():a.lineEnd()),c&&a.point(+t(u,l,o),+e(u,l,o));if(s)return a=null,s+""||null}return t="function"==typeof t?t:void 0===t?ko:Qa(t),e="function"==typeof e?e:void 0===e?Mo:Qa(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:Qa(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Qa(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Qa(!!t),o):n},o.curve=function(t){return arguments.length?(i=t,null!=r&&(a=i(r)),o):i},o.context=function(t){return arguments.length?(null==t?r=a=null:a=i(r=t),o):r},o}().defined((function(t){return null!==t.value})).x((function(e){return t.xScale(e.date)})).y((function(t){return a(t.value)})),i=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",n.lineWidth[r.getId()]);n.fillGap[r.getId()]?i.datum(Array.from(r).filter((function(t){return null!==t.value}))).attr("d",e):i.datum(r).attr("d",e),n.lineColor[r.getId()]&&i.style("stroke",n.lineColor[r.getId()])}}function Yl(t,e,n,r,i){if(!e||!n)return;let a=null;if("left"===i?a=t.leftYScale:"right"===i&&(a=t.rightYScale),n.showPoint[r.getId()]){let i=t.dataArea.selectAll("dot").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",n.pointSize[r.getId()]).attr("cx",(function(e){return t.xScale(e.date)})).attr("cy",(function(t){return a(t.value)})).attr("date",(function(t){return Ti("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("valueType",Ka[r.valueType]).attr("class","tracker-dot");if(n.pointColor[r.getId()]&&(i.style("fill",n.pointColor[r.getId()]),n.pointBorderColor[r.getId()]&&n.pointBorderWidth[r.getId()]>0&&(i.style("stroke",n.pointBorderColor[r.getId()]),i.style("stroke-width",n.pointBorderWidth[r.getId()]))),n.allowInspectData){let n=t.svg.append("g").style("opacity",0);n.append("rect").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip");let r=n.append("text").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip-label"),a=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*2),o=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*4);i.on("mouseenter",(function(t){a.text("date:"+qt(this).attr("date"));let r=qt(this).attr("valueType"),i=qt(this).attr("value");if("Time"===r){let t=window.moment("00:00","HH:mm",!0).add(parseFloat(i),"seconds").format("HH:mm");o.text("value:"+t)}else o.text("value:"+i);const[l,u]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var i=e.getBoundingClientRect();return[t.clientX-i.left-e.clientLeft,t.clientY-i.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);l<e.dataAreaSize.width/2?n.attr("transform","translate("+(l+1.3*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"):n.attr("transform","translate("+(l-0*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"),n.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){n.transition().duration(500).style("opacity",0)}))}}}function zl(t,e,n,r,i,a,o){if(!e||!n)return;let l=e.dataAreaSize.width/r.getLength(),u=l;l-1>0&&(u=l-1),u/=o;let s=null;"left"===i?s=t.leftYScale:"right"===i&&(s=t.rightYScale);let f=t.dataArea.selectAll("bar").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(e,n){if(0===n){let n=a+1-o/2;if(n<1)return t.xScale(e.date)-l/2+a*u+n*u}return t.xScale(e.date)-l/2+a*u})).attr("y",(function(t){return s(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=a+1-o/2;return t<0?0:t<1?u*t:u}if(e===r.getLength()-1){let t=1-(a+1-o/2);return t<0?0:t<1?u*t:u}return u})).attr("height",(function(t){if(null!==t.value)return Math.abs(s(t.value)-s(0))})).attr("class","tracker-bar");n.barColor[r.getId()]&&f.style("fill",n.barColor[r.getId()])}function Pl(t,e,n){let r=t.svg;t.graphArea;let i=t.dataArea,a=t.title,o=t.xAxis,l=t.leftYAxis,u=t.rightYAxis,s=0;a&&(s=parseFloat(a.attr("height")));let f=parseFloat(o.attr("height")),c=0;l&&(c=parseFloat(l.attr("width")));let h=0;u&&(h=parseFloat(u.attr("width")));let d=e.datasets,g=d.getXDatasetIds(),p=d.getNames(),y=p.map((function(t){return al(t,"tracker-legend-label")})),v=0,w=0;for(let t=0;t<p.length;t++)g.includes(t)||y[t].width>w&&(w=y[t].width,v=t);let x=w/p[v].length,A=y[v].height,b=p.length-g.length,D=2*x,k=A,M=2*x,T=0,C=0;"vertical"===n.legendOrientation?(T=3*D+M+w,C=(b+1)*k):"horizontal"===n.legendOrientation&&(T=(2*D+M)*b+D+m(y,(function(t,e){return g.includes(e)?0:t.width})),C=k+A);let F=0,_=0;if("top"===n.legendPosition)F=c+e.dataAreaSize.width/2-T/2,_=s,ol(r,0,C+k),ll(i,0,C+k);else if("bottom"===n.legendPosition)F=c+e.dataAreaSize.width/2-T/2,_=s+e.dataAreaSize.height+f+k,ol(r,0,C+k);else if("left"===n.legendPosition)F=0,_=s+e.dataAreaSize.height/2-C/2,ol(r,T+D,0),ll(i,T+D,0);else{if("right"!==n.legendPosition)return;F=e.dataAreaSize.width+c+h+D,_=s+e.dataAreaSize.height/2-C/2,ol(r,T+D,0)}let S=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+F+","+_+")"),E=S.append("rect").attr("class","tracker-legend").attr("width",T).attr("height",C);n.legendBgColor&&E.style("fill",n.legendBgColor),n.legendBorderColor&&E.style("stroke",n.legendBorderColor);let B=D,N=A,L=B+D+M,V=N;if("vertical"===n.legendOrientation){n.GetGraphType()===Ja.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",B).attr("x2",B+M).attr("y1",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*k})).attr("y2",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*k})).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),S.selectAll("markers").data(p).enter().append("circle").attr("cx",B+M/2).attr("cy",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*k})).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetGraphType()===Ja.Bar&&S.selectAll("markers").data(p).enter().append("rect").attr("x",B).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*k-A/2})).attr("width",M).attr("height",A).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}));let t=S.selectAll("labels").data(p).enter().append("text").attr("x",L).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return V+(e-=n)*k})).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetGraphType()===Ja.Line?t.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetGraphType()===Ja.Bar&&t.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}else if("horizontal"===n.legendOrientation){let t=0,e=0;n.GetGraphType()===Ja.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=y[n].width+D+M+D,t})).attr("x2",(function(t,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?e=B+M:e+=y[n].width+D+M+D,e})).attr("y1",N).attr("y2",N).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),t=0,S.selectAll("markers").data(p).enter().append("circle").attr("cx",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B+M/2:t+=y[n].width+D+M+D,t})).attr("cy",N).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetGraphType()===Ja.Bar&&(t=0,S.selectAll("markers").data(p.filter(((t,e)=>!g.includes(e)))).enter().append("rect").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=y[n].width+D+M+D,t})).attr("y",N-A/2).attr("width",M).attr("height",A).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))),t=0;let r=S.selectAll("labels").data(p).enter().append("text").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=L:t+=y[n].width+D+M+D,t})).attr("y",V).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetGraphType()===Ja.Line?r.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetGraphType()===Ja.Bar&&r.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}}function Ol(t,e,n){if(!e||!n)return;if(!n.title)return;let r=al(n.title,"tracker-title"),i=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=i,ol(t.svg,0,r.height),ol(t.graphArea,0,r.height),ll(t.dataArea,0,r.height)}function Ul(t,e,n){let r=qt(t),i=e.svg,a=parseFloat(i.attr("width")),o=parseFloat(i.attr("height"));i.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${a} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(a*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}function Rl(t,e){let n={},r=qt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;let i=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=i;let a=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=a,n}function Wl(t,e,n){if(!e||!n)return;let r=Rl(t,e);Ol(r,e,n),Ll(r,e,n);let i=[],a=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?i.push(t):"right"===e.toLocaleLowerCase()&&a.push(t)}let l=Vl(r,e,n,"left",i);if("string"==typeof l)return l;if(r.leftYAxis&&r.leftYScale)for(let t of i){let i=e.datasets.getDatasetById(t);i.getQuery().usedAsXDataset||(Il(r,e,n,i,"left"),Yl(r,e,n,i,"left"))}let u=Vl(r,e,n,"right",a);if("string"==typeof u)return u;if(r.rightYAxis&&r.rightYScale)for(let t of a){let i=e.datasets.getDatasetById(t);i.getQuery().usedAsXDataset||(Il(r,e,n,i,"right"),Yl(r,e,n,i,"right"))}n.showLegend&&Pl(r,e,n),Ul(t,r,e)}function $l(t,e,n){if(!e||!n)return;let r=Rl(t,e);Ol(r,e,n),Ll(r,e,n);let i=[],a=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?i.push(t):"right"===e.toLocaleLowerCase()&&a.push(t)}let l=Vl(r,e,n,"left",i);if("string"==typeof l)return l;let u=i.length+a.length,s=0;if(r.leftYAxis&&r.leftYScale)for(let t of i){let i=e.datasets.getDatasetById(t);i.getQuery().usedAsXDataset||(zl(r,e,n,i,"left",s,u),s++)}let f=Vl(r,e,n,"right",a);if("string"==typeof f)return f;if(r.rightYAxis&&r.rightYScale)for(let t of a){let i=e.datasets.getDatasetById(t);i.getQuery().usedAsXDataset||(zl(r,e,n,i,"right",s,u),s++)}n.showLegend&&Pl(r,e,n),Ul(t,r,e)}function Hl(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function Xl(t){return"tag"===t.toLowerCase()||"text"===t.toLowerCase()||"frontmatter"===t.toLowerCase()||"wiki"===t.toLowerCase()||"wiki.link"===t.toLowerCase()||"wiki.display"===t.toLowerCase()||"dvfield"===t.toLowerCase()||"table"===t.toLowerCase()||"filemeta"===t.toLowerCase()||"task"===t.toLowerCase()||"task.all"===t.toLowerCase()||"task.done"===t.toLowerCase()||"task.notdone"===t.toLowerCase()}function ql(t){return"left"===t||"right"===t||"none"===t}function jl(t){return!0}function Gl(t){const e="::::::tracker::::::";let n=t.split("\\,").join(e).split(",");for(let t=0;t<n.length;t++)n[t]=n[t].split(e).join(",");return n}function Ql(t,e,n,r,i){let a=[],o="",l=0;for(;n>a.length;)a.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<a.length;n++)if(n<e.length){let i=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof i){if(i=i.trim(),""!==i){o="Invalid inputs for "+t;break}a[n]=null!==u?u:r}else{if("boolean"!=typeof i){o="Invalid inputs for "+t;break}a[n]=i,l++}}else{let t=e[e.length-1];a[n]=l>0?t:r}}}else if("string"==typeof e){let i=Gl(e);if(i.length>1){if(i.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<a.length;e++)if(e<i.length){let n=i[e].trim(),u=null;if(e>0&&(u=Hl(i[e-1].trim())),""===n)a[e]=null!==u?u:r;else{let r=Hl(n);if(null===r){o="Invalid inputs for "+t;break}a[e]=r,l++}}else{let t=Hl(i[i.length-1].trim());a[e]=l>0&&null!==t?t:r}}else if(""===e);else{let n=Hl(e);if(null!==n){a[0]=n,l++;for(let t=1;t<a.length;t++)a[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){a[0]=e,l++;for(let t=1;t<a.length;t++)a[t]=e}else o="Invalid inputs for "+t;return i||0!==l||(o="No valid input for "+t),""!==o?o:a}function Zl(t,e,n,r,i){let a=[],o="",l=0;for(;n>a.length;)a.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<a.length;n++)if(n<e.length){let i=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof i){if(i=i.trim(),""!==i){o="Invalid inputs for "+t;break}a[n]=null!==u?u:r}else{if("number"!=typeof i){o="Invalid inputs for "+t;break}a[n]=i,l++}}else{let t=e[e.length-1];a[n]=l>0?t:r}}}else if("string"==typeof e){let i=Gl(e);if(i.length>1){if(i.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<a.length;n++)if(n<i.length){let e=i[n].trim(),u=null;if(n>0&&(u=il(i[n-1].trim()).value),""===e)null!==u&&Number.isNumber(u)?a[n]=u:a[n]=r;else{let r=il(e).value;if(null===r){o="Invalid inputs for "+t;break}a[n]=r,l++}}else{let t=il(i[e.length-1].trim()).value;a[n]=l>0&&null!==t?t:r}}else if(""===e);else{let n=il(e).value;if(null!==n){a[0]=n,l++;for(let t=1;t<a.length;t++)a[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){a[0]=e,l++;for(let t=1;t<a.length;t++)a[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return i||0!==l||(o="No valid input for "+t),""!==o?o:a}function Jl(t,e,n,r,i,a){let o=[],l="",u=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return l="Too many inputs for parameter '"+t+"'",l;if(0===e.length)return l="Empty array not allowd for "+t,l;for(let n=0;n<o.length;n++)if(n<e.length){let a=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"!=typeof a){l="Invalid inputs for "+t;break}if(a=a.trim(),""===a)o[n]=null!==s?s:r;else if(i){if(!i(a)){l="Invalid inputs for "+t;break}o[n]=a,u++}else o[n]=a,u++}else{let t=e[e.length-1].trim();o[n]=u>0?t:r}}}else if("string"==typeof e){let a=Gl(e);if(a.length>1){if(a.length>n)return l="Too many inputs for parameter '"+t+"'",l;for(let e=0;e<o.length;e++)if(e<a.length){let n=a[e].trim(),s=null;if(e>0&&(s=a[e-1].trim()),""===n)o[e]=null!==s?s:r;else if(i){if(!i(n)){l="Invalid inputs for "+t;break}o[e]=n,u++}else o[e]=n,u++}else{let t=a[a.length-1].trim();o[e]=u>0?t:r}}else if(""===e);else if(i)if(i(e)){o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}else l="Invalid inputs for "+t;else{o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}}else if("number"==typeof e){let n=e.toString();if(i)if(i(n)){o[0]=n,u++;for(let t=1;t<o.length;t++)o[t]=n}else l="Invalid inputs for "+t;else{o[0]=n,u++;for(let t=1;t<o.length;t++)o[t]=n}}else l="Invalid inputs for "+t;return a||0!==u||(l="No valid input for "+t),""!==l?l:o}function Kl(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let r of e)if("string"==typeof r){let e=parseFloat(r);if(!Number.isNumber(e)){return`Parameter '${t}' accepts only numbers`}n.push(e)}}else if("string"==typeof e){let r=Gl(e);if(r.length>1)for(let e of r){let r=parseFloat(e.trim());if(Number.isNaN(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}else{if(""===e){return`Empty ${t} is not allowed.`}{let r=parseFloat(e);if(!Number.isNumber(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}}}else{if("number"!=typeof e){return`Invalid ${t}`}n.push(e)}return n}function tu(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let t of e)"string"==typeof t&&n.push(t.trim())}else{if("string"!=typeof e){return`Invalid ${t}`}{let r=Gl(e);if(r.length>1)for(let t of r)n.push(t.trim());else{if(""===e){return`Empty ${t} is not allowed.`}n.push(e)}}}return n}function eu(t,e){t&&("string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),"string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor));let n=Jl("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=Jl("yAxisColor",null==t?void 0:t.yAxisColor,2,"",jl,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let i=Jl("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",jl,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=i;let a=Jl("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=a,"string"==typeof(null==t?void 0:t.xAxisTickInterval)?e.xAxisTickInterval=t.xAxisTickInterval:"number"==typeof(null==t?void 0:t.xAxisTickInterval)&&(e.xAxisTickInterval=t.xAxisTickInterval.toString());let o=Jl("yAxisTickInterval",null==t?void 0:t.yAxisTickInterval,2,null,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yAxisTickInterval accepts not more than two values for left and right y-axes";e.yAxisTickInterval=o,"string"==typeof(null==t?void 0:t.xAxisTickLabelFormat)&&(e.xAxisTickLabelFormat=t.xAxisTickLabelFormat);let l=Jl("yAxisTickLabelFormat",null==t?void 0:t.yAxisTickLabelFormat,2,null,null,!0);if("string"==typeof l)return l;if(l.length>2)return"yAxisTickLabelFormat accepts not more than two values for left and right y-axes";e.yAxisTickLabelFormat=l;let u=Zl("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof u)return u;if(u.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=u;let s=Zl("yMax",null==t?void 0:t.yMax,2,null,!0);if("string"==typeof s)return s;if(s.length>2)return"yMax accepts not more than two values for left and right y-axes";e.yMax=s;let f=Ql("reverseYAxis",null==t?void 0:t.reverseYAxis,2,!1,!0);return"string"==typeof f?f:f.length>2?"reverseYAxis accepts not more than two values for left and right y-axes":void(e.reverseYAxis=f)}function nu(t){let e=[];if(null!==t){const n=Object.keys(t);for(let t of n)e.push(t.toString())}return e}function ru(t,e){return Go(jo(t.basename,e.dateFormatPrefix,e.dateFormatSuffix),e.dateFormat)}function iu(t,e,n){let r=window.moment(""),i=t.frontmatter;if(i&&nl(i,e.getTarget())){let t=nl(i,e.getTarget());"string"==typeof t&&(t=jo(t,n.dateFormatPrefix,n.dateFormatSuffix),r=Go(t,n.dateFormat))}return r}function au(t,e,n){let r,i=window.moment(""),a=new RegExp(e,"gm");for(;r=a.exec(t);)if(void 0!==r.groups&&void 0!==r.groups.value){let t=r.groups.value.trim();if(t=jo(t,n.dateFormatPrefix,n.dateFormatSuffix),i=Go(t,n.dateFormat),i.isValid())return i}return i}function ou(t,e,n){window.moment("");let r=e.getTarget();return e.getParentTarget()&&(r=e.getParentTarget()),au(t,"(^|\\s)#"+r+"(\\/[\\w-]+)*(:(?<value>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)",n)}function lu(t,e,n){return window.moment(""),au(t,e.getTarget(),n)}function uu(t,e,n){window.moment("");let r=e.getTarget();return e.getParentTarget()&&(r=e.getParentTarget()),r=r.replace("-","[\\s\\-]"),au(t,"(^| |\\t)\\*{0,2}"+r+"\\*{0,2}(::[ |\\t]*(?<value>[\\d\\.\\/\\-\\w,@; \\t:]*))(\\r\\?\\n|\\r|$)",n)}function su(e,n,r){let i=window.moment("");if(e&&e instanceof t.TFile){let t=n.getTarget();if("cDate"===t){i=tl(e.stat.ctime,r.dateFormat)}else if("mDate"===t){i=tl(e.stat.mtime,r.dateFormat)}else"name"===t&&(i=ru(e,r))}return i}function fu(t,e,n){window.moment("");let r=e.getType(),i=e.getTarget();return i=r===Za.Task?"\\[[\\sx]\\]\\s"+i:r===Za.TaskDone?"\\[x\\]\\s"+i:r===Za.TaskNotDone?"\\[\\s\\]\\s"+i:"\\[[\\sx]\\]\\s"+i,au(t,i,n)}function cu(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let i=new Array;i.push({query:n,value:r}),t.set(e,i)}}function hu(t,e,n,r,i,a){let o,l=new RegExp(e,"gm"),u=0,s=!1;for(;o=l.exec(t);)if(a.ignoreAttachedValue[n.getId()])u+=a.constValue[n.getId()],s=!0,n.addNumTargets();else if(void 0!==o.groups&&void 0!==o.groups.value){let t=o.groups.value.trim().split(n.getSeparator());if(!t)continue;if(1===t.length){let e=il(t[0].trim(),a.textValueMap);null!==e.value&&(e.type===Ka.Time?(u=e.value,s=!0,n.valueType=Ka.Time,n.addNumTargets()):a.ignoreZeroValue[n.getId()]&&0===e.value||(u+=e.value,s=!0,n.addNumTargets()))}else if(t.length>n.getAccessor()&&n.getAccessor()>=0){let e=il(t[n.getAccessor()].trim(),a.textValueMap);null!==e.value&&(e.type===Ka.Time?(u=e.value,s=!0,n.valueType=Ka.Time,n.addNumTargets()):(u+=e.value,s=!0,n.addNumTargets()))}}else u+=a.constValue[n.getId()],s=!0,n.addNumTargets();if(s){return cu(r,i.get(a.xDataset[n.getId()]),n,u),!0}return!1}function du(e,n,r,i,a,o){if(e&&e instanceof t.TFile){let t=r.getTarget(),l=o.get(i.xDataset[r.getId()]);if("cDate"===t){let t=e.stat.ctime;return r.valueType=Ka.Date,r.addNumTargets(),cu(a,l,r,t),!0}if("mDate"===t){let t=e.stat.mtime;return r.valueType=Ka.Date,r.addNumTargets(),cu(a,l,r,t),!0}if("size"===t){let t=e.stat.size;return r.addNumTargets(),cu(a,l,r,t),!0}if("numWords"===t){return cu(a,l,r,function(t){t=ul(t);var e=new RegExp(["(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-"+/A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source+"])+",/[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source].join("|"),"g");return(t.match(e)||[]).length}(n)),!0}if("numChars"===t){let t=n.length;return r.addNumTargets(),cu(a,l,r,t),!0}if("numSentences"===t){let t=function(t){return(((t=ul(t))||"").match(/[^.。!！?？\s][^.。!！?？]*(?:[.!?](?!['‘’"“”「」『』]?\s|$)[^.。!！?？]*)*[.。!！?？]?['’"”」』]?(?=\s||$)/gm)||[]).length}(n);return r.addNumTargets(),cu(a,l,r,t),!0}if("name"===t){let t=0,n=!1,o=il(e.basename,i.textValueMap);null!==o.value&&(o.type===Ka.Time?(t=o.value,n=!0,r.valueType=Ka.Time,r.addNumTargets()):i.ignoreZeroValue[r.getId()]&&0===o.value||(t+=o.value,n=!0,r.addNumTargets()));let u=null;if(n&&(u=t),null!==u)return cu(a,l,r,u),!0}}return!1}const gu={folder:"/",dateFormat:"YYYY-MM-DD"};class pu extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:n}=this;n.empty(),new t.Setting(n).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>e(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(n).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>e(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}class yu extends t.Plugin{onload(){return e(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new pu(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Ja.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Ja.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Ja.Summary)})}))}loadSettings(){return e(this,void 0,void 0,(function*(){this.settings=Object.assign({},gu,yield this.loadData())}))}saveSettings(){return e(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}renderErrorMessage(t,e,n){!function(t,e){qt(t).select("#svg").remove(),qt(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}(e,t),n.appendChild(e)}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let i of e.children)i instanceof t.TFile?"md"===i.extension&&r.push(i):i instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(i)));return r}getFiles(n,r,i=!0){return e(this,void 0,void 0,(function*(){if(!n)return;let e=r.folder,i=r.specifiedFilesOnly,a=r.file,o=r.fileContainsLinkedFiles,l=r.fileMultiplierAfterLink;if(!i){let r=this.app.vault.getAbstractFileByPath(t.normalizePath(e));if(r&&r instanceof t.TFolder){let t=this.getFilesInFolder(r);for(let e of t)n.push(e)}}for(let e of a){let r=e;r.endsWith(".md")||(r+=".md"),r=t.normalizePath(r);let i=this.app.vault.getAbstractFileByPath(r);i&&i instanceof t.TFile&&n.push(i)}let u=1,s=!0;""===l?s=!1:/^[0-9]+$/.test(l)?(u=parseFloat(l),s=!1):/\?<value>/.test(l)||(s=!1);for(let e of o){e.endsWith(".md")||(e+=".md");let i=this.app.vault.getAbstractFileByPath(t.normalizePath(e));if(i&&i instanceof t.TFile){let a=this.app.metadataCache.getFileCache(i),o=(yield this.app.vault.adapter.read(i.path)).split(/\r\n|[\n\v\f\r\x85\u2028\u2029]/);if(!(null==a?void 0:a.links))continue;for(let i of a.links){if(!i)continue;let a=this.app.metadataCache.getFirstLinkpathDest(i.link,e);if(a&&a instanceof t.TFile){if(s){let t=i.position.end.line;if(t>=0&&t<o.length){let e=o[t].split(i.original);if(2===e.length){let t,n=e[1].trim(),i=new RegExp(l,"gm");for(;t=i.exec(n);)if(void 0!==t.groups&&void 0!==t.groups.value){let e=il(t.groups.value.trim(),r.textValueMap);if(null!==e.value){u=e.value;break}}}}}for(let t=0;t<u;t++)n.push(a)}}}}}))}postprocessor(n,r,i){return e(this,void 0,void 0,(function*(){const i=document.createElement("div");let a=function(e,n){let r;try{r=t.parseYaml(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!r)return"Error parsing YAML";let i=nu(r),a="";if(!i.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";let o=[];if("object"==typeof r.searchTarget&&null!==r.searchTarget){if(Array.isArray(r.searchTarget))for(let t of r.searchTarget)if("string"==typeof t){if(""===t){a="Empty search target is not allowed.";break}o.push(t)}}else if("string"==typeof r.searchTarget){let t=Gl(r.searchTarget);if(t.length>1)for(let e of t){if(e=e.trim(),""===e){a="Empty search target is not allowed.";break}o.push(e)}else""===r.searchTarget?a="Empty search target is not allowed.":o.push(r.searchTarget)}else a="Invalid search target (searchTarget)";if(""!==a)return a;let l=o.length;if(!i.includes("searchType"))return"Parameter 'searchType' not found in YAML";let u=[],s=Jl("searchType",r.searchType,l,"",Xl,!1);if("string"==typeof s)return s;for(let t of s)switch(t.toLowerCase()){case"tag":u.push(Za.Tag);break;case"frontmatter":u.push(Za.Frontmatter);break;case"wiki":u.push(Za.Wiki);break;case"wiki.link":u.push(Za.WikiLink);break;case"wiki.display":u.push(Za.WikiDisplay);break;case"text":u.push(Za.Text);break;case"dvfield":u.push(Za.dvField);break;case"table":u.push(Za.Table);break;case"filemeta":u.push(Za.FileMeta);break;case"task":case"task.all":u.push(Za.Task);break;case"task.done":u.push(Za.TaskDone);break;case"task.notdone":u.push(Za.TaskNotDone)}if(u.includes(Za.Table)&&u.filter((t=>t!==Za.Table)).length>0)return"searchType 'table' doestn't work with other types for now";let f=[],c=Jl("separator",r.separator,l,"",null,!0);if("string"==typeof c)return c;f=c.map((t=>"comma"===t||"\\,"===t?",":t));let h=Zl("xDataset",r.xDataset,l,-1,!0);if("string"==typeof h)return h;let d=h.map((t=>t<0||t>=l?-1:t)),g=[];for(let t=0;t<o.length;t++){let e=new _o(g.length,u[t],o[t]);e.setSeparator(f[t]),d.includes(t)&&(e.usedAsXDataset=!0),g.push(e)}let p=new Bo(g),y=nu(p),m=["searchType","searchTarget","separator"],v=[],w=[],x=[],A=[],b=[],D=[],k=[];for(let t of i)/^line[0-9]*$/.test(t)&&(v.push(t),m.push(t)),/^bar[0-9]*$/.test(t)&&(w.push(t),m.push(t)),/^pie[0-9]*$/.test(t)&&(x.push(t),m.push(t)),/^summary[0-9]*$/.test(t)&&(A.push(t),m.push(t)),/^bullet[0-9]*$/.test(t)&&(k.push(t),m.push(t)),/^month[0-9]*$/.test(t)&&(b.push(t),m.push(t)),/^heatmap[0-9]*$/.test(t)&&(D.push(t),m.push(t));let M=[];for(let t of i)if(/^dataset[0-9]*$/.test(t)){let e=-1,n=t.replace("dataset","");if(e=""===n?0:parseFloat(n),g.some((t=>t.getId()===e)))return a="Duplicated dataset id for key '"+t+"'",a;M.push(t),m.push(t)}for(let t of i)if(!y.includes(t)&&!m.includes(t))return a="'"+t+"' is not an available key",a;if(0===v.length+w.length+x.length+A.length+k.length+b.length+D.length)return"No output parameter provided, please place line, bar, pie, month, bullet, or summary.";"string"==typeof r.folder?""===r.folder?p.folder=n.settings.folder:p.folder=r.folder:p.folder=n.settings.folder;let T=n.app.vault.getAbstractFileByPath(t.normalizePath(p.folder));if(!(T&&T instanceof t.TFolder))return"Folder '"+p.folder+"' doesn't exist";if("string"==typeof r.file){let t=tu("file",r.file);if("string"==typeof t)return t;p.file=t}if("boolean"==typeof r.specifiedFilesOnly&&(p.specifiedFilesOnly=r.specifiedFilesOnly),"string"==typeof r.fileContainsLinkedFiles){let t=tu("fileContainsLinkedFiles",r.fileContainsLinkedFiles);if("string"==typeof t)return t;p.fileContainsLinkedFiles=t}"string"==typeof r.fileMultiplierAfterLink&&(p.fileMultiplierAfterLink=r.fileMultiplierAfterLink),"number"==typeof r.fileMultiplierAfterLink&&(p.fileMultiplierAfterLink=r.fileMultiplierAfterLink.toString());const C=r.dateFormat;if("string"==typeof r.dateFormat?""===r.dateFormat?p.dateFormat=n.settings.dateFormat:p.dateFormat=C:p.dateFormat=n.settings.dateFormat,"string"==typeof r.dateFormatPrefix&&(p.dateFormatPrefix=r.dateFormatPrefix),"string"==typeof r.dateFormatSuffix&&(p.dateFormatSuffix=r.dateFormatSuffix),"string"==typeof r.startDate){if(/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)m$/.test(r.startDate))return"'m' for 'minute' is too small for parameter startDate, please use 'd' for 'day' or 'M' for month";let t=jo(r.startDate,p.dateFormatPrefix,p.dateFormatSuffix),e=null,n=!1;if(e=Jo(t,p.dateFormat),e?n=!0:(e=Go(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid startDate, the format of startDate may not match your dateFormat "+p.dateFormat;p.startDate=e}if("string"==typeof r.endDate){if(/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)m$/.test(r.endDate))return"'m' for 'minute' is too small for parameter endDate, please use 'd' for 'day' or 'M' for month";let t=jo(r.endDate,p.dateFormatPrefix,p.dateFormatSuffix),e=null,n=!1;if(e=Jo(t,p.dateFormat),e?n=!0:(e=Go(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid endDate, the format of endDate may not match your dateFormat "+p.dateFormat;p.endDate=e}if(null!==p.startDate&&p.startDate.isValid()&&null!==p.endDate&&p.endDate.isValid()&&p.endDate<p.startDate)return"Invalid date range (startDate larger than endDate)";p.xDataset=d;let F=Jl("datasetName",r.datasetName,l,"untitled",null,!0);if("string"==typeof F)return F;let _=0;for(let t=0;t<F.length;t++)p.xDataset.includes(t)||"untitled"===F[t]&&(F[t]="untitled"+_.toString(),_++);if(new Set(F).size!==F.length)return"Not enough dataset names or duplicated names";p.datasetName=F;let S=Zl("constValue",r.constValue,l,1,!0);if("string"==typeof S)return S;p.constValue=S;let E=Ql("ignoreAttachedValue",r.ignoreAttachedValue,l,!1,!0);if("string"==typeof E)return E;p.ignoreAttachedValue=E;let B=Ql("ignoreZeroValue",r.ignoreZeroValue,l,!1,!0);if("string"==typeof B)return B;p.ignoreZeroValue=B;let N=Ql("accum",r.accum,l,!1,!0);if("string"==typeof N)return N;p.accum=N;let L=Zl("penalty",r.penalty,l,null,!0);if("string"==typeof L)return L;p.penalty=L;let V=Zl("valueShift",r.valueShift,l,0,!0);if("string"==typeof V)return V;if(p.valueShift=V,void 0!==r.textValueMap){let t=nu(r.textValueMap);for(let e of t){let t=e.trim();p.textValueMap[t]=r.textValueMap[t]}}"number"==typeof r.fixedScale&&(p.fixedScale=r.fixedScale),"boolean"==typeof r.fitPanelWidth&&(p.fitPanelWidth=r.fitPanelWidth);let I=Zl("margin",r.margin,4,10,!0);if("string"==typeof I)return I;if(I.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";p.margin=new Wo(I[0],I[1],I[2],I[3]);for(let t of M){let e=new No,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;let l=-1,u=t.replace("dataset","");l=""===u?0:parseFloat(u),e.id=l,"string"==typeof(null==n?void 0:n.name)&&(e.name=n.name);let s=tu("xData",null==n?void 0:n.xData);if("string"==typeof s)return s;e.xData=s;let f=e.xData.length,c=tu("yData",null==n?void 0:n.yData);if("string"==typeof c)return c;if(e.yData=c,e.yData.length!==f)return"Number of elements in xData and yData not matched";p.customDataset.push(e)}for(let t of v){let e=new Vo,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;let u=eu(n,e);if("string"==typeof u)return u;let s=Jl("lineColor",null==n?void 0:n.lineColor,l,"",jl,!0);if("string"==typeof s)return s;e.lineColor=s;let f=Zl("lineWidth",null==n?void 0:n.lineWidth,l,1.5,!0);if("string"==typeof f)return f;e.lineWidth=f;let c=Ql("showLine",null==n?void 0:n.showLine,l,!0,!0);if("string"==typeof c)return c;e.showLine=c;let h=Ql("showPoint",null==n?void 0:n.showPoint,l,!0,!0);if("string"==typeof h)return h;e.showPoint=h;let d=Jl("pointColor",null==n?void 0:n.pointColor,l,"#69b3a2",jl,!0);if("string"==typeof d)return d;e.pointColor=d;let g=Jl("pointBorderColor",null==n?void 0:n.pointBorderColor,l,"#69b3a2",jl,!0);if("string"==typeof g)return g;e.pointBorderColor=g;let y=Zl("pointBorderWidth",null==n?void 0:n.pointBorderWidth,l,0,!0);if("string"==typeof y)return y;e.pointBorderWidth=y;let m=Zl("pointSize",null==n?void 0:n.pointSize,l,3,!0);if("string"==typeof m)return m;e.pointSize=m;let v=Ql("fillGap",null==n?void 0:n.fillGap,l,!1,!0);if("string"==typeof v)return v;e.fillGap=v;let w=Jl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",ql,!0);if("string"==typeof w)return w;e.yAxisLocation=w,p.line.push(e)}for(let t of w){let e=new Io,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;let u=eu(n,e);if("string"==typeof u)return u;let s=Jl("barColor",null==n?void 0:n.barColor,l,"",jl,!0);if("string"==typeof s)return s;e.barColor=s;let f=Jl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",ql,!0);if("string"==typeof f)return f;e.yAxisLocation=f,p.bar.push(e)}for(let t of x){let e=new Yo,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title);let l=tu("data",null==n?void 0:n.data);if("string"==typeof l)return l;e.data=l;let u=e.data.length,s=Jl("dataColor",null==n?void 0:n.dataColor,u,null,jl,!0);if("string"==typeof s)return s;e.dataColor=s;let f=Jl("dataName",null==n?void 0:n.dataName,u,"",null,!0);if("string"==typeof f)return f;e.dataName=f;let c=Jl("label",null==n?void 0:n.label,u,"",null,!0);if("string"==typeof c)return c;e.label=c,"number"==typeof(null==n?void 0:n.hideLabelLessThan)&&(e.hideLabelLessThan=n.hideLabelLessThan);let h=Jl("extLabel",null==n?void 0:n.extLabel,u,"",null,!0);if("string"==typeof h)return h;e.extLabel=h,"boolean"==typeof(null==n?void 0:n.showExtLabelOnlyIfNoLabel)&&(e.showExtLabelOnlyIfNoLabel=n.showExtLabelOnlyIfNoLabel),"number"==typeof(null==n?void 0:n.ratioInnerRadius)&&(e.ratioInnerRadius=n.ratioInnerRadius),"boolean"==typeof(null==n?void 0:n.showLegend)&&(e.showLegend=n.showLegend),"string"==typeof(null==n?void 0:n.legendPosition)?e.legendPosition=n.legendPosition:e.legendPosition="right","string"==typeof(null==n?void 0:n.legendOrientation)?e.legendOrientation=n.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof(null==n?void 0:n.legendBgColor)&&(e.legendBgColor=n.legendBgColor),"string"==typeof(null==n?void 0:n.legendBorderColor)&&(e.legendBorderColor=n.legendBorderColor),p.pie.push(e)}for(let t of A){let e=new zo,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;"string"==typeof(null==n?void 0:n.template)&&(e.template=n.template),"string"==typeof(null==n?void 0:n.style)&&(e.style=n.style),p.summary.push(e)}for(let t of b){let e=new Po,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;"string"==typeof(null==n?void 0:n.mode)&&(e.mode=n.mode);let l=Kl("dataset",null==n?void 0:n.dataset);if("string"==typeof l)return l;if(0===l.length)for(let t of g)l.push(t.getId());e.dataset=l;let u=e.dataset.length;"string"==typeof(null==n?void 0:n.startWeekOn)&&(e.startWeekOn=n.startWeekOn),"boolean"==typeof(null==n?void 0:n.showCircle)&&(e.showCircle=n.showCircle);let s=Kl("threshold",null==n?void 0:n.threshold);if("string"==typeof s)return s;if(e.threshold=s,0===e.threshold.length)for(let t=0;t<u;t++)e.threshold.push(0);if(e.threshold.length!==e.dataset.length)return"The number of inputs of threshold and dataset not matched";let f=Kl("yMin",null==n?void 0:n.yMin);if("string"==typeof f)return f;if(e.yMin=f,0===e.yMin.length)for(let t=0;t<u;t++)e.yMin.push(null);if(e.yMin.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";let c=Kl("yMax",null==n?void 0:n.yMax);if("string"==typeof c)return c;if(e.yMax=c,0===e.yMax.length)for(let t=0;t<u;t++)e.yMax.push(null);if(e.yMax.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";"string"==typeof(null==n?void 0:n.color)&&(e.color=n.color),"boolean"==typeof(null==n?void 0:n.dimNotInMonth)&&(e.dimNotInMonth=n.dimNotInMonth),"boolean"==typeof(null==n?void 0:n.showStreak)&&(e.showStreak=n.showStreak),"boolean"==typeof(null==n?void 0:n.showTodayRing)&&(e.showTodayRing=n.showTodayRing),"boolean"==typeof(null==n?void 0:n.showSelectedValue)&&(e.showSelectedValue=n.showSelectedValue),"boolean"==typeof(null==n?void 0:n.showSelectedRing)&&(e.showSelectedRing=n.showSelectedRing),"string"==typeof(null==n?void 0:n.circleColor)&&(e.circleColor=n.circleColor),"boolean"==typeof(null==n?void 0:n.circleColorByValue)&&(e.circleColorByValue=n.circleColorByValue),"string"==typeof(null==n?void 0:n.headerYearColor)&&(e.headerYearColor=n.headerYearColor),"string"==typeof(null==n?void 0:n.headerMonthColor)&&(e.headerMonthColor=n.headerMonthColor),"string"==typeof(null==n?void 0:n.dividingLineColor)&&(e.dividingLineColor=n.dividingLineColor),"string"==typeof(null==n?void 0:n.todayRingColor)&&(e.todayRingColor=n.todayRingColor),"string"==typeof(null==n?void 0:n.selectedRingColor)&&(e.selectedRingColor=n.selectedRingColor),"string"==typeof(null==n?void 0:n.initMonth)&&(e.initMonth=n.initMonth),"boolean"==typeof(null==n?void 0:n.showAnnotation)&&(e.showAnnotation=n.showAnnotation);let h=tu("annotation",null==n?void 0:n.annotation);if("string"==typeof h)return h;if(e.annotation=h,0===e.annotation.length)for(let t=0;t<u;t++)e.annotation.push(null);if(e.annotation.length!==e.dataset.length)return"The number of inputs of annotation and dataset not matched";"boolean"==typeof(null==n?void 0:n.showAnnotationOfAllTargets)&&(e.showAnnotationOfAllTargets=n.showAnnotationOfAllTargets),p.month.push(e)}for(let t of D){let e=new Oo,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;p.heatmap.push(e)}for(let t of k){let e=new Uo,n=r[t],i=nu(e),o=nu(n);for(let t of o)if(!i.includes(t))return a="'"+t+"' is not an available key",a;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title),"string"==typeof(null==n?void 0:n.dataset)&&(e.dataset=n.dataset),"string"==typeof(null==n?void 0:n.orientation)&&(e.orientation=n.orientation);let l=Kl("range",null==n?void 0:n.range);if("string"==typeof l)return l;let u=l;if(1===u.length){if(u[0]<0)return a="Negative range value is not allowed",a}else{if(!(u.length>1))return a="Empty range is not allowed",a;{let t=u[0];if(t<0)return a="Negative range value is not allowed",a;for(let e=1;e<u.length;e++)if(u[e]<=t)return a="Values in parameter 'range' should be monotonically increasing",a}}e.range=u;let s=u.length,f=Jl("rangeColor",null==n?void 0:n.rangeColor,s,"",jl,!0);if("string"==typeof f)return f;e.rangeColor=f,"string"==typeof(null==n?void 0:n.value)?e.value=n.value:"number"==typeof(null==n?void 0:n.value)&&(e.value=n.value.toString()),"string"==typeof(null==n?void 0:n.valueUnit)&&(e.valueUnit=n.valueUnit),"string"==typeof(null==n?void 0:n.valueColor)&&(e.valueColor=n.valueColor),"boolean"==typeof(null==n?void 0:n.showMarker)&&(e.showMarker=n.showMarker),"number"==typeof(null==n?void 0:n.markerValue)&&(e.markerValue=n.markerValue),"string"==typeof(null==n?void 0:n.markerColor)&&(e.markerColor=n.markerColor),p.bullet.push(e)}return p}(n.trim(),this);if("string"==typeof a)return this.renderErrorMessage(a,i,r);let o=a,l=[];try{yield this.getFiles(l,o)}catch(t){return this.renderErrorMessage(t.message,i,r)}if(0===l.length)return this.renderErrorMessage("No markdown files found in folder",i,r);let u=new Map,s=new Xo;s.fileTotal=l.length;const f=l.map((t=>e(this,void 0,void 0,(function*(){let n=null;o.queries.some((t=>{let e=t.getType();return t.getTarget(),e===Za.Frontmatter||e===Za.Tag||e===Za.Wiki||e===Za.WikiLink||e===Za.WikiDisplay}))&&(n=this.app.metadataCache.getFileCache(t));let r=null;o.queries.some((t=>{let e=t.getType(),n=t.getTarget();return e===Za.Tag||e===Za.Text||e===Za.dvField||e===Za.Task||e===Za.TaskDone||e===Za.TaskNotDone||e===Za.FileMeta&&("numWords"===n||"numChars"===n||"numSentences"===n)}))&&(r=yield this.app.vault.adapter.read(t.path));let i=new Map,a=!1;for(let e of o.xDataset)if(!i.has(e)){let l=window.moment("");if(-1===e)l=ru(t,o);else{let i=o.queries[e];switch(i.getType()){case Za.Frontmatter:l=iu(n,i,o);break;case Za.Tag:l=ou(r,i,o);break;case Za.Text:l=lu(r,i,o);break;case Za.dvField:l=uu(r,i,o);break;case Za.FileMeta:l=su(t,i,o);break;case Za.Task:case Za.TaskDone:case Za.TaskNotDone:l=fu(r,i,o)}}l.isValid()?(null!==o.startDate&&l<o.startDate&&(a=!0,s.fileOutOfDateRange++),null!==o.endDate&&l>o.endDate&&(a=!0,s.fileOutOfDateRange++)):(a=!0,s.fileNotInFormat++),a||(s.gotAnyValidXValue||(s.gotAnyValidXValue=!0),i.set(e,Ko(l,o.dateFormat)),s.fileAvailable++,1==s.fileAvailable?(s.minDate=l.clone(),s.maxDate=l.clone()):(l<s.minDate&&(s.minDate=l.clone()),l>s.maxDate&&(s.maxDate=l.clone())))}if(a)return;const l=o.queries.filter((t=>t.getType()!==Za.Table&&!t.usedAsXDataset)).map((a=>e(this,void 0,void 0,(function*(){if(n&&a.getType()===Za.Tag){let t=function(t,e,n,r,i){let a=t.frontmatter,o=[];if(a&&a.tags){let t=0,l=!1;if(Array.isArray(a.tags))o=o.concat(a.tags);else if("string"==typeof a.tags){let t=a.tags.split(e.getSeparator(!0));for(let e of t){let t=e.trim();""!==t&&o.push(t)}}for(let a of o){if(a===e.getTarget())t+=n.constValue[e.getId()],l=!0,e.addNumTargets();else{if(!a.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],l=!0,e.addNumTargets()}let o=null;return l&&(o=t),cu(r,i.get(n.xDataset[e.getId()]),e,o),!0}}return!1}(n,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}if(n&&a.getType()===Za.Frontmatter&&"tags"!==a.getTarget()){let t=function(t,e,n,r,i){let a=t.frontmatter;if(a){let t=nl(a,e.getTarget());if(t){let a=il(t,n.textValueMap);if(null!==a.value)return a.type===Ka.Time&&(e.valueType=Ka.Time),e.addNumTargets(),cu(r,i.get(n.xDataset[e.getId()]),e,a.value),!0}else if(e.getParentTarget()&&nl(a,e.getParentTarget())){let t=nl(a,e.getParentTarget()),o=null;if(Array.isArray(t)?o=t.map((t=>t.toString())):"string"==typeof t&&(o=t.split(e.getSeparator())),o&&o.length>e.getAccessor()&&e.getAccessor()>=0){let t=il(o[e.getAccessor()].trim(),n.textValueMap);if(null!==t.value)return t.type===Ka.Time&&(e.valueType=Ka.Time),e.addNumTargets(),cu(r,i.get(n.xDataset[e.getId()]),e,t.value),!0}}}return!1}(n,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}if(n&&(a.getType()===Za.Wiki||a.getType()===Za.WikiLink||a.getType()===Za.WikiDisplay)){let t=function(t,e,n,r,i){let a=t.links;if(!a)return!1;let o=e.getTarget(),l=e.getType(),u="",s=o;for(let t of a){if(!t)continue;let e="";l===Za.Wiki?e=t.displayText?t.displayText:t.link:l===Za.WikiLink?e=t.link:l===Za.WikiDisplay?t.displayText&&(e=t.displayText):e=t.displayText?t.displayText:t.link,e=e.trim(),u+=e+"\n"}return hu(u,s,e,r,i,n)}(n,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}if(r&&a.getType()===Za.Tag){let t=function(t,e,n,r,i){let a=e.getTarget();return e.getParentTarget()&&(a=e.getParentTarget()),a.length>1&&a.startsWith("#")&&(a=a.substring(1)),hu(t,"(^|\\s)#"+a+"(\\/[\\w-]+)*(:(?<value>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)",e,r,i,n)}(r,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}if(r&&a.getType()===Za.Text){let t=function(t,e,n,r,i){return hu(t,e.getTarget(),e,r,i,n)}(r,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}if(a.getType()===Za.FileMeta){let e=du(t,r,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=e)}if(r&&a.getType()===Za.dvField){let t=function(t,e,n,r,i){let a=e.getTarget();return e.getParentTarget()&&(a=e.getParentTarget()),a=a.replace("-","[\\s\\-]"),hu(t,"(^| |\\t)\\*{0,2}"+a+"\\*{0,2}(::[ |\\t]*(?<value>[\\d\\.\\/\\-\\w,@; \\t:]*))(\\r\\?\\n|\\r|$)",e,r,i,n)}(r,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}if(r&&(a.getType()===Za.Task||a.getType()===Za.TaskDone||a.getType()===Za.TaskNotDone)){let t=function(t,e,n,r,i){let a=e.getType(),o=e.getTarget();return o=a===Za.Task?"\\[[\\sx]\\]\\s"+o:a===Za.TaskDone?"\\[x\\]\\s"+o:a===Za.TaskNotDone?"\\[\\s\\]\\s"+o:"\\[[\\sx]\\]\\s"+o,hu(t,o,e,r,i,n)}(r,a,o,u,i);s.gotAnyValidYValue||(s.gotAnyValidYValue=t)}}))));yield Promise.all(l)}))));if(yield Promise.all(f),yield this.collectDataFromTable(u,o,s),s.errorMessage)return this.renderErrorMessage(s.errorMessage,i,r);let c="";if(s.minDate.isValid()&&s.maxDate.isValid()&&0!==s.fileAvailable&&s.gotAnyValidXValue||(c="No valid date as X value found in notes",s.fileOutOfDateRange>0&&(c+=`\n${s.fileOutOfDateRange} files are out of the date range.`),s.fileNotInFormat&&(c+=`\n${s.fileNotInFormat} files are not in the right format.`)),null===o.startDate&&null===o.endDate?(o.startDate=s.minDate.clone(),o.endDate=s.maxDate.clone()):null!==o.startDate&&null===o.endDate?o.startDate<s.maxDate?o.endDate=s.maxDate.clone():c="Invalid date range":null!==o.endDate&&null===o.startDate?o.endDate>s.minDate?o.startDate=s.minDate.clone():c="Invalid date range":(o.startDate<s.minDate&&o.endDate<s.minDate||o.startDate>s.maxDate&&o.endDate>s.maxDate)&&(c="Invalid date range"),c)return this.renderErrorMessage(c,i,r);if(!s.gotAnyValidYValue)return this.renderErrorMessage("No valid Y value found in notes",i,r);let h=new Eo(o.startDate,o.endDate);for(let t of o.queries){let e=h.createDataset(t,o);e.addNumTargets(t.getNumTargets());for(let n=o.startDate.clone();n<=o.endDate;n.add(1,"days"))if(u.has(Ko(n,o.dateFormat))){let r=u.get(Ko(n,o.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){let t=null;for(let e=0;e<r.length;e++){let n=r[e].value;Number.isNumber(n)&&!Number.isNaN(n)&&(null===t?t=n:t+=n)}null!==t&&e.setValue(n,t)}}}o.datasets=h;let d=function(t,e){for(let t of e.datasets)t.getQuery().usedAsXDataset||(null!==e.valueShift[t.getId()]&&t.shift(e.valueShift[t.getId()]),null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues());for(let n of e.line){let r=Wl(t,e,n);if("string"==typeof r)return r}for(let n of e.bar){let r=$l(t,e,n);if("string"==typeof r)return r}for(let n of e.pie){let r=Al(t,e,n);if("string"==typeof r)return r}for(let n of e.summary){let r=bl(t,e,n);if("string"==typeof r)return r}for(let n of e.bullet){let r=Bl(t,e,n);if("string"==typeof r)return r}for(let n of e.month){let r=Sl(t,e,n);if("string"==typeof r)return r}for(let t of e.heatmap){let t=El(0,e);if("string"==typeof t)return t}}(i,o);if("string"==typeof d)return this.renderErrorMessage(d,i,r);r.appendChild(i)}))}collectDataFromTable(n,r,i){return e(this,void 0,void 0,(function*(){let e=r.queries.filter((t=>t.getType()===Za.Table)),a=[],o=!1;for(let n of e){let e=n.getParentTarget(),r=this.app.vault.getAbstractFileByPath(t.normalizePath(e+".md"));if(!(r&&r instanceof t.TFile)){o=!0;break}let i=n.getAccessor(),l=n.usedAsXDataset,u=a.find((t=>t.filePath===e&&t.tableIndex===i));if(u)l?u.xDataset=n:u.yDatasets.push(n);else{let t=new Ho(e,i);l?t.xDataset=n:t.yDatasets.push(n),a.push(t)}}if(o)i.errorMessage="File containing tables not found";else for(let e of a){let a=e.xDataset;if(!a)continue;let o=e.yDatasets,l=a.getParentTarget(),u=a.getAccessor(),s="";l+=".md";let f=this.app.vault.getAbstractFileByPath(t.normalizePath(l));if(!(f&&f instanceof t.TFile))continue;{i.fileAvailable++;let t,e=yield this.app.vault.adapter.read(f.path),n=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm"),r=0;for(;t=n.exec(e);){if(r===u){s=t[0];break}r++}}let c=s.split(/\r?\n/);c=c.filter((t=>""!==t));let h=0,d=0;if(c.length>=2){let t=c.shift().trim();t=rl(t,"|"),h=t.split("|").length;let e=c.shift().trim();e=rl(e,"|");let n=e.split("|");for(let t of n)if(!t.includes("-"))break;d=c.length}if(0==d)continue;let g=a.getAccessor(1);if(g>=h)continue;let p=[];for(let t of c){let e=rl(t.trim(),"|").split("|");if(g<e.length){let t=Go(e[g].trim(),r.dateFormat);t.isValid()?(p.push(t),i.minDate.isValid()||i.maxDate.isValid()?(t<i.minDate&&(i.minDate=t.clone()),t>i.maxDate&&(i.maxDate=t.clone())):(i.minDate=t.clone(),i.maxDate=t.clone())):p.push(null)}else p.push(null)}if(p.every((t=>null===t)))return void(i.errorMessage="No valid date as X value found in table");i.gotAnyValidXValue||(i.gotAnyValidXValue=!0);for(let t of o){let e=t.getAccessor(1);if(e>=h)continue;let a=0;for(let o of c){let l=rl(o.trim(),"|").split("|");if(e<l.length){let o=l[e].trim().split(t.getSeparator());if(!o)continue;if(1===o.length){let e=il(o[0],r.textValueMap);if(null!==e.value){let o=e.value;a<p.length&&p[a]&&(i.gotAnyValidYValue||(i.gotAnyValidYValue=!0),cu(n,Ko(p[a],r.dateFormat),t,o))}}else if(o.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let e=null,l=il(o[t.getAccessor(2)].trim(),r.textValueMap);null!==l.value&&(e=l.value,a<p.length&&p[a]&&(i.gotAnyValidYValue||(i.gotAnyValidYValue=!0),cu(n,Ko(p[a],r.dateFormat),t,e)))}}a++}}}}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Ja.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Ja.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Ja.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,i=e.getLine(r);return n.ch=i.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=yu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
***************************************************************************** */function e(t,e,n,r){return new(n||(n=Promise))((function(a,i){function o(t){try{u(r.next(t))}catch(t){i(t)}}function l(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?a(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,l)}u((r=r.apply(t,e||[])).next())}))}function n(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function r(t){let e=t,r=t;function a(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){const i=n+a>>>1;r(t[i],e)<0?n=i+1:a=i}return n}return 1===t.length&&(e=(e,n)=>t(e)-n,r=function(t){return(e,r)=>n(t(e),r)}(t)),{left:a,center:function(t,n,r,i){null==r&&(r=0),null==i&&(i=t.length);const o=a(t,n,r,i-1);return o>r&&e(t[o-1],n)>-e(t[o],n)?o-1:o},right:function(t,e,n,a){for(null==n&&(n=0),null==a&&(a=t.length);n<a;){const i=n+a>>>1;r(t[i],e)>0?a=i:n=i+1}return n}}}const a=r(n).right;function i(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}r((function(t){return null===t?NaN:+t})).center;var o=Math.sqrt(50),l=Math.sqrt(10),u=Math.sqrt(2);function s(t,e,n){var r=(e-t)/Math.max(0,n),a=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,a);return a>=0?(i>=o?10:i>=l?5:i>=u?2:1)*Math.pow(10,a):-Math.pow(10,-a)/(i>=o?10:i>=l?5:i>=u?2:1)}function f(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),a=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/a;return i>=o?a*=10:i>=l?a*=5:i>=u&&(a*=2),e<t?-a:a}function c(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n<a||void 0===n&&a>=a)&&(n=a)}return n}function h(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n>e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let a of t)null!=(a=e(a,++r,t))&&(n>a||void 0===n&&a>=a)&&(n=a)}return n}function d(t,e,r=0,a=t.length-1,i=n){for(;a>r;){if(a-r>600){const n=a-r+1,o=e-r+1,l=Math.log(n),u=.5*Math.exp(2*l/3),s=.5*Math.sqrt(l*u*(n-u)/n)*(o-n/2<0?-1:1);d(t,e,Math.max(r,Math.floor(e-o*u/n+s)),Math.min(a,Math.floor(e+(n-o)*u/n+s)),i)}const n=t[e];let o=r,l=a;for(g(t,r,e),i(t[a],n)>0&&g(t,r,a);o<l;){for(g(t,o,l),++o,--l;i(t[o],n)<0;)++o;for(;i(t[l],n)>0;)--l}0===i(t[r],n)?g(t,r,l):(++l,g(t,l,a)),l<=e&&(r=l+1),e<=l&&(a=l-1)}return t}function g(t,e,n){const r=t[e];t[e]=t[n],t[n]=r}function p(t,e,n){if(r=(t=Float64Array.from(function*(t,e){if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(yield e);else{let n=-1;for(let r of t)null!=(r=e(r,++n,t))&&(r=+r)>=r&&(yield r)}}(t,n))).length){if((e=+e)<=0||r<2)return h(t);if(e>=1)return c(t);var r,a=(r-1)*e,i=Math.floor(a),o=c(d(t,i).subarray(0,i+1));return o+(h(t.subarray(i+1))-o)*(a-i)}}function y(t,e,n){t=+t,e=+e,n=(a=arguments.length)<2?(e=t,t=0,1):a<3?1:+n;for(var r=-1,a=0|Math.max(0,Math.ceil((e-t)/n)),i=new Array(a);++r<a;)i[r]=t+r*n;return i}function m(t,e){let n=0;if(void 0===e)for(let e of t)(e=+e)&&(n+=e);else{let r=-1;for(let a of t)(a=+e(a,++r,t))&&(n+=a)}return n}var v=Array.prototype.slice;function w(t){return t}function x(t){return"translate("+t+",0)"}function A(t){return"translate(0,"+t+")"}function b(t){return e=>+t(e)}function D(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function M(){return!this.__axis}function C(t,e){var n=[],r=null,a=null,i=6,o=6,l=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,s=1===t||4===t?-1:1,f=4===t||2===t?"x":"y",c=1===t||3===t?x:A;function h(h){var d=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,g=null==a?e.tickFormat?e.tickFormat.apply(e,n):w:a,p=Math.max(i,0)+l,y=e.range(),m=+y[0]+u,v=+y[y.length-1]+u,x=(e.bandwidth?D:b)(e.copy(),u),A=h.selection?h.selection():h,C=A.selectAll(".domain").data([null]),T=A.selectAll(".tick").data(d,e).order(),k=T.exit(),F=T.enter().append("g").attr("class","tick"),_=T.select("line"),S=T.select("text");C=C.merge(C.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),T=T.merge(F),_=_.merge(F.append("line").attr("stroke","currentColor").attr(f+"2",s*i)),S=S.merge(F.append("text").attr("fill","currentColor").attr(f,s*p).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),h!==A&&(C=C.transition(h),T=T.transition(h),_=_.transition(h),S=S.transition(h),k=k.transition(h).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=x(t))?c(t+u):this.getAttribute("transform")})),F.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return c((e&&isFinite(e=e(t))?e:x(t))+u)}))),k.remove(),C.attr("d",4===t||2===t?o?"M"+s*o+","+m+"H"+u+"V"+v+"H"+s*o:"M"+u+","+m+"V"+v:o?"M"+m+","+s*o+"V"+u+"H"+v+"V"+s*o:"M"+m+","+u+"H"+v),T.attr("opacity",1).attr("transform",(function(t){return c(x(t)+u)})),_.attr(f+"2",s*i),S.attr(f,s*p).text(g),A.filter(M).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),A.each((function(){this.__axis=x}))}return h.scale=function(t){return arguments.length?(e=t,h):e},h.ticks=function(){return n=v.call(arguments),h},h.tickArguments=function(t){return arguments.length?(n=null==t?[]:v.call(t),h):n.slice()},h.tickValues=function(t){return arguments.length?(r=null==t?null:v.call(t),h):r&&r.slice()},h.tickFormat=function(t){return arguments.length?(a=t,h):a},h.tickSize=function(t){return arguments.length?(i=o=+t,h):i},h.tickSizeInner=function(t){return arguments.length?(i=+t,h):i},h.tickSizeOuter=function(t){return arguments.length?(o=+t,h):o},h.tickPadding=function(t){return arguments.length?(l=+t,h):l},h.offset=function(t){return arguments.length?(u=+t,h):u},h}function T(t){return C(3,t)}function k(t){return C(4,t)}var F={value:()=>{}};function _(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new S(r)}function S(t){this._=t}function E(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function B(t,e){for(var n,r=0,a=t.length;r<a;++r)if((n=t[r]).name===e)return n.value}function N(t,e,n){for(var r=0,a=t.length;r<a;++r)if(t[r].name===e){t[r]=F,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}S.prototype=_.prototype={constructor:S,on:function(t,e){var n,r=this._,a=E(t+"",r),i=-1,o=a.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++i<o;)if(n=(t=a[i]).type)r[n]=N(r[n],t.name,e);else if(null==e)for(n in r)r[n]=N(r[n],t.name,null);return this}for(;++i<o;)if((n=(t=a[i]).type)&&(n=B(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new S(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,a=new Array(n),i=0;i<n;++i)a[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,n=(r=this._[t]).length;i<n;++i)r[i].value.apply(e,a)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],a=0,i=r.length;a<i;++a)r[a].value.apply(e,n)}};var I="http://www.w3.org/1999/xhtml",L={svg:"http://www.w3.org/2000/svg",xhtml:I,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function V(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),L.hasOwnProperty(e)?{space:L[e],local:t}:t}function P(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===I&&e.documentElement.namespaceURI===I?e.createElement(t):e.createElementNS(n,t)}}function z(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Y(t){var e=V(t);return(e.local?z:P)(e)}function U(){}function O(t){return null==t?U:function(){return this.querySelector(t)}}function R(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function H(){return[]}function W(t){return null==t?H:function(){return this.querySelectorAll(t)}}function $(t){return function(){return this.matches(t)}}function q(t){return function(e){return e.matches(t)}}var X=Array.prototype.find;function j(){return this.firstElementChild}var G=Array.prototype.filter;function Z(){return this.children}function Q(t){return new Array(t.length)}function J(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function K(t){return function(){return t}}function tt(t,e,n,r,a,i){for(var o,l=0,u=e.length,s=i.length;l<s;++l)(o=e[l])?(o.__data__=i[l],r[l]=o):n[l]=new J(t,i[l]);for(;l<u;++l)(o=e[l])&&(a[l]=o)}function et(t,e,n,r,a,i,o){var l,u,s,f=new Map,c=e.length,h=i.length,d=new Array(c);for(l=0;l<c;++l)(u=e[l])&&(d[l]=s=o.call(u,u.__data__,l,e)+"",f.has(s)?a[l]=u:f.set(s,u));for(l=0;l<h;++l)s=o.call(t,i[l],l,i)+"",(u=f.get(s))?(r[l]=u,u.__data__=i[l],f.delete(s)):n[l]=new J(t,i[l]);for(l=0;l<c;++l)(u=e[l])&&f.get(d[l])===u&&(a[l]=u)}function nt(t){return t.__data__}function rt(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function at(t){return function(){this.removeAttribute(t)}}function it(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ot(t,e){return function(){this.setAttribute(t,e)}}function lt(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function ut(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function st(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function ft(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function ct(t){return function(){this.style.removeProperty(t)}}function ht(t,e,n){return function(){this.style.setProperty(t,e,n)}}function dt(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function gt(t,e){return t.style.getPropertyValue(e)||ft(t).getComputedStyle(t,null).getPropertyValue(e)}function pt(t){return function(){delete this[t]}}function yt(t,e){return function(){this[t]=e}}function mt(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function vt(t){return t.trim().split(/^|\s+/)}function wt(t){return t.classList||new xt(t)}function xt(t){this._node=t,this._names=vt(t.getAttribute("class")||"")}function At(t,e){for(var n=wt(t),r=-1,a=e.length;++r<a;)n.add(e[r])}function bt(t,e){for(var n=wt(t),r=-1,a=e.length;++r<a;)n.remove(e[r])}function Dt(t){return function(){At(this,t)}}function Mt(t){return function(){bt(this,t)}}function Ct(t,e){return function(){(e.apply(this,arguments)?At:bt)(this,t)}}function Tt(){this.textContent=""}function kt(t){return function(){this.textContent=t}}function Ft(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function _t(){this.innerHTML=""}function St(t){return function(){this.innerHTML=t}}function Et(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Bt(){this.nextSibling&&this.parentNode.appendChild(this)}function Nt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function It(){return null}function Lt(){var t=this.parentNode;t&&t.removeChild(this)}function Vt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Pt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function zt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Yt(t){return function(){var e=this.__on;if(e){for(var n,r=0,a=-1,i=e.length;r<i;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++a]=n:this.removeEventListener(n.type,n.listener,n.options);++a?e.length=a:delete this.__on}}}function Ut(t,e,n){return function(){var r,a=this.__on,i=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(a)for(var o=0,l=a.length;o<l;++o)if((r=a[o]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=n),void(r.value=e);this.addEventListener(t.type,i,n),r={type:t.type,name:t.name,value:e,listener:i,options:n},a?a.push(r):this.__on=[r]}}function Ot(t,e,n){var r=ft(t),a=r.CustomEvent;"function"==typeof a?a=new a(e,n):(a=r.document.createEvent("Event"),n?(a.initEvent(e,n.bubbles,n.cancelable),a.detail=n.detail):a.initEvent(e,!1,!1)),t.dispatchEvent(a)}function Rt(t,e){return function(){return Ot(this,t,e)}}function Ht(t,e){return function(){return Ot(this,t,e.apply(this,arguments))}}J.prototype={constructor:J,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}},xt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Wt=[null];function $t(t,e){this._groups=t,this._parents=e}function qt(){return new $t([[document.documentElement]],Wt)}function Xt(t){return"string"==typeof t?new $t([[document.querySelector(t)]],[document.documentElement]):new $t([[t]],Wt)}function jt(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Gt(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Zt(){}$t.prototype=qt.prototype={constructor:$t,select:function(t){"function"!=typeof t&&(t=O(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o,l=e[a],u=l.length,s=r[a]=new Array(u),f=0;f<u;++f)(i=l[f])&&(o=t.call(i,i.__data__,f,l))&&("__data__"in i&&(o.__data__=i.__data__),s[f]=o);return new $t(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var e=t.apply(this,arguments);return null==e?[]:R(e)}}(t):W(t);for(var e=this._groups,n=e.length,r=[],a=[],i=0;i<n;++i)for(var o,l=e[i],u=l.length,s=0;s<u;++s)(o=l[s])&&(r.push(t.call(o,o.__data__,s,l)),a.push(o));return new $t(r,a)},selectChild:function(t){return this.select(null==t?j:function(t){return function(){return X.call(this.children,t)}}("function"==typeof t?t:q(t)))},selectChildren:function(t){return this.selectAll(null==t?Z:function(t){return function(){return G.call(this.children,t)}}("function"==typeof t?t:q(t)))},filter:function(t){"function"!=typeof t&&(t=$(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new $t(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,nt);var n=e?et:tt,r=this._parents,a=this._groups;"function"!=typeof t&&(t=K(t));for(var i=a.length,o=new Array(i),l=new Array(i),u=new Array(i),s=0;s<i;++s){var f=r[s],c=a[s],h=c.length,d=R(t.call(f,f&&f.__data__,s,r)),g=d.length,p=l[s]=new Array(g),y=o[s]=new Array(g),m=u[s]=new Array(h);n(f,c,p,y,m,d,e);for(var v,w,x=0,A=0;x<g;++x)if(v=p[x]){for(x>=A&&(A=x+1);!(w=y[A])&&++A<g;);v._next=w||null}}return(o=new $t(o,r))._enter=l,o._exit=u,o},enter:function(){return new $t(this._enter||this._groups.map(Q),this._parents)},exit:function(){return new $t(this._exit||this._groups.map(Q),this._parents)},join:function(t,e,n){var r=this.enter(),a=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(a=e(a)),null==n?i.remove():n(i),r&&a?r.merge(a).order():a},merge:function(t){if(!(t instanceof $t))throw new Error("invalid merge");for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],f=n[l],c=s.length,h=o[l]=new Array(c),d=0;d<c;++d)(u=s[d]||f[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new $t(o,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,a=t[e],i=a.length-1,o=a[i];--i>=0;)(r=a[i])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=rt);for(var n=this._groups,r=n.length,a=new Array(r),i=0;i<r;++i){for(var o,l=n[i],u=l.length,s=a[i]=new Array(u),f=0;f<u;++f)(o=l[f])&&(s[f]=o);s.sort(e)}return new $t(a,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],a=0,i=r.length;a<i;++a){var o=r[a];if(o)return o}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var a,i=e[n],o=0,l=i.length;o<l;++o)(a=i[o])&&t.call(a,a.__data__,o,i);return this},attr:function(t,e){var n=V(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?it:at:"function"==typeof e?n.local?st:ut:n.local?lt:ot)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?ct:"function"==typeof e?dt:ht)(t,e,null==n?"":n)):gt(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?pt:"function"==typeof e?mt:yt)(t,e)):this.node()[t]},classed:function(t,e){var n=vt(t+"");if(arguments.length<2){for(var r=wt(this.node()),a=-1,i=n.length;++a<i;)if(!r.contains(n[a]))return!1;return!0}return this.each(("function"==typeof e?Ct:e?Dt:Mt)(n,e))},text:function(t){return arguments.length?this.each(null==t?Tt:("function"==typeof t?Ft:kt)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?_t:("function"==typeof t?Et:St)(t)):this.node().innerHTML},raise:function(){return this.each(Bt)},lower:function(){return this.each(Nt)},append:function(t){var e="function"==typeof t?t:Y(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Y(t),r=null==e?It:"function"==typeof e?e:O(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Lt)},clone:function(t){return this.select(t?Pt:Vt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,a,i=zt(t+""),o=i.length;if(!(arguments.length<2)){for(l=e?Ut:Yt,r=0;r<o;++r)this.each(l(i[r],e,n));return this}var l=this.node().__on;if(l)for(var u,s=0,f=l.length;s<f;++s)for(r=0,u=l[s];r<o;++r)if((a=i[r]).type===u.type&&a.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?Ht:Rt)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,a=t[e],i=0,o=a.length;i<o;++i)(r=a[i])&&(yield r)}};var Qt=1/.7,Jt="\\s*([+-]?\\d+)\\s*",Kt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",te="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ee=/^#([0-9a-f]{3,8})$/,ne=new RegExp("^rgb\\("+[Jt,Jt,Jt]+"\\)$"),re=new RegExp("^rgb\\("+[te,te,te]+"\\)$"),ae=new RegExp("^rgba\\("+[Jt,Jt,Jt,Kt]+"\\)$"),ie=new RegExp("^rgba\\("+[te,te,te,Kt]+"\\)$"),oe=new RegExp("^hsl\\("+[Kt,te,te]+"\\)$"),le=new RegExp("^hsla\\("+[Kt,te,te,Kt]+"\\)$"),ue={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function se(){return this.rgb().formatHex()}function fe(){return this.rgb().formatRgb()}function ce(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=ee.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?he(e):3===n?new ye(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?de(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?de(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=ne.exec(t))?new ye(e[1],e[2],e[3],1):(e=re.exec(t))?new ye(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=ae.exec(t))?de(e[1],e[2],e[3],e[4]):(e=ie.exec(t))?de(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=oe.exec(t))?xe(e[1],e[2]/100,e[3]/100,1):(e=le.exec(t))?xe(e[1],e[2]/100,e[3]/100,e[4]):ue.hasOwnProperty(t)?he(ue[t]):"transparent"===t?new ye(NaN,NaN,NaN,0):null}function he(t){return new ye(t>>16&255,t>>8&255,255&t,1)}function de(t,e,n,r){return r<=0&&(t=e=n=NaN),new ye(t,e,n,r)}function ge(t){return t instanceof Zt||(t=ce(t)),t?new ye((t=t.rgb()).r,t.g,t.b,t.opacity):new ye}function pe(t,e,n,r){return 1===arguments.length?ge(t):new ye(t,e,n,null==r?1:r)}function ye(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function me(){return"#"+we(this.r)+we(this.g)+we(this.b)}function ve(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function we(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function xe(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new be(t,e,n,r)}function Ae(t){if(t instanceof be)return new be(t.h,t.s,t.l,t.opacity);if(t instanceof Zt||(t=ce(t)),!t)return new be;if(t instanceof be)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,a=Math.min(e,n,r),i=Math.max(e,n,r),o=NaN,l=i-a,u=(i+a)/2;return l?(o=e===i?(n-r)/l+6*(n<r):n===i?(r-e)/l+2:(e-n)/l+4,l/=u<.5?i+a:2-i-a,o*=60):l=u>0&&u<1?0:o,new be(o,l,u,t.opacity)}function be(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function De(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}jt(Zt,ce,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:se,formatHex:se,formatHsl:function(){return Ae(this).formatHsl()},formatRgb:fe,toString:fe}),jt(ye,pe,Gt(Zt,{brighter:function(t){return t=null==t?Qt:Math.pow(Qt,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ye(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:me,formatHex:me,formatRgb:ve,toString:ve})),jt(be,(function(t,e,n,r){return 1===arguments.length?Ae(t):new be(t,e,n,null==r?1:r)}),Gt(Zt,{brighter:function(t){return t=null==t?Qt:Math.pow(Qt,t),new be(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new be(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,a=2*n-r;return new ye(De(t>=240?t-240:t+120,a,r),De(t,a,r),De(t<120?t+240:t-120,a,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const Me=Math.PI/180,Ce=180/Math.PI,Te=4/29,ke=6/29,Fe=3*ke*ke;function _e(t){if(t instanceof Ee)return new Ee(t.l,t.a,t.b,t.opacity);if(t instanceof Pe)return ze(t);t instanceof ye||(t=ge(t));var e,n,r=Le(t.r),a=Le(t.g),i=Le(t.b),o=Be((.2225045*r+.7168786*a+.0606169*i)/1);return r===a&&a===i?e=n=o:(e=Be((.4360747*r+.3850649*a+.1430804*i)/.96422),n=Be((.0139322*r+.0971045*a+.7141733*i)/.82521)),new Ee(116*o-16,500*(e-o),200*(o-n),t.opacity)}function Se(t,e,n,r){return 1===arguments.length?_e(t):new Ee(t,e,n,null==r?1:r)}function Ee(t,e,n,r){this.l=+t,this.a=+e,this.b=+n,this.opacity=+r}function Be(t){return t>.008856451679035631?Math.pow(t,1/3):t/Fe+Te}function Ne(t){return t>ke?t*t*t:Fe*(t-Te)}function Ie(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Le(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Ve(t){if(t instanceof Pe)return new Pe(t.h,t.c,t.l,t.opacity);if(t instanceof Ee||(t=_e(t)),0===t.a&&0===t.b)return new Pe(NaN,0<t.l&&t.l<100?0:NaN,t.l,t.opacity);var e=Math.atan2(t.b,t.a)*Ce;return new Pe(e<0?e+360:e,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Pe(t,e,n,r){this.h=+t,this.c=+e,this.l=+n,this.opacity=+r}function ze(t){if(isNaN(t.h))return new Ee(t.l,0,0,t.opacity);var e=t.h*Me;return new Ee(t.l,Math.cos(e)*t.c,Math.sin(e)*t.c,t.opacity)}jt(Ee,Se,Gt(Zt,{brighter:function(t){return new Ee(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Ee(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,e=isNaN(this.a)?t:t+this.a/500,n=isNaN(this.b)?t:t-this.b/200;return new ye(Ie(3.1338561*(e=.96422*Ne(e))-1.6168667*(t=1*Ne(t))-.4906146*(n=.82521*Ne(n))),Ie(-.9787684*e+1.9161415*t+.033454*n),Ie(.0719453*e-.2289914*t+1.4052427*n),this.opacity)}})),jt(Pe,(function(t,e,n,r){return 1===arguments.length?Ve(t):new Pe(t,e,n,null==r?1:r)}),Gt(Zt,{brighter:function(t){return new Pe(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Pe(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return ze(this).rgb()}}));var Ye,Ue,Oe=0,Re=0,He=0,We=0,$e=0,qe=0,Xe="object"==typeof performance&&performance.now?performance:Date,je="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ge(){return $e||(je(Ze),$e=Xe.now()+qe)}function Ze(){$e=0}function Qe(){this._call=this._time=this._next=null}function Je(t,e,n){var r=new Qe;return r.restart(t,e,n),r}function Ke(){$e=(We=Xe.now())+qe,Oe=Re=0;try{!function(){Ge(),++Oe;for(var t,e=Ye;e;)(t=$e-e._time)>=0&&e._call.call(null,t),e=e._next;--Oe}()}finally{Oe=0,function(){var t,e,n=Ye,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ye=e);Ue=t,en(r)}(),$e=0}}function tn(){var t=Xe.now(),e=t-We;e>1e3&&(qe-=e,We=t)}function en(t){Oe||(Re&&(Re=clearTimeout(Re)),t-$e>24?(t<1/0&&(Re=setTimeout(Ke,t-Xe.now()-qe)),He&&(He=clearInterval(He))):(He||(We=Xe.now(),He=setInterval(tn,1e3)),Oe=1,je(Ke)))}function nn(t,e,n){var r=new Qe;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Qe.prototype=Je.prototype={constructor:Qe,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Ge():+n)+(null==e?0:+e),this._next||Ue===this||(Ue?Ue._next=this:Ye=this,Ue=this),this._call=t,this._time=n,en()},stop:function(){this._call&&(this._call=null,this._time=1/0,en())}};var rn=_("start","end","cancel","interrupt"),an=[];function on(t,e,n,r,a,i){var o=t.__transition;if(o){if(n in o)return}else t.__transition={};!function(t,e,n){var r,a=t.__transition;function i(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}function o(i){var s,f,c,h;if(1!==n.state)return u();for(s in a)if((h=a[s]).name===n.name){if(3===h.state)return nn(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete a[s]):+s<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete a[s])}if(nn((function(){3===n.state&&(n.state=4,n.timer.restart(l,n.delay,n.time),l(i))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(c=n.tween.length),s=0,f=-1;s<c;++s)(h=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++f]=h);r.length=f+1}}function l(e){for(var a=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),i=-1,o=r.length;++i<o;)r[i].call(t,a);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete a[e],a)return;delete t.__transition}a[e]=n,n.timer=Je(i,0,n.time)}(t,n,{name:e,index:r,group:a,on:rn,tween:an,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function ln(t,e){var n=sn(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function un(t,e){var n=sn(t,e);if(n.state>3)throw new Error("too late; already running");return n}function sn(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var fn=t=>()=>t;function cn(t){return 1==(t=+t)?hn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):fn(isNaN(e)?n:e)}}function hn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):fn(isNaN(t)?e:t)}var dn=function t(e){var n=cn(e);function r(t,e){var r=n((t=pe(t)).r,(e=pe(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=hn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function gn(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var pn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yn=new RegExp(pn.source,"g");function mn(t,e){var n,r,a,i=pn.lastIndex=yn.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=pn.exec(t))&&(r=yn.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:gn(n,r)})),i=yn.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}var vn,wn=180/Math.PI,xn={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function An(t,e,n,r,a,i){var o,l,u;return(o=Math.sqrt(t*t+e*e))&&(t/=o,e/=o),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(l=Math.sqrt(n*n+r*r))&&(n/=l,r/=l,u/=l),t*r<e*n&&(t=-t,e=-e,u=-u,o=-o),{translateX:a,translateY:i,rotate:Math.atan2(e,t)*wn,skewX:Math.atan(u)*wn,scaleX:o,scaleY:l}}function bn(t,e,n,r){function a(t){return t.length?t.pop()+" ":""}return function(i,o){var l=[],u=[];return i=t(i),o=t(o),function(t,r,a,i,o,l){if(t!==a||r!==i){var u=o.push("translate(",null,e,null,n);l.push({i:u-4,x:gn(t,a)},{i:u-2,x:gn(r,i)})}else(a||i)&&o.push("translate("+a+e+i+n)}(i.translateX,i.translateY,o.translateX,o.translateY,l,u),function(t,e,n,i){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),i.push({i:n.push(a(n)+"rotate(",null,r)-2,x:gn(t,e)})):e&&n.push(a(n)+"rotate("+e+r)}(i.rotate,o.rotate,l,u),function(t,e,n,i){t!==e?i.push({i:n.push(a(n)+"skewX(",null,r)-2,x:gn(t,e)}):e&&n.push(a(n)+"skewX("+e+r)}(i.skewX,o.skewX,l,u),function(t,e,n,r,i,o){if(t!==n||e!==r){var l=i.push(a(i)+"scale(",null,",",null,")");o.push({i:l-4,x:gn(t,n)},{i:l-2,x:gn(e,r)})}else 1===n&&1===r||i.push(a(i)+"scale("+n+","+r+")")}(i.scaleX,i.scaleY,o.scaleX,o.scaleY,l,u),i=o=null,function(t){for(var e,n=-1,r=u.length;++n<r;)l[(e=u[n]).i]=e.x(t);return l.join("")}}}var Dn=bn((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?xn:An(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),Mn=bn((function(t){return null==t?xn:(vn||(vn=document.createElementNS("http://www.w3.org/2000/svg","g")),vn.setAttribute("transform",t),(t=vn.transform.baseVal.consolidate())?An((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):xn)}),", ",")",")");function Cn(t,e){var n,r;return function(){var a=un(this,t),i=a.tween;if(i!==n)for(var o=0,l=(r=n=i).length;o<l;++o)if(r[o].name===e){(r=r.slice()).splice(o,1);break}a.tween=r}}function Tn(t,e,n){var r,a;if("function"!=typeof n)throw new Error;return function(){var i=un(this,t),o=i.tween;if(o!==r){a=(r=o).slice();for(var l={name:e,value:n},u=0,s=a.length;u<s;++u)if(a[u].name===e){a[u]=l;break}u===s&&a.push(l)}i.tween=a}}function kn(t,e,n){var r=t._id;return t.each((function(){var t=un(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return sn(t,r).value[e]}}function Fn(t,e){var n;return("number"==typeof e?gn:e instanceof ce?dn:(n=ce(e))?(e=n,dn):mn)(t,e)}function _n(t){return function(){this.removeAttribute(t)}}function Sn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function En(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttribute(t);return o===i?null:o===r?a:a=e(r=o,n)}}function Bn(t,e,n){var r,a,i=n+"";return function(){var o=this.getAttributeNS(t.space,t.local);return o===i?null:o===r?a:a=e(r=o,n)}}function Nn(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttribute(t))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttribute(t)}}function In(t,e,n){var r,a,i;return function(){var o,l,u=n(this);if(null!=u)return(o=this.getAttributeNS(t.space,t.local))===(l=u+"")?null:o===r&&l===a?i:(a=l,i=e(r=o,u));this.removeAttributeNS(t.space,t.local)}}function Ln(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Vn(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Pn(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Vn(t,a)),n}return a._value=e,a}function zn(t,e){var n,r;function a(){var a=e.apply(this,arguments);return a!==r&&(n=(r=a)&&Ln(t,a)),n}return a._value=e,a}function Yn(t,e){return function(){ln(this,t).delay=+e.apply(this,arguments)}}function Un(t,e){return e=+e,function(){ln(this,t).delay=e}}function On(t,e){return function(){un(this,t).duration=+e.apply(this,arguments)}}function Rn(t,e){return e=+e,function(){un(this,t).duration=e}}function Hn(t,e){if("function"!=typeof e)throw new Error;return function(){un(this,t).ease=e}}function Wn(t,e,n){var r,a,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ln:un;return function(){var o=i(this,t),l=o.on;l!==r&&(a=(r=l).copy()).on(e,n),o.on=a}}var $n=qt.prototype.constructor;function qn(t){return function(){this.style.removeProperty(t)}}function Xn(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function jn(t,e,n){var r,a;function i(){var i=e.apply(this,arguments);return i!==a&&(r=(a=i)&&Xn(t,i,n)),r}return i._value=e,i}function Gn(t){return function(e){this.textContent=t.call(this,e)}}function Zn(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Gn(r)),e}return r._value=t,r}var Qn=0;function Jn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Kn(){return++Qn}var tr=qt.prototype;Jn.prototype={constructor:Jn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=O(t));for(var r=this._groups,a=r.length,i=new Array(a),o=0;o<a;++o)for(var l,u,s=r[o],f=s.length,c=i[o]=new Array(f),h=0;h<f;++h)(l=s[h])&&(u=t.call(l,l.__data__,h,s))&&("__data__"in l&&(u.__data__=l.__data__),c[h]=u,on(c[h],e,n,h,c,sn(l,n)));return new Jn(i,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=W(t));for(var r=this._groups,a=r.length,i=[],o=[],l=0;l<a;++l)for(var u,s=r[l],f=s.length,c=0;c<f;++c)if(u=s[c]){for(var h,d=t.call(u,u.__data__,c,s),g=sn(u,n),p=0,y=d.length;p<y;++p)(h=d[p])&&on(h,e,n,p,d,g);i.push(d),o.push(u)}return new Jn(i,o,e,n)},filter:function(t){"function"!=typeof t&&(t=$(t));for(var e=this._groups,n=e.length,r=new Array(n),a=0;a<n;++a)for(var i,o=e[a],l=o.length,u=r[a]=[],s=0;s<l;++s)(i=o[s])&&t.call(i,i.__data__,s,o)&&u.push(i);return new Jn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,a=n.length,i=Math.min(r,a),o=new Array(r),l=0;l<i;++l)for(var u,s=e[l],f=n[l],c=s.length,h=o[l]=new Array(c),d=0;d<c;++d)(u=s[d]||f[d])&&(h[d]=u);for(;l<r;++l)o[l]=e[l];return new Jn(o,this._parents,this._name,this._id)},selection:function(){return new $n(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Kn(),r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)if(o=l[s]){var f=sn(o,e);on(o,t,n,s,l,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Jn(r,this._parents,t,n)},call:tr.call,nodes:tr.nodes,node:tr.node,size:tr.size,empty:tr.empty,each:tr.each,on:function(t,e){var n=this._id;return arguments.length<2?sn(this.node(),n).on.on(t):this.each(Wn(n,t,e))},attr:function(t,e){var n=V(t),r="transform"===n?Mn:Fn;return this.attrTween(t,"function"==typeof e?(n.local?In:Nn)(n,r,kn(this,"attr."+t,e)):null==e?(n.local?Sn:_n)(n):(n.local?Bn:En)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=V(t);return this.tween(n,(r.local?Pn:zn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Dn:Fn;return null==e?this.styleTween(t,function(t,e){var n,r,a;return function(){var i=gt(this,t),o=(this.style.removeProperty(t),gt(this,t));return i===o?null:i===n&&o===r?a:a=e(n=i,r=o)}}(t,r)).on("end.style."+t,qn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,a,i;return function(){var o=gt(this,t),l=n(this),u=l+"";return null==l&&(this.style.removeProperty(t),u=l=gt(this,t)),o===u?null:o===r&&u===a?i:(a=u,i=e(r=o,l))}}(t,r,kn(this,"style."+t,e))).each(function(t,e){var n,r,a,i,o="style."+e,l="end."+o;return function(){var u=un(this,t),s=u.on,f=null==u.value[o]?i||(i=qn(e)):void 0;s===n&&a===f||(r=(n=s).copy()).on(l,a=f),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,a,i=n+"";return function(){var o=gt(this,t);return o===i?null:o===r?a:a=e(r=o,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,jn(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(kn(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Zn(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,a=sn(this.node(),n).tween,i=0,o=a.length;i<o;++i)if((r=a[i]).name===t)return r.value;return null}return this.each((null==e?Cn:Tn)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?Yn:Un)(e,t)):sn(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?On:Rn)(e,t)):sn(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(Hn(e,t)):sn(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;un(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,a=n.size();return new Promise((function(i,o){var l={value:o},u={value:function(){0==--a&&i()}};n.each((function(){var n=un(this,r),a=n.on;a!==t&&((e=(t=a).copy())._.cancel.push(l),e._.interrupt.push(l),e._.end.push(u)),n.on=e})),0===a&&i()}))},[Symbol.iterator]:tr[Symbol.iterator]};var er={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function nr(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}qt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,a,i=t.__transition,o=!0;if(i){for(a in e=null==e?null:e+"",i)(n=i[a]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete i[a]):o=!1;o&&delete t.__transition}}(this,t)}))},qt.prototype.transition=function(t){var e,n;t instanceof Jn?(e=t._id,t=t._name):(e=Kn(),(n=er).time=Ge(),t=null==t?null:t+"");for(var r=this._groups,a=r.length,i=0;i<a;++i)for(var o,l=r[i],u=l.length,s=0;s<u;++s)(o=l[s])&&on(o,t,e,s,l,n||nr(o,e));return new Jn(r,this._parents,t,e)};const rr=Math.PI,ar=2*rr,ir=ar-1e-6;function or(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function lr(){return new or}function ur(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function sr(t){return(t=ur(Math.abs(t)))?t[1]:NaN}or.prototype=lr.prototype={constructor:or,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,a,i){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+a)+","+(this._y1=+i)},arcTo:function(t,e,n,r,a){t=+t,e=+e,n=+n,r=+r,a=+a;var i=this._x1,o=this._y1,l=n-t,u=r-e,s=i-t,f=o-e,c=s*s+f*f;if(a<0)throw new Error("negative radius: "+a);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(c>1e-6)if(Math.abs(f*l-u*s)>1e-6&&a){var h=n-i,d=r-o,g=l*l+u*u,p=h*h+d*d,y=Math.sqrt(g),m=Math.sqrt(c),v=a*Math.tan((rr-Math.acos((g+c-p)/(2*y*m)))/2),w=v/m,x=v/y;Math.abs(w-1)>1e-6&&(this._+="L"+(t+w*s)+","+(e+w*f)),this._+="A"+a+","+a+",0,0,"+ +(f*h>s*d)+","+(this._x1=t+x*l)+","+(this._y1=e+x*u)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,a,i){t=+t,e=+e,i=!!i;var o=(n=+n)*Math.cos(r),l=n*Math.sin(r),u=t+o,s=e+l,f=1^i,c=i?r-a:a-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+u+","+s:(Math.abs(this._x1-u)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+u+","+s),n&&(c<0&&(c=c%ar+ar),c>ir?this._+="A"+n+","+n+",0,1,"+f+","+(t-o)+","+(e-l)+"A"+n+","+n+",0,1,"+f+","+(this._x1=u)+","+(this._y1=s):c>1e-6&&(this._+="A"+n+","+n+",0,"+ +(c>=rr)+","+f+","+(this._x1=t+n*Math.cos(a))+","+(this._y1=e+n*Math.sin(a))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var fr,cr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function hr(t){if(!(e=cr.exec(t)))throw new Error("invalid format: "+t);var e;return new dr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function dr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function gr(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],a=n[1];return a<0?"0."+new Array(-a).join("0")+r:r.length>a+1?r.slice(0,a+1)+"."+r.slice(a+1):r+new Array(a-r.length+2).join("0")}hr.prototype=dr.prototype,dr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var pr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>gr(100*t,e),r:gr,s:function(t,e){var n=ur(t,e);if(!n)return t+"";var r=n[0],a=n[1],i=a-(fr=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,o=r.length;return i===o?r:i>o?r+new Array(i-o+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+ur(t,Math.max(0,e+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function yr(t){return t}var mr,vr,wr,xr=Array.prototype.map,Ar=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function br(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?yr:(e=xr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var a=t.length,i=[],o=0,l=e[0],u=0;a>0&&l>0&&(u+l+1>r&&(l=Math.max(1,r-u)),i.push(t.substring(a-=l,a+l)),!((u+=l+1)>r));)l=e[o=(o+1)%e.length];return i.reverse().join(n)}),a=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",o=void 0===t.decimal?".":t.decimal+"",l=void 0===t.numerals?yr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(xr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"−":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function c(t){var e=(t=hr(t)).fill,n=t.align,c=t.sign,h=t.symbol,d=t.zero,g=t.width,p=t.comma,y=t.precision,m=t.trim,v=t.type;"n"===v?(p=!0,v="g"):pr[v]||(void 0===y&&(y=12),m=!0,v="g"),(d||"0"===e&&"="===n)&&(d=!0,e="0",n="=");var w="$"===h?a:"#"===h&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",x="$"===h?i:/[%p]/.test(v)?u:"",A=pr[v],b=/[defgprs%]/.test(v);function D(t){var a,i,u,h=w,D=x;if("c"===v)D=A(t)+D,t="";else{var M=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:A(Math.abs(t),y),m&&(t=function(t){t:for(var e,n=t.length,r=1,a=-1;r<n;++r)switch(t[r]){case".":a=e=r;break;case"0":0===a&&(a=r),e=r;break;default:if(!+t[r])break t;a>0&&(a=0)}return a>0?t.slice(0,a)+t.slice(e+1):t}(t)),M&&0==+t&&"+"!==c&&(M=!1),h=(M?"("===c?c:s:"-"===c||"("===c?"":c)+h,D=("s"===v?Ar[8+fr/3]:"")+D+(M&&"("===c?")":""),b)for(a=-1,i=t.length;++a<i;)if(48>(u=t.charCodeAt(a))||u>57){D=(46===u?o+t.slice(a+1):t.slice(a))+D,t=t.slice(0,a);break}}p&&!d&&(t=r(t,1/0));var C=h.length+t.length+D.length,T=C<g?new Array(g-C+1).join(e):"";switch(p&&d&&(t=r(T+t,T.length?g-D.length:1/0),T=""),n){case"<":t=h+t+D+T;break;case"=":t=h+T+t+D;break;case"^":t=T.slice(0,C=T.length>>1)+h+t+D+T.slice(C);break;default:t=T+h+t+D}return l(t)}return y=void 0===y?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,y)):Math.max(0,Math.min(20,y)),D.toString=function(){return t+""},D}return{format:c,formatPrefix:function(t,e){var n=c(((t=hr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(sr(e)/3))),a=Math.pow(10,-r),i=Ar[8+r/3];return function(t){return n(a*t)+i}}}}mr=br({thousands:",",grouping:[3],currency:["$",""]}),vr=mr.format,wr=mr.formatPrefix;function Dr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):(t=>()=>t)(isNaN(t)?e:t)}function Mr(t,e){var n=Dr((t=Se(t)).l,(e=Se(e)).l),r=Dr(t.a,e.a),a=Dr(t.b,e.b),i=Dr(t.opacity,e.opacity);return function(e){return t.l=n(e),t.a=r(e),t.b=a(e),t.opacity=i(e),t+""}}function Cr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}const Tr=Symbol("implicit");function kr(){var t=new Map,e=[],n=[],r=Tr;function a(a){var i=a+"",o=t.get(i);if(!o){if(r!==Tr)return r;t.set(i,o=e.push(a))}return n[(o-1)%n.length]}return a.domain=function(n){if(!arguments.length)return e.slice();e=[],t=new Map;for(const r of n){const n=r+"";t.has(n)||t.set(n,e.push(r))}return a},a.range=function(t){return arguments.length?(n=Array.from(t),a):n.slice()},a.unknown=function(t){return arguments.length?(r=t,a):r},a.copy=function(){return kr(e,n).unknown(r)},Cr.apply(a,arguments),a}var Fr=t=>()=>t;function _r(t){return 1==(t=+t)?Sr:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Fr(isNaN(e)?n:e)}}function Sr(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Fr(isNaN(t)?e:t)}var Er=function t(e){var n=_r(e);function r(t,e){var r=n((t=pe(t)).r,(e=pe(e)).r),a=n(t.g,e.g),i=n(t.b,e.b),o=Sr(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=a(e),t.b=i(e),t.opacity=o(e),t+""}}return r.gamma=t,r}(1);function Br(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,a=e.slice();return function(i){for(n=0;n<r;++n)a[n]=t[n]*(1-i)+e[n]*i;return a}}function Nr(t,e){var n,r=e?e.length:0,a=t?Math.min(r,t.length):0,i=new Array(a),o=new Array(r);for(n=0;n<a;++n)i[n]=Ur(t[n],e[n]);for(;n<r;++n)o[n]=e[n];return function(t){for(n=0;n<a;++n)o[n]=i[n](t);return o}}function Ir(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Lr(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}function Vr(t,e){var n,r={},a={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Ur(t[n],e[n]):a[n]=e[n];return function(t){for(n in r)a[n]=r[n](t);return a}}var Pr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,zr=new RegExp(Pr.source,"g");function Yr(t,e){var n,r,a,i=Pr.lastIndex=zr.lastIndex=0,o=-1,l=[],u=[];for(t+="",e+="";(n=Pr.exec(t))&&(r=zr.exec(e));)(a=r.index)>i&&(a=e.slice(i,a),l[o]?l[o]+=a:l[++o]=a),(n=n[0])===(r=r[0])?l[o]?l[o]+=r:l[++o]=r:(l[++o]=null,u.push({i:o,x:Lr(n,r)})),i=zr.lastIndex;return i<e.length&&(a=e.slice(i),l[o]?l[o]+=a:l[++o]=a),l.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)l[(n=u[r]).i]=n.x(t);return l.join("")})}function Ur(t,e){var n,r=typeof e;return null==e||"boolean"===r?Fr(e):("number"===r?Lr:"string"===r?(n=ce(e))?(e=n,Er):Yr:e instanceof ce?Er:e instanceof Date?Ir:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}(e)?Br:Array.isArray(e)?Nr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Vr:Lr)(t,e)}function Or(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Rr(t){return+t}var Hr=[0,1];function Wr(t){return t}function $r(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:function(t){return function(){return t}}(isNaN(e)?NaN:.5)}function qr(t,e,n){var r=t[0],a=t[1],i=e[0],o=e[1];return a<r?(r=$r(a,r),i=n(o,i)):(r=$r(r,a),i=n(i,o)),function(t){return i(r(t))}}function Xr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),l=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++l<r;)i[l]=$r(t[l],t[l+1]),o[l]=n(e[l],e[l+1]);return function(e){var n=a(t,e,1,r)-1;return o[n](i[n](e))}}function jr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Gr(){var t,e,n,r,a,i,o=Hr,l=Hr,u=Ur,s=Wr;function f(){var t,e,n,u=Math.min(o.length,l.length);return s!==Wr&&(t=o[0],e=o[u-1],t>e&&(n=t,t=e,e=n),s=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?Xr:qr,a=i=null,c}function c(e){return null==e||isNaN(e=+e)?n:(a||(a=r(o.map(t),l,u)))(t(s(e)))}return c.invert=function(n){return s(e((i||(i=r(l,o.map(t),Lr)))(n)))},c.domain=function(t){return arguments.length?(o=Array.from(t,Rr),f()):o.slice()},c.range=function(t){return arguments.length?(l=Array.from(t),f()):l.slice()},c.rangeRound=function(t){return l=Array.from(t),u=Or,f()},c.clamp=function(t){return arguments.length?(s=!!t||Wr,f()):s!==Wr},c.interpolate=function(t){return arguments.length?(u=t,f()):u},c.unknown=function(t){return arguments.length?(n=t,c):n},function(n,r){return t=n,e=r,f()}}function Zr(){return Gr()(Wr,Wr)}function Qr(t,e,n,r){var a,i=f(t,e,n);switch((r=hr(null==r?",f":r)).type){case"s":var o=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(a=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sr(e)/3)))-sr(Math.abs(t)))}(i,o))||(r.precision=a),wr(r,o);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(a=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,sr(e)-sr(t))+1}(i,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=a-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(a=function(t){return Math.max(0,-sr(Math.abs(t)))}(i))||(r.precision=a-2*("%"===r.type))}return vr(r)}function Jr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){var r,a,i,o,l=-1;if(n=+n,(t=+t)==(e=+e)&&n>0)return[t];if((r=e<t)&&(a=t,t=e,e=a),0===(o=s(t,e,n))||!isFinite(o))return[];if(o>0){let n=Math.round(t/o),r=Math.round(e/o);for(n*o<t&&++n,r*o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)*o}else{o=-o;let n=Math.round(t*o),r=Math.round(e*o);for(n/o<t&&++n,r/o>e&&--r,i=new Array(a=r-n+1);++l<a;)i[l]=(n+l)/o}return r&&i.reverse(),i}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return Qr(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,a,i=e(),o=0,l=i.length-1,u=i[o],f=i[l],c=10;for(f<u&&(a=u,u=f,f=a,a=o,o=l,l=a);c-- >0;){if((a=s(u,f,n))===r)return i[o]=u,i[l]=f,e(i);if(a>0)u=Math.floor(u/a)*a,f=Math.ceil(f/a)*a;else{if(!(a<0))break;u=Math.ceil(u*a)/a,f=Math.floor(f*a)/a}r=a}return t},t}function Kr(){var t=Zr();return t.copy=function(){return jr(t,Kr())},Cr.apply(t,arguments),Jr(t)}var ta=new Date,ea=new Date;function na(t,e,n,r){function a(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return a.floor=function(e){return t(e=new Date(+e)),e},a.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},a.round=function(t){var e=a(t),n=a.ceil(t);return t-e<n-t?e:n},a.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},a.range=function(n,r,i){var o,l=[];if(n=a.ceil(n),i=null==i?1:Math.floor(i),!(n<r&&i>0))return l;do{l.push(o=new Date(+n)),e(n,i),t(n)}while(o<n&&n<r);return l},a.filter=function(n){return na((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(a.count=function(e,r){return ta.setTime(+e),ea.setTime(+r),t(ta),t(ea),Math.floor(n(ta,ea))},a.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?a.filter(r?function(e){return r(e)%t==0}:function(e){return a.count(0,e)%t==0}):a:null}),a}var ra=na((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t}));ra.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?na((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):ra:null};var aa=na((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()})),ia=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()})),oa=na((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()})),la=na((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5),(t=>t.getDate()-1));function ua(t){return na((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var sa=ua(0),fa=ua(1);ua(2),ua(3);var ca=ua(4);ua(5),ua(6);var ha=na((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})),da=na((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));da.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null},na((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})),na((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}));var ga=na((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}));function pa(t){return na((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var ya=pa(0),ma=pa(1);pa(2),pa(3);var va=pa(4);pa(5),pa(6),na((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()}));var wa=na((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()}));wa.every=function(t){return isFinite(t=Math.floor(t))&&t>0?na((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};const[xa,Aa]=function(t,e,n,a,i,o){const l=[[aa,1,1e3],[aa,5,5e3],[aa,15,15e3],[aa,30,3e4],[o,1,6e4],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,36e5],[i,3,108e5],[i,6,216e5],[i,12,432e5],[a,1,864e5],[a,2,1728e5],[n,1,6048e5],[e,1,2592e6],[e,3,7776e6],[t,1,31536e6]];function u(e,n,a){const i=Math.abs(n-e)/a,o=r((([,,t])=>t)).right(l,i);if(o===l.length)return t.every(f(e/31536e6,n/31536e6,a));if(0===o)return ra.every(Math.max(f(e,n,a),1));const[u,s]=l[i/l[o-1][2]<l[o][2]/i?o-1:o];return u.every(s)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const a=n&&"function"==typeof n.range?n:u(t,e,n),i=a?a.range(t,+e+1):[];return r?i.reverse():i},u]}(da,ha,sa,la,oa,ia);function ba(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Da(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Ma(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Ca,Ta,ka={"-":"",_:" ",0:"0"},Fa=/^\s*\d+/,_a=/^%/,Sa=/[\\^$*+?|[\]().{}]/g;function Ea(t,e,n){var r=t<0?"-":"",a=(r?-t:t)+"",i=a.length;return r+(i<n?new Array(n-i+1).join(e)+a:a)}function Ba(t){return t.replace(Sa,"\\$&")}function Na(t){return new RegExp("^(?:"+t.map(Ba).join("|")+")","i")}function Ia(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function La(t,e,n){var r=Fa.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Va(t,e,n){var r=Fa.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Pa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function za(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Ya(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Ua(t,e,n){var r=Fa.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Oa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ra(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ha(t,e,n){var r=Fa.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Wa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function $a(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function qa(t,e,n){var r=Fa.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Xa(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function ja(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Ga(t,e,n){var r=Fa.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Za(t,e,n){var r=Fa.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Qa(t,e,n){var r=Fa.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ja(t,e,n){var r=_a.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Ka(t,e,n){var r=Fa.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function ti(t,e,n){var r=Fa.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function ei(t,e){return Ea(t.getDate(),e,2)}function ni(t,e){return Ea(t.getHours(),e,2)}function ri(t,e){return Ea(t.getHours()%12||12,e,2)}function ai(t,e){return Ea(1+la.count(da(t),t),e,3)}function ii(t,e){return Ea(t.getMilliseconds(),e,3)}function oi(t,e){return ii(t,e)+"000"}function li(t,e){return Ea(t.getMonth()+1,e,2)}function ui(t,e){return Ea(t.getMinutes(),e,2)}function si(t,e){return Ea(t.getSeconds(),e,2)}function fi(t){var e=t.getDay();return 0===e?7:e}function ci(t,e){return Ea(sa.count(da(t)-1,t),e,2)}function hi(t){var e=t.getDay();return e>=4||0===e?ca(t):ca.ceil(t)}function di(t,e){return t=hi(t),Ea(ca.count(da(t),t)+(4===da(t).getDay()),e,2)}function gi(t){return t.getDay()}function pi(t,e){return Ea(fa.count(da(t)-1,t),e,2)}function yi(t,e){return Ea(t.getFullYear()%100,e,2)}function mi(t,e){return Ea((t=hi(t)).getFullYear()%100,e,2)}function vi(t,e){return Ea(t.getFullYear()%1e4,e,4)}function wi(t,e){var n=t.getDay();return Ea((t=n>=4||0===n?ca(t):ca.ceil(t)).getFullYear()%1e4,e,4)}function xi(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ea(e/60|0,"0",2)+Ea(e%60,"0",2)}function Ai(t,e){return Ea(t.getUTCDate(),e,2)}function bi(t,e){return Ea(t.getUTCHours(),e,2)}function Di(t,e){return Ea(t.getUTCHours()%12||12,e,2)}function Mi(t,e){return Ea(1+ga.count(wa(t),t),e,3)}function Ci(t,e){return Ea(t.getUTCMilliseconds(),e,3)}function Ti(t,e){return Ci(t,e)+"000"}function ki(t,e){return Ea(t.getUTCMonth()+1,e,2)}function Fi(t,e){return Ea(t.getUTCMinutes(),e,2)}function _i(t,e){return Ea(t.getUTCSeconds(),e,2)}function Si(t){var e=t.getUTCDay();return 0===e?7:e}function Ei(t,e){return Ea(ya.count(wa(t)-1,t),e,2)}function Bi(t){var e=t.getUTCDay();return e>=4||0===e?va(t):va.ceil(t)}function Ni(t,e){return t=Bi(t),Ea(va.count(wa(t),t)+(4===wa(t).getUTCDay()),e,2)}function Ii(t){return t.getUTCDay()}function Li(t,e){return Ea(ma.count(wa(t)-1,t),e,2)}function Vi(t,e){return Ea(t.getUTCFullYear()%100,e,2)}function Pi(t,e){return Ea((t=Bi(t)).getUTCFullYear()%100,e,2)}function zi(t,e){return Ea(t.getUTCFullYear()%1e4,e,4)}function Yi(t,e){var n=t.getUTCDay();return Ea((t=n>=4||0===n?va(t):va.ceil(t)).getUTCFullYear()%1e4,e,4)}function Ui(){return"+0000"}function Oi(){return"%"}function Ri(t){return+t}function Hi(t){return Math.floor(+t/1e3)}function Wi(t){return new Date(t)}function $i(t){return t instanceof Date?+t:+new Date(+t)}function qi(t,e,n,r,a,i,o,l,u,s){var f=Zr(),c=f.invert,h=f.domain,d=s(".%L"),g=s(":%S"),p=s("%I:%M"),y=s("%I %p"),m=s("%a %d"),v=s("%b %d"),w=s("%B"),x=s("%Y");function A(t){return(u(t)<t?d:l(t)<t?g:o(t)<t?p:i(t)<t?y:r(t)<t?a(t)<t?m:v:n(t)<t?w:x)(t)}return f.invert=function(t){return new Date(c(t))},f.domain=function(t){return arguments.length?h(Array.from(t,$i)):h().map(Wi)},f.ticks=function(e){var n=h();return t(n[0],n[n.length-1],null==e?10:e)},f.tickFormat=function(t,e){return null==e?A:s(e)},f.nice=function(t){var n=h();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?h(function(t,e){var n,r=0,a=(t=t.slice()).length-1,i=t[r],o=t[a];return o<i&&(n=r,r=a,a=n,n=i,i=o,o=n),t[r]=e.floor(i),t[a]=e.ceil(o),t}(n,t)):f},f.copy=function(){return jr(f,qi(t,e,n,r,a,i,o,l,u,s))},f}function Xi(t){return function(){return t}}!function(t){Ca=function(t){var e=t.dateTime,n=t.date,r=t.time,a=t.periods,i=t.days,o=t.shortDays,l=t.months,u=t.shortMonths,s=Na(a),f=Ia(a),c=Na(i),h=Ia(i),d=Na(o),g=Ia(o),p=Na(l),y=Ia(l),m=Na(u),v=Ia(u),w={a:function(t){return o[t.getDay()]},A:function(t){return i[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:null,d:ei,e:ei,f:oi,g:mi,G:wi,H:ni,I:ri,j:ai,L:ii,m:li,M:ui,p:function(t){return a[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Ri,s:Hi,S:si,u:fi,U:ci,V:di,w:gi,W:pi,x:null,X:null,y:yi,Y:vi,Z:xi,"%":Oi},x={a:function(t){return o[t.getUTCDay()]},A:function(t){return i[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return l[t.getUTCMonth()]},c:null,d:Ai,e:Ai,f:Ti,g:Pi,G:Yi,H:bi,I:Di,j:Mi,L:Ci,m:ki,M:Fi,p:function(t){return a[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Ri,s:Hi,S:_i,u:Si,U:Ei,V:Ni,w:Ii,W:Li,x:null,X:null,y:Vi,Y:zi,Z:Ui,"%":Oi},A={a:function(t,e,n){var r=d.exec(e.slice(n));return r?(t.w=g.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=c.exec(e.slice(n));return r?(t.w=h.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=m.exec(e.slice(n));return r?(t.m=v.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.m=y.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return M(t,e,n,r)},d:$a,e:$a,f:Qa,g:Oa,G:Ua,H:Xa,I:Xa,j:qa,L:Za,m:Wa,M:ja,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=f.get(r[0].toLowerCase()),n+r[0].length):-1},q:Ha,Q:Ka,s:ti,S:Ga,u:Va,U:Pa,V:za,w:La,W:Ya,x:function(t,e,r){return M(t,n,e,r)},X:function(t,e,n){return M(t,r,e,n)},y:Oa,Y:Ua,Z:Ra,"%":Ja};function b(t,e){return function(n){var r,a,i,o=[],l=-1,u=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++l<s;)37===t.charCodeAt(l)&&(o.push(t.slice(u,l)),null!=(a=ka[r=t.charAt(++l)])?r=t.charAt(++l):a="e"===r?" ":"0",(i=e[r])&&(r=i(n,a)),o.push(r),u=l+1);return o.push(t.slice(u,l)),o.join("")}}function D(t,e){return function(n){var r,a,i=Ma(1900,void 0,1);if(M(i,t,n+="",0)!=n.length)return null;if("Q"in i)return new Date(i.Q);if("s"in i)return new Date(1e3*i.s+("L"in i?i.L:0));if(e&&!("Z"in i)&&(i.Z=0),"p"in i&&(i.H=i.H%12+12*i.p),void 0===i.m&&(i.m="q"in i?i.q:0),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(a=(r=Da(Ma(i.y,0,1))).getUTCDay(),r=a>4||0===a?ma.ceil(r):ma(r),r=ga.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(a=(r=ba(Ma(i.y,0,1))).getDay(),r=a>4||0===a?fa.ceil(r):fa(r),r=la.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),a="Z"in i?Da(Ma(i.y,0,1)).getUTCDay():ba(Ma(i.y,0,1)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(a+5)%7:i.w+7*i.U-(a+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Da(i)):ba(i)}}function M(t,e,n,r){for(var a,i,o=0,l=e.length,u=n.length;o<l;){if(r>=u)return-1;if(37===(a=e.charCodeAt(o++))){if(a=e.charAt(o++),!(i=A[a in ka?e.charAt(o++):a])||(r=i(t,n,r))<0)return-1}else if(a!=n.charCodeAt(r++))return-1}return r}return w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),x.x=b(n,x),x.X=b(r,x),x.c=b(e,x),{format:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",x);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}(t),Ta=Ca.format}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ji,Gi,Zi,Qi=Math.abs,Ji=Math.atan2,Ki=Math.cos,to=Math.max,eo=Math.min,no=Math.sin,ro=Math.sqrt,ao=Math.PI,io=ao/2,oo=2*ao;function lo(t){return t>1?0:t<-1?ao:Math.acos(t)}function uo(t){return t>=1?io:t<=-1?-io:Math.asin(t)}function so(t){return t.innerRadius}function fo(t){return t.outerRadius}function co(t){return t.startAngle}function ho(t){return t.endAngle}function go(t){return t&&t.padAngle}function po(t,e,n,r,a,i,o,l){var u=n-t,s=r-e,f=o-a,c=l-i,h=c*u-f*s;if(!(h*h<1e-12))return[t+(h=(f*(e-i)-c*(t-a))/h)*u,e+h*s]}function yo(t,e,n,r,a,i,o){var l=t-n,u=e-r,s=(o?i:-i)/ro(l*l+u*u),f=s*u,c=-s*l,h=t+f,d=e+c,g=n+f,p=r+c,y=(h+g)/2,m=(d+p)/2,v=g-h,w=p-d,x=v*v+w*w,A=a-i,b=h*p-g*d,D=(w<0?-1:1)*ro(to(0,A*A*x-b*b)),M=(b*w-v*D)/x,C=(-b*v-w*D)/x,T=(b*w+v*D)/x,k=(-b*v+w*D)/x,F=M-y,_=C-m,S=T-y,E=k-m;return F*F+_*_>S*S+E*E&&(M=T,C=k),{cx:M,cy:C,x01:-f,y01:-c,x11:M*(a/A-1),y11:C*(a/A-1)}}function mo(){var t=so,e=fo,n=Xi(0),r=null,a=co,i=ho,o=go,l=null;function u(){var u,s,f=+t.apply(this,arguments),c=+e.apply(this,arguments),h=a.apply(this,arguments)-io,d=i.apply(this,arguments)-io,g=Qi(d-h),p=d>h;if(l||(l=u=lr()),c<f&&(s=c,c=f,f=s),c>1e-12)if(g>oo-1e-12)l.moveTo(c*Ki(h),c*no(h)),l.arc(0,0,c,h,d,!p),f>1e-12&&(l.moveTo(f*Ki(d),f*no(d)),l.arc(0,0,f,d,h,p));else{var y,m,v=h,w=d,x=h,A=d,b=g,D=g,M=o.apply(this,arguments)/2,C=M>1e-12&&(r?+r.apply(this,arguments):ro(f*f+c*c)),T=eo(Qi(c-f)/2,+n.apply(this,arguments)),k=T,F=T;if(C>1e-12){var _=uo(C/f*no(M)),S=uo(C/c*no(M));(b-=2*_)>1e-12?(x+=_*=p?1:-1,A-=_):(b=0,x=A=(h+d)/2),(D-=2*S)>1e-12?(v+=S*=p?1:-1,w-=S):(D=0,v=w=(h+d)/2)}var E=c*Ki(v),B=c*no(v),N=f*Ki(A),I=f*no(A);if(T>1e-12){var L,V=c*Ki(w),P=c*no(w),z=f*Ki(x),Y=f*no(x);if(g<ao&&(L=po(E,B,z,Y,V,P,N,I))){var U=E-L[0],O=B-L[1],R=V-L[0],H=P-L[1],W=1/no(lo((U*R+O*H)/(ro(U*U+O*O)*ro(R*R+H*H)))/2),$=ro(L[0]*L[0]+L[1]*L[1]);k=eo(T,(f-$)/(W-1)),F=eo(T,(c-$)/(W+1))}}D>1e-12?F>1e-12?(y=yo(z,Y,E,B,c,F,p),m=yo(V,P,N,I,c,F,p),l.moveTo(y.cx+y.x01,y.cy+y.y01),F<T?l.arc(y.cx,y.cy,F,Ji(y.y01,y.x01),Ji(m.y01,m.x01),!p):(l.arc(y.cx,y.cy,F,Ji(y.y01,y.x01),Ji(y.y11,y.x11),!p),l.arc(0,0,c,Ji(y.cy+y.y11,y.cx+y.x11),Ji(m.cy+m.y11,m.cx+m.x11),!p),l.arc(m.cx,m.cy,F,Ji(m.y11,m.x11),Ji(m.y01,m.x01),!p))):(l.moveTo(E,B),l.arc(0,0,c,v,w,!p)):l.moveTo(E,B),f>1e-12&&b>1e-12?k>1e-12?(y=yo(N,I,V,P,f,-k,p),m=yo(E,B,z,Y,f,-k,p),l.lineTo(y.cx+y.x01,y.cy+y.y01),k<T?l.arc(y.cx,y.cy,k,Ji(y.y01,y.x01),Ji(m.y01,m.x01),!p):(l.arc(y.cx,y.cy,k,Ji(y.y01,y.x01),Ji(y.y11,y.x11),!p),l.arc(0,0,f,Ji(y.cy+y.y11,y.cx+y.x11),Ji(m.cy+m.y11,m.cx+m.x11),p),l.arc(m.cx,m.cy,k,Ji(m.y11,m.x11),Ji(m.y01,m.x01),!p))):l.arc(0,0,f,A,x,p):l.lineTo(N,I)}else l.moveTo(0,0);if(l.closePath(),u)return l=null,u+""||null}return u.centroid=function(){var n=(+t.apply(this,arguments)+ +e.apply(this,arguments))/2,r=(+a.apply(this,arguments)+ +i.apply(this,arguments))/2-ao/2;return[Ki(r)*n,no(r)*n]},u.innerRadius=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),u):t},u.outerRadius=function(t){return arguments.length?(e="function"==typeof t?t:Xi(+t),u):e},u.cornerRadius=function(t){return arguments.length?(n="function"==typeof t?t:Xi(+t),u):n},u.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:Xi(+t),u):r},u.startAngle=function(t){return arguments.length?(a="function"==typeof t?t:Xi(+t),u):a},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Xi(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:Xi(+t),u):o},u.context=function(t){return arguments.length?(l=null==t?null:t,u):l},u}function vo(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function wo(t){this._context=t}function xo(t){return new wo(t)}function Ao(t){return t[0]}function bo(t){return t[1]}function Do(t,e){return e<t?-1:e>t?1:e>=t?0:NaN}function Mo(t){return t}wo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}},function(t){t[t.Tag=0]="Tag",t[t.Frontmatter=1]="Frontmatter",t[t.Wiki=2]="Wiki",t[t.Text=3]="Text",t[t.dvField=4]="dvField",t[t.Table=5]="Table",t[t.FileMeta=6]="FileMeta",t[t.Task=7]="Task",t[t.TaskDone=8]="TaskDone",t[t.TaskNotDone=9]="TaskNotDone"}(ji||(ji={})),function(t){t[t.Line=0]="Line",t[t.Bar=1]="Bar",t[t.Pie=2]="Pie",t[t.Radar=3]="Radar",t[t.Summary=4]="Summary",t[t.Table=5]="Table",t[t.Month=6]="Month",t[t.Heatmap=7]="Heatmap",t[t.Bullet=8]="Bullet",t[t.Unknown=9]="Unknown"}(Gi||(Gi={})),function(t){t[t.Number=0]="Number",t[t.Int=1]="Int",t[t.Date=2]="Date",t[t.Time=3]="Time",t[t.DateTime=4]="DateTime",t[t.String=5]="String"}(Zi||(Zi={}));class Co{constructor(t,e){this.date=t,this.value=e}}class To{constructor(t,e,n){if(this.type=e,this.target=n,this.separator="/",this.id=t,this.accessor=-1,this.accessor1=-1,this.accessor2=-1,this.valueType=Zi.Number,this.usedAsXDataset=!1,this.numTargets=0,e===ji.Table){let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]\\[(?<accessor1>[0-9]+)\\](\\[(?<accessor2>[0-9]+)\\])?","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);if(Number.isNumber(r)&&void 0!==t.groups.accessor1){let a=parseFloat(t.groups.accessor1);if(Number.isNumber(a)){let i;void 0!==t.groups.accessor2&&(i=parseFloat(t.groups.accessor2)),this.accessor=r,this.accessor1=a,Number.isNumber(i)&&(this.accessor2=i),this.parentTarget=n.replace(e,"")}break}}}else{let t,e=new RegExp("\\[(?<accessor>[0-9]+)\\]","gm");for(;t=e.exec(n);)if(void 0!==t.groups.accessor){let r=parseFloat(t.groups.accessor);Number.isNumber(r)&&(this.accessor=r,this.parentTarget=n.replace(e,""));break}}}equalTo(t){return this.type===t.type&&this.target===t.target}getType(){return this.type}getTarget(){return this.target}getParentTarget(){return this.parentTarget}getId(){return this.id}getAccessor(t=0){switch(t){case 0:return this.accessor;case 1:return this.accessor1;case 2:return this.accessor2}return null}setSeparator(t){this.separator=t}getSeparator(){return this.separator}addNumTargets(t=1){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}}class ko{constructor(t,e){this.currentIndex=0,this.name="untitled",this.query=e,this.values=[],this.parent=t,this.id=-1,this.yMin=null,this.yMax=null,this.startDate=null,this.endDate=null,this.numTargets=0,this.lineInfo=null,this.barInfo=null,this.isTmpDataset=!1,this.valueType=null==e?void 0:e.valueType;for(let e=0;e<t.getDates().length;e++)this.values.push(null)}cloneToTmpDataset(){if(!this.isTmpDataset){let t=new ko(this.parent,null);return t.name="tmp",t.values=[...this.values],t.yMin=this.yMin,t.yMax=this.yMax,t.startDate=this.startDate.clone(),t.endDate=this.endDate.clone(),t.numTargets=this.numTargets,t.isTmpDataset=!0,t.valueType=this.valueType,t}return this}getName(){return this.name}setName(t){this.name=t}getId(){return this.id}setId(t){this.id=t}addNumTargets(t){this.numTargets=this.numTargets+t}getNumTargets(){return this.numTargets}getValue(t,e=0){let n=this.parent.getIndexOfDate(t)+Math.floor(e);return n>=0&&n<this.values.length?this.values[n]:null}setValue(t,e){let n=this.parent.getIndexOfDate(t);n>=0&&n<this.values.length&&(this.values[n]=e,(null===this.yMin||e<this.yMin)&&(this.yMin=e),(null===this.yMax||e>this.yMax)&&(this.yMax=e),(null===this.startDate||t<this.startDate)&&(this.startDate=t.clone()),(null===this.endDate||t>this.endDate)&&(this.endDate=t.clone()))}recalculateMinMax(){this.yMin=Math.min(...this.values),this.yMax=Math.max(...this.values)}getYMin(){return this.yMin}getYMax(){return this.yMax}getStartDate(){return this.startDate}getEndDate(){return this.endDate}shift(t){for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(this.values[e]=this.values[e]+t);this.yMin=this.yMin+t,this.yMax=this.yMax+t}setPenalty(t){for(let e=0;e<this.values.length;e++)null===this.values[e]&&(this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t))}getQuery(){return this.query}accumulateValues(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&(t+=this.values[e]),this.values[e]=t,t<this.yMin&&(this.yMin=t),t>this.yMax&&(this.yMax=t)}getValues(){return this.values}getLength(){return this.values.length}getLengthNotNull(){let t=0;for(let e=0;e<this.values.length;e++)null!==this.values[e]&&t++;return t}next(){if(this.currentIndex<this.values.length){let t=this.currentIndex++;return{done:!1,value:new Co(this.parent.getDates()[t],this.values[t])}}return this.currentIndex=0,{done:!0,value:null}}[Symbol.iterator](){return this}}class Fo{constructor(t,e){this.currentIndex=0,this.dates=[],this.datasets=[];const n=t.creationData().format.toString();for(let r=t.clone();r<=e;r.add(1,"days")){let t=window.moment(r.format(n),n,!0);this.dates.push(t)}}createDataset(t,e){let n=new ko(this,t);return n.setId(t.getId()),e&&n.setName(e.datasetName[t.getId()]),this.datasets.push(n),n}getIndexOfDate(t){const e=t.creationData().format.toString();for(let n=0;n<this.dates.length;n++)if(this.dates[n].format(e)===t.format(e))return n;return-1}getDatasetByQuery(t){for(let e of this.datasets)if(e.getQuery().equalTo(t))return e;return null}getDatasetById(t){for(let e of this.datasets)if(e.getId()===t)return e;return null}getXDatasetIds(){let t=[];for(let e of this.datasets)if(e.getQuery().usedAsXDataset){let n=e.getQuery().getId();t.includes(n)||-1===n||t.push(n)}return t}getDates(){return this.dates}getNames(){let t=[];for(let e of this.datasets)t.push(e.getName());return t}next(){return this.currentIndex<this.datasets.length?{done:!1,value:this.datasets[this.currentIndex++]}:(this.currentIndex=0,{done:!0,value:null})}[Symbol.iterator](){return this}}class _o{constructor(t){this.queries=t,this.xDataset=[],this.folder="/",this.dateFormat="YYYY-MM-DD",this.dateFormatPrefix="",this.dateFormatSuffix="",this.startDate=null,this.endDate=null,this.datasetName=[],this.constValue=[1],this.ignoreAttachedValue=[],this.ignoreZeroValue=[],this.accum=[],this.penalty=[],this.valueShift=[],this.valueType=[],this.dataAreaSize=new Yo(300,300),this.margin=new Uo(10,10,10,10),this.tooltipSize=new Yo(90,45),this.fixedScale=1,this.fitPanelWidth=!1,this.output=[],this.line=[],this.bar=[],this.pie=[],this.summary=[],this.month=[],this.heatmap=[],this.bullet=[],this.customDataset=[],this.datasets=null}getQueryById(t){for(let e of this.queries)if(e.getId()===t)return e}}class So{constructor(){this.id=-1,this.name="",this.xData=[],this.yData=[]}}class Eo{constructor(){this.title="",this.xAxisLabel="Date",this.xAxisColor="",this.xAxisLabelColor="",this.yAxisLabel=[],this.yAxisColor=[],this.yAxisLabelColor=[],this.yAxisUnit=[],this.yMin=[],this.yMax=[],this.reverseYAxis=[],this.allowInspectData=!0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return Gi.Unknown}}class Bo extends Eo{constructor(){super(),this.lineColor=[],this.lineWidth=[],this.showLine=[],this.showPoint=[],this.pointColor=[],this.pointBorderColor=[],this.pointBorderWidth=[],this.pointSize=[],this.fillGap=[],this.yAxisLocation=[]}GetGraphType(){return Gi.Line}}class No extends Eo{constructor(){super(),this.barColor=[],this.yAxisLocation=[]}GetGraphType(){return Gi.Bar}}class Io{constructor(){this.title="",this.data=[],this.dataColor=[],this.dataName=[],this.label=[],this.hideLabelLessThan=.03,this.extLabel=[],this.showExtLabelOnlyIfNoLabel=!1,this.ratioInnerRadius=0,this.showLegend=!1,this.legendPosition="",this.legendOrientation="",this.legendBgColor="",this.legendBorderColor=""}GetGraphType(){return Gi.Pie}}class Lo{constructor(){this.template="",this.style=""}GetGraphType(){return Gi.Summary}}class Vo{constructor(){this.mode="circle",this.dataset=[],this.startWeekOn="Sun",this.threshold=[],this.yMin=[],this.yMax=[],this.showCircle=!0,this.color=null,this.dimNotInMonth=!0,this.showStreak=!0,this.showTodayRing=!0,this.showSelectedValue=!0,this.showSelectedRing=!0,this.circleColor=null,this.circleColorByValue=!1,this.headerYearColor=null,this.headerMonthColor=null,this.dividingLineColor=null,this.todayRingColor="",this.selectedRingColor="firebrick",this.initMonth="",this.selectedDate="",this.selectedDataset=null}GetGraphType(){return Gi.Month}}class Po{constructor(){this.dataset="0",this.startWeekOn="Sun",this.orientation="vertical",this.yMin=null,this.yMax=null,this.color=null}GetGraphType(){return Gi.Heatmap}}class zo{constructor(){this.title="",this.dataset="0",this.orientation="horizontal",this.value="",this.valueUnit="",this.valueColor="#69b3a2",this.range=[],this.rangeColor=[],this.showMarker=!1,this.markerValue=0,this.markerColor=""}GetGraphType(){return Gi.Bullet}}class Yo{constructor(t,e){this.width=t,this.height=e}}class Uo{constructor(t,e,n,r){this.top=t,this.right=e,this.bottom=n,this.left=r}}class Oo{constructor(t){if(this.translateX=0,this.translateY=0,"string"==typeof t){let e=t.match(/translate\(\s*(?<x>[\d\.\/-]+)\s*,\s*(?<y>[\d\.\/-]+)\s*\)/).groups;e&&(this.translateX=parseFloat(e.x),this.translateY=parseFloat(e.y))}}}class Ro{constructor(t,e){this.filePath=t,this.tableIndex=e,this.xDataset=null,this.yDatasets=[]}}const Ho=function(){const t=["HH","H","hh","h"],e=["mm","m"],n=["ss","s",""];let r=[];for(let a of t)for(let t of e)for(let e of n){let n=`${a}:${t}`;""!==e&&(n+=`:${e}`),a.contains("h")&&(n+=" a"),r.push(n)}return r}();function Wo(t,e){let n=e;t.length>4&&t.startsWith("[[")&&t.endsWith("]]")&&(t=t.substring(2,t.length-2)),"iso-8601"===e.toLowerCase()&&(n=window.moment.ISO_8601);let r=window.moment(t,n,!0);return r=r.startOf("day"),r}function $o(t,e){let n=null;const r=/^(?<value>[\-\+]?[0-9]+)(?<unit>[dwmy])$/;if(r.test(t)){let a=r.exec(t);if(void 0!==a.groups&&void 0!==a.groups.value&&void 0!==a.groups.unit){let t=parseFloat(a.groups.value),r=a.groups.unit;n=jo(e),"d"===r?n=n.add(t,"days"):"w"===r?n=n.add(t,"weeks"):"m"===r?n=n.add(t,"months"):"y"===r&&(n=n.add(t,"years"))}}return n&&n.isValid()?n:null}function qo(t,e){return null==t?null:"iso-8601"===e.toLowerCase()?t.format():t.format(e)}function Xo(t,e){return Wo(qo(window.moment(t),e),e)}function jo(t){return Wo(qo(window.moment(),t),t)}function Go(t,e){for(var n=(e=e.replace(/^\./,"")).split("."),r=0,a=n.length;r<a;++r){var i=n[r];if(!(i in t))return;t=t[i]}return t}function Zo(t,e){const n=Array.from(t),r=n.findIndex((t=>t!==e)),a=n.reverse().findIndex((t=>t!==e));return-1===r&&-1===a?t:t.substring(r,t.length-a)}function Qo(t){let e=null,n=Zi.Number;if("string"==typeof t)if(t.includes(":")){let r=!1;t.startsWith("-")&&(r=!0,t=t.substring(1));let a=window.moment(t,Ho,!0);a.isValid()&&(e=a.diff(window.moment("00:00","HH:mm",!0),"seconds"),r&&(e*=-1),n=Zi.Time)}else e=parseFloat(t);else"number"==typeof t&&(e=t);return{type:n,value:e}}function Jo(t,e="",n=""){var r=Xt("body").append("svg");let a=r.append("text").text(t).attr("x",-99999).attr("y",-99999);e&&a.attr("class",e),n&&a.attr("transform","rotate("+n+")");var i=r.node().getBBox();return r.remove(),{width:i.width,height:i.height}}function Ko(t,e,n){let r=(0|parseFloat(t.attr("width")))+e,a=(0|parseFloat(t.attr("height")))+n;t.attr("width",r),t.attr("height",a)}function tl(t,e,n){let r=new Oo(t.attr("transform"));t.attr("transform","translate("+(r.translateX+e)+","+(r.translateY+n)+")")}function el(t){return t=(t=(t=t.replace(/(^\\s\*)|(\\s\*$)/gi,"")).replace(/\[ \]{2,}/gi," ")).replace(/\\n /,"\\n")}var nl=i((function(t,e){!function(n){var r="Compound",a="MemberExpression",i="Literal",o=function(t,e){var n=new Error(t+" at character "+e);throw n.index=e,n.description=t,n},l=!0,u={"-":l,"!":l,"~":l,"+":l},s={"||":1,"&&":2,"|":3,"^":4,"&":5,"==":6,"!=":6,"===":6,"!==":6,"<":7,">":7,"<=":7,">=":7,"<<":8,">>":8,">>>":8,"+":9,"-":9,"*":10,"/":10,"%":10},f={$:l,_:l},c=function(t){var e,n=0;for(var r in t)(e=r.length)>n&&t.hasOwnProperty(r)&&(n=e);return n},h=c(u),d=c(s),g={true:!0,false:!1,null:null},p=function(t){return s[t]||0},y=function(t,e,n){return{type:"||"===t||"&&"===t?"LogicalExpression":"BinaryExpression",operator:t,left:e,right:n}},m=function(t){return t>=48&&t<=57},v=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=128&&!s[String.fromCharCode(t)]||f.hasOwnProperty(String.fromCharCode(t))},w=function(t){return t>=65&&t<=90||t>=97&&t<=122||t>=48&&t<=57||t>=128&&!s[String.fromCharCode(t)]||f.hasOwnProperty(String.fromCharCode(t))},x=function(t){for(var e,n,l=0,f=t.charAt,c=t.charCodeAt,x=function(e){return f.call(t,e)},A=function(e){return c.call(t,e)},b=t.length,D=function(){for(var t=A(l);32===t||9===t||10===t||13===t;)t=A(++l)},M=function(){var t,e,n=T();return D(),63!==A(l)?n:(l++,(t=M())||o("Expected expression",l),D(),58===A(l)?(l++,(e=M())||o("Expected expression",l),{type:"ConditionalExpression",test:n,consequent:t,alternate:e}):void o("Expected :",l))},C=function(){D();for(var e=t.substr(l,d),n=e.length;n>0;){if(s.hasOwnProperty(e)&&(!v(A(l))||l+e.length<t.length&&!w(A(l+e.length))))return l+=n,e;e=e.substr(0,--n)}return!1},T=function(){var t,e,n,r,a,i,u,s,f;if(i=k(),!(e=C()))return i;for(a={value:e,prec:p(e)},(u=k())||o("Expected expression after "+e,l),r=[i,a,u];(e=C())&&0!==(n=p(e));){for(a={value:e,prec:n},f=e;r.length>2&&n<=r[r.length-2].prec;)u=r.pop(),e=r.pop().value,i=r.pop(),t=y(e,i,u),r.push(t);(t=k())||o("Expected expression after "+f,l),r.push(a,t)}for(t=r[s=r.length-1];s>1;)t=y(r[s-1].value,r[s-2],t),s-=2;return t},k=function(){var e,n,r,i;if(D(),e=A(l),m(e)||46===e)return F();if(39===e||34===e)i=_();else if(91===e)i=N();else{for(r=(n=t.substr(l,h)).length;r>0;){if(u.hasOwnProperty(n)&&(!v(A(l))||l+n.length<t.length&&!w(A(l+n.length))))return l+=r,{type:"UnaryExpression",operator:n,argument:k(),prefix:!0};n=n.substr(0,--r)}v(e)?i=S():40===e&&(i=B())}if(!i)return!1;for(D(),e=A(l);46===e||91===e||40===e;)l++,46===e?(D(),i={type:a,computed:!1,object:i,property:S()}):91===e?(i={type:a,computed:!0,object:i,property:M()},D(),93!==(e=A(l))&&o("Unclosed [",l),l++):40===e&&(i={type:"CallExpression",arguments:E(41),callee:i}),D(),e=A(l);return i},F=function(){for(var t,e,n="";m(A(l));)n+=x(l++);if(46===A(l))for(n+=x(l++);m(A(l));)n+=x(l++);if("e"===(t=x(l))||"E"===t){for(n+=x(l++),"+"!==(t=x(l))&&"-"!==t||(n+=x(l++));m(A(l));)n+=x(l++);m(A(l-1))||o("Expected exponent ("+n+x(l)+")",l)}return e=A(l),v(e)?o("Variable names cannot start with a number ("+n+x(l)+")",l):46===e&&o("Unexpected period",l),{type:i,value:parseFloat(n),raw:n}},_=function(){for(var t,e="",n=x(l++),r=!1;l<b;){if((t=x(l++))===n){r=!0;break}if("\\"===t)switch(t=x(l++)){case"n":e+="\n";break;case"r":e+="\r";break;case"t":e+="\t";break;case"b":e+="\b";break;case"f":e+="\f";break;case"v":e+="\v";break;default:e+=t}else e+=t}return r||o('Unclosed quote after "'+e+'"',l),{type:i,value:e,raw:n+e+n}},S=function(){var e,n=A(l),r=l;for(v(n)?l++:o("Unexpected "+x(l),l);l<b&&(n=A(l),w(n));)l++;return e=t.slice(r,l),g.hasOwnProperty(e)?{type:i,value:g[e],raw:e}:"this"===e?{type:"ThisExpression"}:{type:"Identifier",name:e}},E=function(t){for(var e,n,a=[],i=!1,u=0;l<b;){if(D(),(e=A(l))===t){i=!0,l++,41===t&&u&&u>=a.length&&o("Unexpected token "+String.fromCharCode(t),l);break}if(44===e){if(l++,++u!==a.length)if(41===t)o("Unexpected token ,",l);else if(93===t)for(var s=a.length;s<u;s++)a.push(null)}else(n=M())&&n.type!==r||o("Expected comma",l),a.push(n)}return i||o("Expected "+String.fromCharCode(t),l),a},B=function(){l++;var t=M();if(D(),41===A(l))return l++,t;o("Unclosed (",l)},N=function(){return l++,{type:"ArrayExpression",elements:E(93)}},I=[];l<b;)59===(e=A(l))||44===e?l++:(n=M())?I.push(n):l<b&&o('Unexpected "'+x(l)+'"',l);return 1===I.length?I[0]:{type:r,body:I}};x.version="0.4.0",x.toString=function(){return"JavaScript Expression Parser (JSEP) v"+x.version},x.addUnaryOp=function(t){return h=Math.max(t.length,h),u[t]=l,this},x.addBinaryOp=function(t,e){return d=Math.max(t.length,d),s[t]=e,this},x.addIdentifierChar=function(t){return f[t]=l,this},x.addLiteral=function(t,e){return g[t]=e,this},x.removeUnaryOp=function(t){return delete u[t],t.length===h&&(h=c(u)),this},x.removeAllUnaryOps=function(){return u={},h=0,this},x.removeIdentifierChar=function(t){return delete f[t],this},x.removeBinaryOp=function(t){return delete s[t],t.length===d&&(d=c(s)),this},x.removeAllBinaryOps=function(){return s={},d=0,this},x.removeLiteral=function(t){return delete g[t],this},x.removeAllLiterals=function(){return g={},this},t.exports?e=t.exports=x:e.parse=x}()})),rl=i((function(t,e){!function(){var t={not_string:/[^s]/,not_bool:/[^t]/,not_type:/[^T]/,not_primitive:/[^v]/,number:/[diefg]/,numeric_arg:/[bcdiefguxX]/,json:/[j]/,not_json:/[^j]/,text:/^[^\x25]+/,modulo:/^\x25{2}/,placeholder:/^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,key:/^([a-z_][a-z_\d]*)/i,key_access:/^\.([a-z_][a-z_\d]*)/i,index_access:/^\[(\d+)\]/,sign:/^[+-]/};function n(t){return a(o(t),arguments)}function r(t,e){return n.apply(null,[t].concat(e||[]))}function a(e,r){var a,i,o,l,u,s,f,c,h,d=1,g=e.length,p="";for(i=0;i<g;i++)if("string"==typeof e[i])p+=e[i];else if("object"==typeof e[i]){if((l=e[i]).keys)for(a=r[d],o=0;o<l.keys.length;o++){if(null==a)throw new Error(n('[sprintf] Cannot access property "%s" of undefined value "%s"',l.keys[o],l.keys[o-1]));a=a[l.keys[o]]}else a=l.param_no?r[l.param_no]:r[d++];if(t.not_type.test(l.type)&&t.not_primitive.test(l.type)&&a instanceof Function&&(a=a()),t.numeric_arg.test(l.type)&&"number"!=typeof a&&isNaN(a))throw new TypeError(n("[sprintf] expecting number but found %T",a));switch(t.number.test(l.type)&&(c=a>=0),l.type){case"b":a=parseInt(a,10).toString(2);break;case"c":a=String.fromCharCode(parseInt(a,10));break;case"d":case"i":a=parseInt(a,10);break;case"j":a=JSON.stringify(a,null,l.width?parseInt(l.width):0);break;case"e":a=l.precision?parseFloat(a).toExponential(l.precision):parseFloat(a).toExponential();break;case"f":a=l.precision?parseFloat(a).toFixed(l.precision):parseFloat(a);break;case"g":a=l.precision?String(Number(a.toPrecision(l.precision))):parseFloat(a);break;case"o":a=(parseInt(a,10)>>>0).toString(8);break;case"s":a=String(a),a=l.precision?a.substring(0,l.precision):a;break;case"t":a=String(!!a),a=l.precision?a.substring(0,l.precision):a;break;case"T":a=Object.prototype.toString.call(a).slice(8,-1).toLowerCase(),a=l.precision?a.substring(0,l.precision):a;break;case"u":a=parseInt(a,10)>>>0;break;case"v":a=a.valueOf(),a=l.precision?a.substring(0,l.precision):a;break;case"x":a=(parseInt(a,10)>>>0).toString(16);break;case"X":a=(parseInt(a,10)>>>0).toString(16).toUpperCase()}t.json.test(l.type)?p+=a:(!t.number.test(l.type)||c&&!l.sign?h="":(h=c?"+":"-",a=a.toString().replace(t.sign,"")),s=l.pad_char?"0"===l.pad_char?"0":l.pad_char.charAt(1):" ",f=l.width-(h+a).length,u=l.width&&f>0?s.repeat(f):"",p+=l.align?h+a+u:"0"===s?h+u+a:u+h+a)}return p}var i=Object.create(null);function o(e){if(i[e])return i[e];for(var n,r=e,a=[],o=0;r;){if(null!==(n=t.text.exec(r)))a.push(n[0]);else if(null!==(n=t.modulo.exec(r)))a.push("%");else{if(null===(n=t.placeholder.exec(r)))throw new SyntaxError("[sprintf] unexpected placeholder");if(n[2]){o|=1;var l=[],u=n[2],s=[];if(null===(s=t.key.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");for(l.push(s[1]);""!==(u=u.substring(s[0].length));)if(null!==(s=t.key_access.exec(u)))l.push(s[1]);else{if(null===(s=t.index_access.exec(u)))throw new SyntaxError("[sprintf] failed to parse named argument key");l.push(s[1])}n[2]=l}else o|=2;if(3===o)throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");a.push({placeholder:n[0],param_no:n[1],keys:n[2],sign:n[3],pad_char:n[4],align:n[5],width:n[6],precision:n[7],type:n[8]})}r=r.substring(n[0].length)}return i[e]=a}e.sprintf=n,e.vsprintf=r,"undefined"!=typeof window&&(window.sprintf=n,window.vsprintf=r)}()}));function al(t){if("number"==typeof t){if(0===t)return!1}else if(t instanceof ko&&t.getValues().some((function(t){return 0===t})))return!1;return!0}const il={min:function(t,e){return h(t.getValues())},minDate:function(t,e){let n=h(t.getValues());if(Number.isNumber(n)){let e=Array.from(t);for(let t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: min not found"},max:function(t,e){return c(t.getValues())},maxDate:function(t,e){let n=c(t.getValues());if(Number.isNumber(n)){let e=Array.from(t);for(let t of e.reverse())if(null!==t.value&&t.value===n)return t.date}return"Error: max not found"},startDate:function(t,e){if(t){let e=t.getStartDate();if(e&&e.isValid())return e}return e.startDate},endDate:function(t,e){if(t){let e=t.getEndDate();if(e&&e.isValid())return e}return e.endDate},sum:function(t,e){return m(t.getValues())},count:function(t,e){return"Error: deprecated function 'count'"},numTargets:function(t,e){return t.getNumTargets()},days:function(t,e){return"Error: deprecated function 'days'"},numDays:function(t,e){return t.getLength()},numDaysHavingData:function(t,e){return t.getLengthNotNull()},maxStreak:function(t,e){let n=0,r=0;for(let e of t)null!==e.value?n++:n=0,n>=r&&(r=n);return r},maxStreakStart:function(t,e){let n=0,r=0,a=null,i=null;if(t)for(let e of t)null!==e.value?(0===n&&(a=e.date),n++):n=0,n>=r&&(r=n,i=a);return i},maxStreakEnd:function(t,e){let n=0,r=0,a=null,i=null;if(t){let e=Array.from(t);for(let t=0;t<e.length;t++){let o=e[t],l=null;t<e.length-1&&(l=e[t+1]),null!==o.value?(n++,null===(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return i},maxBreaks:function(t,e){let n=0,r=0;for(let e of t)null===e.value?n++:n=0,n>r&&(r=n);return r},maxBreaksStart:function(t,e){let n=0,r=0,a=null,i=null;if(t)for(let e of t)null===e.value?(0===n&&(a=e.date),n++):n=0,n>=r&&(r=n,i=a);return i},maxBreaksEnd:function(t,e){let n=0,r=0,a=null,i=null;if(t){let e=Array.from(t);for(let t=0;t<e.length;t++){let o=e[t],l=null;t<e.length-1&&(l=e[t+1]),null===o.value?(n++,null!==(null==l?void 0:l.value)&&(a=o.date)):n=0,n>=r&&(r=n,i=a)}}return i},lastStreak:function(t,e){return"Error: deprecated function 'lastStreak'"},currentStreak:function(t,e){let n=0;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null===e[t].value)break;n++}}return n},currentStreakStart:function(t,e){let n=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let r=e[t];if(t<e.length-1&&(n=e[t+1].date),null===r.value)break}}return null===n?"Error: absense":n},currentStreakEnd:function(t,e){let n=0,r=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let a=e[t];if(null===a.value)break;0===n&&(r=a.date),n++}}return null===r?"Error: absense":r},currentBreaks:function(t,e){let n=0;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){if(null!==e[t].value)break;n++}}return n},currentBreaksStart:function(t,e){let n=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let r=e[t];if(t<e.length-1&&(n=e[t+1].date),null!==r.value)break}}return null===n?"Error: absense":n},currentBreaksEnd:function(t,e){let n=0,r=null;if(t){let e=Array.from(t);for(let t=e.length-1;t>=0;t--){let a=e[t];if(null!==a.value)break;0===n&&(r=a.date),n++}}return null===r?"Error: absense":r},average:function(t,e){let n=t.getLengthNotNull();return al(n)?m(t.getValues())/n:"Error: divide by zero in expression"},median:function(t,e){return p(t.getValues(),.5,n);var n},variance:function(t,e){return function(t,e){let n,r=0,a=0,i=0;if(void 0===e)for(let e of t)null!=e&&(e=+e)>=e&&(n=e-a,a+=n/++r,i+=n*(e-a));else{let o=-1;for(let l of t)null!=(l=e(l,++o,t))&&(l=+l)>=l&&(n=l-a,a+=n/++r,i+=n*(l-a))}if(r>1)return i/(r-1)}(t.getValues())}},ol={"-":function(t){if("number"==typeof t)return-1*t;if(t instanceof ko){let e=t.cloneToTmpDataset();return e.getValues().forEach((function(t,e,n){null!==n[e]&&(n[e]=-1*t)})),e.recalculateMinMax(),e}return"Error: unknown operation for '-'"},"+":function(t){if("number"==typeof t)return t;if(t instanceof ko){return t.cloneToTmpDataset()}return"Error: unknown operation for '+'"}},ll={"+":function(t,e){if("number"==typeof t&&"number"==typeof e)return t+e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t+e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t+e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '+'"},"-":function(t,e){if("number"==typeof t&&"number"==typeof e)return t-e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t-e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t-e:r[n]=null})),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t-e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '-'"},"*":function(t,e){if("number"==typeof t&&"number"==typeof e)return t*e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t*e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t*e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '*'"},"/":function(t,e){if(!al(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t/e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t/e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t/e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '/'"},"%":function(t,e){if(!al(e))return"Error: divide by zero in expression";if("number"==typeof t&&"number"==typeof e)return t%e;if("number"==typeof t&&e instanceof ko){let n=e.cloneToTmpDataset();return n.getValues().forEach((function(e,n,r){null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&"number"==typeof e){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t%e:r[n]=null})),n.recalculateMinMax(),n}if(t instanceof ko&&e instanceof ko){let n=t.cloneToTmpDataset();return n.getValues().forEach((function(t,n,r){null!==r[n]?r[n]=t%e.getValues()[n]:r[n]=null})),n.recalculateMinMax(),n}return"Error: unknown operation for '%'"}},ul={normalize:function(t,e,n){let r=t.getYMin(),a=t.getYMax();if(null!==r&&null!==a&&a>r){let e=t.cloneToTmpDataset();return e.getValues().forEach((function(t,e,n){n[e]=(t-r)/(a-r)})),e.recalculateMinMax(),e}return"Error: invalid data range for function 'normalize'"},setMissingValues:function(t,e,n){if(e&&e.length>0){let n=e[0],r=t.cloneToTmpDataset();return Number.isNumber(n)&&!Number.isNaN(n)?(r.getValues().forEach((function(t,e,r){null===t&&(r[e]=n)})),r.recalculateMinMax(),r):"Error: invalid arguments for function 'setMissingValues'"}return"Error: invalid arguments for function 'setMissingValues"}};function sl(t,e){switch(t.type){case"Literal":return t.value;case"Identifier":let n=t.name;return n in il||n in ul?`Error: deprecated template variable '${n}', use '${n}()' instead`:`Error: unknown function name '${n}'`;case"UnaryExpression":let r=t,a=sl(r.argument,e);return"string"==typeof a?a:ol[r.operator](a);case"BinaryExpression":let i=t,o=sl(i.left,e),l=sl(i.right,e),u=function(t,e){return"string"==typeof t?t:"string"==typeof e?e:"number"==typeof t||window.moment.isMoment(t)||t instanceof ko?"number"==typeof e||window.moment.isMoment(e)||e instanceof ko?"":"Error: invalide operant type":"Error: invalid operant type"}(o,l);return"string"==typeof u&&u.startsWith("Error:")?u:ll[i.operator](o,l);case"CallExpression":let s=t,f=s.callee.name,c=function(t,e){return t.map((function(t){return sl(t,e)}))}(s.arguments,e);if("string"==typeof c)return c;if("dataset"===f){if(1===c.length){let t=c[0];if("string"==typeof t)return t;if("number"!=typeof t)return"Error: function 'dataset' only accepts id in number";let n=function(t,e){return e.datasets.getDatasetById(t)}(t,e);return n||`Error: no dataset found for id '${t}'`}}else{if(f in il){if(0===c.length){let t=null;for(let n of e.datasets)t||n.getQuery().usedAsXDataset||(t=n);return t?il[f](t,e):`No available dataset found for function ${f}`}if(1===c.length){let t=c[0];return"string"==typeof t?t:t instanceof ko?il[f](t,e):`Error: function '${f}' only accepts Dataset`}return`Error: Too many arguments for function ${f}`}if(f in ul){if(1===c.length){if("string"==typeof c[0])return c[0];if(c[0]instanceof ko){let t=c[0];return ul[f](t,null,e)}return`Error: function ${f} only accept Dataset`}if(c.length>1){if("string"==typeof c[0])return c[0];if(c[0]instanceof ko){let t=c[0];return ul[f](t,c.filter((function(t,e,n){return e>0})),e)}return`Error: function ${f} only accept Dataset`}return`Error: Too many arguments for function ${f}`}}return`Error: unknown function name '${f}'`}return"Error: unknown expression"}function fl(t,e){let n,r=[],a=new RegExp("{{(?<expr>[\\w+\\-*\\/0-9\\s()\\[\\]%.,]+)(::(?<format>[\\w+\\-*\\/0-9\\s()\\[\\]%.:]+))?}}","gm");for(;n=a.exec(t);){let t=n[0];if(!r.some((e=>e.source===t))&&(void 0!==n.groups&&void 0!==n.groups.expr)){let a=n.groups.expr,i=null;try{i=nl(a)}catch(t){return"Error:"+t.message}if(!i)return"Error: failed to parse expression";const o=sl(i,e);if("string"==typeof o)return o;if("number"==typeof o||window.moment.isMoment(o)){let e=null;void 0!==n.groups.format&&(e=n.groups.format),r.push({source:t,value:o,format:e})}}}return r}function cl(t,e){let n=fl(t,e);if("string"==typeof n)return n;let r=n;for(let n of r){let r=n.value,a=n.format,i="";"number"==typeof r?i=a?rl.sprintf("%"+a,r):r.toFixed(1):window.moment.isMoment(r)&&(i=qo(r,a||e.dateFormat)),i&&(t=t.replaceAll(n.source,i))}return t}function hl(t,e){if(t=t.trim(),/^([\-]?[0-9]+[\.][0-9]+|[\-]?[0-9]+)$/.test(t))return parseFloat(t);let n=fl(t,e);if("string"==typeof n)return n;let r=n;return r.length>0?r[0].value:"Error: failed to resolve values"}function dl(t,e,n,r){let a="",i=.5*n.dataAreaSize.width,o=.7*i,l=o*r.ratioInnerRadius,u=[];for(let t of r.data){let e=hl(t,n);if("string"==typeof e){a=e;break}"number"==typeof e&&u.push(e)}if(""!==a)return a;let s=[];for(let t of r.label){let e=cl(t,n);if(e.startsWith("Error")){a=e;break}s.push(e)}if(""!==a)return a;let f=r.hideLabelLessThan,c=s.map((function(t){return Jo(t,"tracker-tick-label")})),h=[];for(let t of r.extLabel){let e=cl(t,n);if(e.startsWith("Error")){a=e;break}h.push(e)}if(""!==a)return a;let d=s.map((function(t){return Jo(t,"tracker-tick-label")})),g=r.showExtLabelOnlyIfNoLabel,p=kr().range(r.dataColor),y=e.dataArea.append("g");y.attr("transform",(function(){return"translate("+.5*n.dataAreaSize.width+","+.5*n.dataAreaSize.height+")"}));let m=function(){var t=Mo,e=Do,n=null,r=Xi(0),a=Xi(oo),i=Xi(0);function o(o){var l,u,s,f,c,h=(o=vo(o)).length,d=0,g=new Array(h),p=new Array(h),y=+r.apply(this,arguments),m=Math.min(oo,Math.max(-oo,a.apply(this,arguments)-y)),v=Math.min(Math.abs(m)/h,i.apply(this,arguments)),w=v*(m<0?-1:1);for(l=0;l<h;++l)(c=p[g[l]=l]=+t(o[l],l,o))>0&&(d+=c);for(null!=e?g.sort((function(t,n){return e(p[t],p[n])})):null!=n&&g.sort((function(t,e){return n(o[t],o[e])})),l=0,s=d?(m-h*w)/d:0;l<h;++l,y=f)u=g[l],f=y+((c=p[u])>0?c*s:0)+w,p[u]={data:o[u],index:l,value:c,startAngle:y,endAngle:f,padAngle:v};return p}return o.value=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),o):t},o.sortValues=function(t){return arguments.length?(e=t,n=null,o):e},o.sort=function(t){return arguments.length?(n=t,e=null,o):n},o.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Xi(+t),o):r},o.endAngle=function(t){return arguments.length?(a="function"==typeof t?t:Xi(+t),o):a},o.padAngle=function(t){return arguments.length?(i="function"==typeof t?t:Xi(+t),o):i},o}(),v=m(u),w=y.selectAll("sector").data(v).enter().append("g").attr("class","sector"),x=mo().innerRadius(l).outerRadius(o);var A=mo().innerRadius(.9*i).outerRadius(.9*i);function b(t){return(t.endAngle-t.startAngle)/(2*Math.PI)<f}function D(t){return t.startAngle+(t.endAngle-t.startAngle)/2}function M(t,e){let n=c[e].width,r=d[e].width;b(t);let a=D(t),o=x.centroid(t),l=A.centroid(t),u=A.centroid(t),f=Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2));return""!==s[e]&&(o[0]=o[0]+(l[0]-o[0])*n/f,o[1]=o[1]+(l[1]-o[1])*n/f,u[0]=(.99*i-r-3)*(a<Math.PI?1:-1)),f=Math.sqrt(Math.pow(l[0]-o[0],2)+Math.pow(l[1]-o[1],2)),f>Math.sqrt(Math.pow(u[0]-o[0],2)+Math.pow(u[1]-o[1],2))?[o,u]:[o,l,u]}w.append("path").attr("fill",(function(t,e){return p(e.toString())})).attr("d",x),y.selectAll("label").data(m(u)).enter().append("text").text((function(t,e){return b(t)?"":s[e]})).attr("transform",(function(t){return"translate("+x.centroid(t)[0]+","+x.centroid(t)[1]+")"})).style("text-anchor","middle").attr("class","tracker-tick-label"),y.selectAll("extLabel").data(v).enter().append("text").text((function(t,e){return g?""===s[e]||b(t)?h[e]:"":h[e]})).attr("transform",(function(t,e){let n=A.centroid(t),r=D(t);return n[0]=(.99*i-d[e].width)*(r<Math.PI?1:-1),"translate("+n[0]+","+n[1]+")"})).style("text-anchor",(function(t){return D(t)<Math.PI?"start":"end"})).attr("class","tracker-tick-label"),y.selectAll("line").data(v).enter().append("polyline").attr("stroke","black").style("fill","none").attr("stroke-width",1).attr("points",(function(t,e){if(g){if((""===s[e]||b(t))&&""!==h[e])return M(t,e)}else if(""!==h[e])return M(t,e)})).attr("class","tracker-axis")}function gl(t,e,n){if(!e||!n)return;let r={};r=function(t,e,n,r){Xt(e).select("#svg").remove();for(var a=Object.getOwnPropertyNames(t),i=0;i<a.length;i++)delete t[a[i]];let o=Xt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}(r,t,e),function(t,e,n,r){if(!n||!r)return;if(!r.title)return;let a=Jo(r.title,"tracker-title"),i=e.graphArea.append("text").text(r.title).attr("id","title").attr("transform","translate("+n.dataAreaSize.width/2+","+a.height/2+")").attr("height",a.height).attr("class","tracker-title");e.title=i,Ko(e.svg,0,a.height),Ko(e.graphArea,0,a.height),tl(e.dataArea,0,a.height)}(0,r,e,n),dl(0,r,e,n),n.showLegend&&function(t,e,n,r){let a=e.svg;e.graphArea;let i=e.dataArea,o=e.title,l=0;o&&(l=parseFloat(o.attr("height")));let u=r.dataName,s=u.map((function(t){return Jo(t,"tracker-legend-label")})),f=0,c=0;for(let t=0;t<u.length;t++)s[t].width>c&&(c=s[t].width,f=t);let h=c/u[f].length,d=s[f].height,g=u.length,p=2*h,y=d,v=2*h,w=0,x=0;"vertical"===r.legendOrientation?(w=3*p+v+c,x=(g+1)*y):"horizontal"===r.legendOrientation&&(w=(2*p+v)*g+p+m(s,(function(t,e){return t.width})),x=y+d);let A=0,b=0;if("top"===r.legendPosition)A=n.dataAreaSize.width/2-w/2,b=l,Ko(a,0,x+y),tl(i,0,x+y);else if("bottom"===r.legendPosition)A=n.dataAreaSize.width/2-w/2,b=l+n.dataAreaSize.height+y,Ko(a,0,x+y);else if("left"===r.legendPosition)A=0,b=l+n.dataAreaSize.height/2-x/2,Ko(a,w+p,0),tl(i,w+p,0);else{if("right"!==r.legendPosition)return;A=n.dataAreaSize.width+p,b=l+n.dataAreaSize.height/2-x/2,Ko(a,w+p,0)}let D=e.graphArea.append("g").attr("id","legend").attr("transform","translate("+A+","+b+")"),M=D.append("rect").attr("class","tracker-legend").attr("width",w).attr("height",x);r.legendBgColor&&M.style("fill",r.legendBgColor),r.legendBorderColor&&M.style("stroke",r.legendBorderColor);let C=p,T=d,k=C+p+v,F=T;if("vertical"===r.legendOrientation)D.selectAll("markers").data(u).enter().append("circle").attr("cx",C+v/2).attr("cy",(function(t,e){return T+e*y})).attr("r",(function(t,e){return 5})).style("fill",(function(t,e){return r.dataColor[e]})),D.selectAll("labels").data(u).enter().append("text").attr("x",k).attr("y",(function(t,e){return F+e*y})).text((function(t,e){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",(function(t,e){return r.dataColor[e]}));else if("horizontal"===r.legendOrientation){let t=0;t=0,D.selectAll("markers").data(u).enter().append("circle").attr("cx",(function(e,n){return 0===n?t=C+v/2:t+=s[n].width+p+v+p,t})).attr("cy",T).attr("r",(function(t,e){return 5})).style("fill",(function(t,e){return r.dataColor[e]})),t=0,D.selectAll("labels").data(u).enter().append("text").attr("x",(function(e,n){return 0===n?t=k:t+=s[n].width+p+v+p,t})).attr("y",F).text((function(t,e){return t})).style("alignment-baseline","middle").attr("class","tracker-legend-label").style("fill",(function(t,e){return r.dataColor[e]}))}}(0,r,e,n)}function pl(t,e,n){if(!e||!n)return;let r="";n.template,r=n.template;let a=cl(r,e);if(a.startsWith("Error:"))return a;if(r=a,""!==r){let e=Xt(t).append("div");if(r.includes("\n")){let t=r.split("\n");for(let n of t)e.append("div").text(n)}else e.text(r);""!==n.style&&e.attr("style",n.style)}}function yl(t,e){let n=e.dataset;if(0===n.length)return!1;let r=null;if(null===e.selectedDataset){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;if(r)return e.selectedDataset=r.getId(),!0}else{let a=e.selectedDataset,i=n.findIndex((t=>t===a));if(i>=0){if(i===e.dataset.length-1){for(let e of n)if(r=t.datasets.getDatasetById(e),r&&!r.getQuery().usedAsXDataset)break;return!!r&&(e.selectedDataset=r.getId(),!0)}{i++;let a=n[i];if(r=t.datasets.getDatasetById(a),e.selectedDataset=a,r&&!r.getQuery().usedAsXDataset)return!0;yl(t,e)}}}return!1}function ml(t,e,n,r){Xt(e).select("#svg").remove();for(var a=Object.getOwnPropertyNames(t),i=0;i<a.length;i++)delete t[a[i]];let o=Xt(e).append("svg").attr("id","svg").attr("width",n.dataAreaSize.width+n.margin.left+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.top+n.margin.bottom);t.svg=o;let l=o.append("g").attr("id","graphArea").attr("transform","translate("+n.margin.left+","+n.margin.top+")").attr("width",n.dataAreaSize.width+n.margin.right).attr("height",n.dataAreaSize.height+n.margin.bottom);t.graphArea=l;let u=l.append("g").attr("id","dataArea").attr("width",n.dataAreaSize.width).attr("height",n.dataAreaSize.height);return t.dataArea=u,t}function vl(t,e){let n=t.svg.selectAll("circle");for(let t of n){let e=Xt(t).attr("id");e&&e.startsWith("tracker-selected-circle-")&&Xt(t).style("stroke","none")}e.selectedDate="",t.monitor.text("")}function wl(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=o.getName();a.month(),a.daysInMonth(),a.year();let u=Jo("30","tracker-axis-label"),s=2.8*Math.max(u.width,u.height),f=a.format("YYYY"),c=a.format("MMM"),h=Jo(f,"tracker-month-header-year"),d=Jo(c,"tracker-month-header-month"),g=0,p=e.graphArea.append("g"),y=null;r.headerMonthColor?y=r.headerMonthColor:r.color&&(y=r.color);let m=p.append("text").text(c).attr("id","titleMonth").attr("transform","translate("+s/4+","+d.height+")").attr("class","tracker-month-header-month").style("cursor","default").on("click",(function(t){vl(e,r)}));y&&m.style("fill",y),g+=d.height;let v=null;r.headerYearColor?v=r.headerYearColor:r.color&&(v=r.color);let w=p.append("text").text(f).attr("id","titleYear").attr("transform","translate("+s/4+","+(g+h.height)+")").attr("class","tracker-month-header-year").style("cursor","default").attr("font-weight","bold").on("click",(function(t){vl(e,r)}));v&&w.style("fill",v),g+=h.height;let x=Jo(l,"tracker-month-title-rotator"),A=p.append("text").text(l).attr("transform","translate("+3.5*s+","+x.height+")").attr("class","tracker-month-title-rotator").style("cursor","pointer").on("click",(function(i){yl(n,r)&&(vl(e,r),Al(t,e,n,r,a))}));e.rotator=A;let b=Jo("0.0000","tracker-month-title-monitor"),D=p.append("text").text("").attr("id","monitor").attr("class","tracker-month-title-monitor").attr("transform","translate("+3.5*s+","+(x.height+b.height)+")").style("cursor","pointer").style("fill",r.selectedRingColor);e.monitor=D;let M=Jo("<","tracker-month-title-arrow");p.append("text").text("<").attr("id","arrowLeft").attr("transform","translate("+5.5*s+","+(g/2+M.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){vl(e,r),r.selectedDate="";let o=a.clone().add(-1,"month");Al(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text(">").attr("id","arrowLeft").attr("transform","translate("+6.5*s+","+(g/2+M.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(i){vl(e,r);let o=a.clone().add(1,"month");Al(t,e,n,r,o)})).style("cursor","pointer"),p.append("text").text("◦").attr("id","arrowToday").attr("transform","translate("+6*s+","+(g/2+M.height/2)+")").attr("class","tracker-month-title-arrow").on("click",(function(a){vl(e,r);let i=jo(n.dateFormat);Al(t,e,n,r,i)})).style("cursor","pointer"),g+=8;let C=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];"mon"===r.startWeekOn.toLowerCase()&&C.push(C.shift());let T=Jo(C[0],"tracker-month-weekday");e.graphArea.selectAll("weekDays").data(C).enter().append("text").text((function(t){return t})).attr("transform",(function(t,e){return"translate("+(e+.5)*s+","+(g+T.height)+")"})).attr("class","tracker-month-weekday").attr("text-anchor","middle").style("cursor","default").on("click",(function(t){vl(e,r)})),g+=T.height+8;let k=null;r.dividingLineColor?k=r.dividingLineColor:r.color&&(k=r.color);let F=e.graphArea.append("rect").attr("x",0).attr("y",g).attr("width",6.5*s+T.width).attr("height",1).attr("class","tracker-month-dividing-line");k&&F.style("fill",k),g+=1,p.attr("height",g),e.header=p,tl(e.dataArea,0,g)}function xl(t,e,n,r,a){if(!n||!r)return;let i=r.selectedDataset;if(null===i)return;let o=n.datasets.getDatasetById(i);if(!o)return;let l=r.dataset.findIndex((t=>t===i)),u=r.threshold[l];a.month(),a.daysInMonth();let s=Jo("30","tracker-axis-label"),f=2.8*Math.max(s.width,s.height),d=f/2.8*1.8/2,g=(f-2*d)/2,p=h(o.getValues());null!==r.yMin[l]&&(p=r.yMin[l]);let y=c(o.getValues());null!==r.yMax[l]&&(y=r.yMax[l]);let m=!0;(null===y||null===p||y<=p)&&(m=!1);const v=a.clone().startOf("month");let w=v.clone().subtract(v.day(),"days");"mon"===r.startWeekOn.toLowerCase()&&(w=w.add(1,"days"));const x=a.clone().endOf("month");let A=x.clone().add(7-x.day()-1,"days");"mon"===r.startWeekOn.toLowerCase()&&(A=A.add(1,"days"));const b=o.getStartDate(),D=o.getEndDate();let M=[],C=0,T=0,k=0;for(let t=w.clone();t<=A;t.add(1,"days")){"mon"===r.startWeekOn.toLowerCase()?(C=t.day()-1,C<0&&(C=6),T=Math.floor(k/7)):(C=t.day(),T=Math.floor(k/7));let e=!0;(t.diff(v)<0||t.diff(x)>0)&&(e=!1);let a=!0;b&&D&&t.diff(b)>=0&&t.diff(D)<=0&&(a=!1);let i=o.getValue(t),l=!1;r.circleColorByValue?(m||null!==i&&i>u)&&(l=!0):null!==i&&i>u&&(l=!0);let s=null;r.circleColorByValue&&m&&null!==i&&(s=(i-p)/(y-p));let f=o.getValue(t,1),c=o.getValue(t,-1),h=!1;null!==i&&i>u&&null!==c&&c>u&&(h=!0);let d=!1;null!==i&&i>u&&null!==f&&f>u&&(d=!0),M.push({date:qo(t,n.dateFormat),value:i,scaledValue:s,dayInMonth:t.date(),isInThisMonth:e,isOutOfDataRange:a,row:T,col:C,showCircle:l,streakIn:h,streakOut:d}),k++}let F=(C+1)*f,_=Kr().domain([-.5,6.5]).range([0,F]);if(r.showStreak){let t="#69b3a2";r.circleColor?t=r.circleColor:r.color&&(t=r.color),e.dataArea.selectAll("streakIn").data(M.filter((function(t){return t.streakIn}))).enter().append("rect").attr("x",(function(t){return _(t.col)-d-g})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",g).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})),e.dataArea.selectAll("streakOut").data(M.filter((function(t){return t.streakOut}))).enter().append("rect").attr("x",(function(t){return _(t.col)+d})).attr("y",(function(t){return _(t.row)-1.5})).attr("width",g).attr("height",3).style("fill",(function(e){return e.showCircle?r.circleColorByValue&&null!==e.scaledValue?Mr("white",t)(.8*e.scaledValue+.2):t:"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1}))}let S="#69b3a2";r.circleColor?S=r.circleColor:r.color&&(S=r.color),r.showCircle&&e.dataArea.selectAll("dot").data(M).enter().append("circle").attr("r",d).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).style("fill",(function(t){if(t.showCircle){if(!r.circleColorByValue)return S;if(null!==t.scaledValue){return Mr("white",S)(.8*t.scaledValue+.2)}return S}return"none"})).style("opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).style("cursor","default");let E=qo(window.moment(),n.dateFormat);if(r.showTodayRing){let t=e.dataArea.selectAll("todayRing").data(M.filter((function(t){return t.date===E}))).enter().append("circle").attr("r",.9*d).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("class","tracker-month-today-circle").style("cursor","default");""!==r.todayRingColor?t.style("stroke",r.todayRingColor):t.style("stroke","white")}r.showSelectedRing&&e.dataArea.selectAll("selectedRing").data(M).enter().append("circle").attr("r",d).attr("cx",(function(t){return _(t.col)})).attr("cy",(function(t){return _(t.row)})).attr("id",(function(t){return"tracker-selected-circle-"+t.date})).attr("class","tracker-month-selected-circle").style("cursor","default").style("stroke","none"),e.dataArea.selectAll("dayLabel").data(M).enter().append("text").text((function(t){return t.dayInMonth.toString()})).attr("transform",(function(t){return"translate("+_(t.col)+","+(_(t.row)+s.height/4)+")"})).style("fill-opacity",(function(t){return t.isOutOfDataRange||r.dimNotInMonth&&!t.isInThisMonth?.2:1})).attr("date",(function(t){return t.date})).attr("value",(function(t){return t.value})).attr("valueType",(function(t){return Zi[o.valueType]})).attr("class","tracker-axis-label").on("click",(function(t){vl(e,r);let n=Xt(this).attr("date");if(r.selectedDate=n,r.showSelectedRing&&e.dataArea.select("#tracker-selected-circle-"+n).style("stroke",r.selectedRingColor),r.showSelectedValue){let t=Xt(this).attr("value"),n="";if("Time"===Xt(this).attr("valueType")){n=window.moment("00:00","HH:mm",!0).add(parseFloat(t),"seconds").format("HH:mm")}else n=t;e.monitor.text(n)}})).style("cursor","pointer");let B=parseFloat(e.svg.attr("width")),N=parseFloat(e.svg.attr("height")),I=parseFloat(e.graphArea.attr("width")),L=parseFloat(e.graphArea.attr("height")),V=7*f+parseFloat(e.header.attr("height")),P=7*f;V>N&&Ko(e.svg,0,V-N),P>B&&Ko(e.svg,P-B,0),V>L&&Ko(e.graphArea,0,V-L),P>I&&Ko(e.svg,P-I,0)}function Al(t,e,n,r,a){n&&bl&&(wl(t,e=ml(e,t,n),n,r,a),xl(0,e,n,r,a))}function bl(t,e,n){if(!e||!bl)return;n.dataset;let r=0;for(let t of e.datasets)t.getQuery().usedAsXDataset||r++;if(0===r)return"No available dataset found";if(yl(e,n),null===n.selectedDataset)return"No available dataset found";let a={};a=ml(a,t,e);let i=null;if(n.initMonth){let t=window.moment(n.initMonth,"YYYY-MM",!0);if(!t.isValid())return"Invalid initMonth";i=t}else window.moment(),i=e.datasets.getDates().last();i&&(wl(t,a,e,n,i),xl(0,a,e,n,i))}function Dl(t,e,n){if(e&&Dl)return"Under construction"}function Ml(t,e,n){if(!e||!n)return;let r=parseFloat(n.dataset);e.datasets.getDatasetById(r),"horizontal"===n.orientation?e.dataAreaSize={width:250,height:24}:"vertical"===n.orientation&&(e.dataAreaSize={width:24,height:250});let a=function(t,e,n){let r={};if(!e||!n)return;let a=Xt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);r.svg=a;let i=a.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);r.graphArea=i;let o=i.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return r.dataArea=o,r}(t,e,n),i=function(t,e,n,r){if(!e||!n)return;let a=n.range,i=a[a.length-1],o=[0,i],l=n.valueUnit,u=function(t){return l&&l.endsWith("%")?Qr(0,i,7)(t)+" %":Qr(0,i,7)(t)},s=Jo(u(i),"tracker-tick-label");if("horizontal"===n.orientation){let n=Kr();n.domain(o).range([0,e.dataAreaSize.width]),t.scale=n;let r=T(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",e.dataAreaSize.width+s.width),a.attr("height",6+s.height),Ko(t.svg,+s.width,6+s.height),Ko(t.graphArea,+s.width,6+s.height)}else if("vertical"===n.orientation){let n=Kr();n.domain(o).range([e.dataAreaSize.height,0]),t.scale=n;let r=k(n);r.tickFormat(u);let a=t.dataArea.append("g").attr("id","axis").attr("x",0).attr("y",0).call(r).attr("class","tracker-axis");t.axis=a,a.selectAll("path").style("stroke","none"),a.selectAll("line"),a.selectAll("text").attr("class","tracker-tick-label"),a.attr("width",6+s.width),a.attr("height",e.dataAreaSize.width),Ko(t.svg,6+s.width,0),Ko(t.graphArea,6+s.width,0),tl(t.dataArea,6+s.width,0)}}(a,e,n);if("string"==typeof i)return i;!function(t,e,n){if(!e||!n)return;if(n.title){let r=Jo(n.title,"tracker-title-small");if("horizontal"===n.orientation){let a=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",r.width/2).attr("y",e.dataAreaSize.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=a,Ko(t.svg,r.width+6,0),Ko(t.graphArea,r.width+6,0),tl(t.dataArea,r.width+6,0)}else if("vertical"===n.orientation){let a=e.dataAreaSize.width/2;r.width>e.dataAreaSize.width&&(Ko(t.svg,r.width-e.dataAreaSize.width,0),Ko(t.graphArea,r.width-e.dataAreaSize.width,0),tl(t.dataArea,r.width/2-e.dataAreaSize.width/2,0),a=r.width/2);let i=parseFloat(t.axis.attr("width")),o=t.graphArea.append("text").text(n.title).attr("id","title").attr("x",a+i).attr("y",r.height/2).attr("height",r.height).attr("class","tracker-title-small");t.title=o,Ko(t.svg,0,r.height+6),Ko(t.graphArea,0,r.height+6),tl(t.dataArea,0,r.height+6)}}if(n.valueUnit){let r=Jo(n.valueUnit,"tracker-tick-label");if("horizontal"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",-1*(r.width+6)).attr("y",e.dataAreaSize.height+6).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a}else if("vertical"===n.orientation){let a=t.dataArea.append("text").text(n.valueUnit).attr("id","unit").attr("x",e.dataAreaSize.width/2-r.width/2).attr("y",-(r.height/2+6)).attr("height",r.height).attr("class","tracker-tick-label");t.unit=a,Ko(t.svg,0,r.height+6),Ko(t.graphArea,0,r.height+6),tl(t.dataArea,0,r.height+6)}}}(a,e,n),function(t,e,n,r){if(!e||!n)return;let a=t.scale,i=n.range,o=n.rangeColor,l=[],u=0;for(let t=0;t<i.length;t++)l.push({start:u,end:i[t],color:o[t]}),u=i[t];"horizontal"===n.orientation?t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return Math.floor(a(t.start))})).attr("y",(function(t){return 0})).attr("width",(function(t,e){return Math.ceil(a(t.end-t.start))})).attr("height",e.dataAreaSize.height).style("fill",(function(t){return t.color})):"vertical"===n.orientation&&t.dataArea.selectAll("backPanel").data(l).enter().append("rect").attr("x",(function(t,e){return 0})).attr("y",(function(t){return Math.floor(a(t.end))})).attr("width",e.dataAreaSize.width).attr("height",(function(t){return e.dataAreaSize.height-Math.floor(a(t.end-t.start))})).style("fill",(function(t){return t.color}))}(a,e,n);let o=function(t,e,n,r){let a="";if(!e||!n)return;let i=hl(n.value,e);if("string"==typeof i)return i;let o=i;if(Number.isNaN(o))return a="Invalid input value: "+i,a;let l=n.valueColor,u=t.scale;if("horizontal"===n.orientation){let n=e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",u(0)).attr("y",n).attr("width",Math.floor(u(o))).attr("height",n).style("fill",l)}else if("vertical"===n.orientation){let n=e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n).attr("y",Math.floor(u(o))).attr("width",n).attr("height",e.dataAreaSize.height-Math.floor(u(o))).style("fill",l)}}(a,e,n);if("string"==typeof o)return o;!function(t,e,n,r){if(!e||!n)return;if(!n.showMarker)return;let a=n.markerValue,i=n.markerColor,o=t.scale;if("horizontal"===n.orientation){let n=2*e.dataAreaSize.height/3;t.dataArea.append("rect").attr("x",o(a)-1.5).attr("y",n/4).attr("width",3).attr("height",n).style("fill",i)}else if("vertical"===n.orientation){let n=2*e.dataAreaSize.width/3;t.dataArea.append("rect").attr("x",n/4).attr("y",o(a)-1.5).attr("width",n).attr("height",3).style("fill",i)}}(a,e,n),function(t,e,n){let r=Xt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}(t,a,e)}function Cl(t,e,n=!0){return function(r){const a=Math.abs(e-t);let i=window.moment("00:00","HH:mm",!0).add(r,"seconds"),o=i.format("HH:mm");if(n&&a>43200){let n=(r-t)/3600%2;o=r<=t||r>=e?"":n>1?i.format("HH:mm"):""}return o}}function Tl(t,e,n){if(!e||!n)return;let r=e.datasets,a=function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let a=-1;for(let i of t)null!=(i=e(i,++a,t))&&(void 0===n?i>=i&&(n=r=i):(n>i&&(n=i),r<i&&(r=i)))}return[n,r]}(r.getDates()),i=function(){return Cr.apply(qi(xa,Aa,da,ha,sa,la,oa,ia,aa,Ta).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}().domain(a).range([0,e.dataAreaSize.width]);t.xScale=i;let o=function(t){let e,n=t.getDates().length;return e=n<=15?la:n<=60?la.every(4):n<=105?sa:n<=450?ha:n<=900?ha.every(2):da,e}(r),l=function(t){let e,n=t.getDates().length;return e=Ta(n<=15||n<=60||n<=105?"%y-%m-%d":n<=450||n<=900?"%y %b":"%Y"),e}(r),u=T(i).ticks(o).tickFormat(l),s=t.dataArea.append("g").attr("id","xAxis").attr("transform","translate(0,"+e.dataAreaSize.height+")").call(u).attr("class","tracker-axis");n.xAxisColor&&s.style("stroke",n.xAxisColor),t.xAxis=s;let f=Jo("99-99-99"),c=s.selectAll("text").attr("x",-1*f.height*Math.cos(65/180*Math.PI)).attr("y",0).attr("transform","rotate(-65)").style("text-anchor","end").attr("class","tracker-tick-label");n.xAxisColor&&c.style("fill",n.xAxisColor);let h=f.width*Math.sin(65/180*Math.PI),d=s.append("text").text(n.xAxisLabel).attr("transform","translate("+e.dataAreaSize.width/2+","+(6+h)+")").attr("class","tracker-axis-label");n.xAxisLabelColor&&d.style("fill",n.xAxisLabelColor),s.attr("height",6+h),Ko(t.svg,0,6+h),Ko(t.graphArea,0,6+h)}function kl(t,e,n,r,a){if(!e||!n)return;let i=e.datasets;if(0===a.length)return;if("left"!==r&&"right"!==r)return;let o=null,l=null,u=null,s=!1;for(let t of a){let e=i.getDatasetById(t);if(!e.getQuery().usedAsXDataset)if((null===o||e.getYMin()<o)&&(o=e.getYMin()),(null===l||e.getYMax()>l)&&(l=e.getYMax()),s=e.valueType===Zi.Time,null===u)u=s;else if(s!==u)return"Not all values in time format"}let f=null;"left"===r?f=n.yMin[0]:"right"===r&&(f=n.yMin[1]);let c=!1;"number"!=typeof f?f=o:c=!0;let h=null;"left"===r?h=n.yMax[0]:"right"===r&&(h=n.yMax[1]);let d=!1;if("number"!=typeof h?h=l:d=!0,h<f){let t=f;f=h,h=t;let e=c;c=d,d=e}let g,p,m=h-f,v=Kr();g=c?f:f-.2*m,p=d?h:h+.2*m,n.GetGraphType()===Gi.Bar&&(p<0&&(p=0),g>0&&(g=0));let w=[g,p];("left"===r&&n.reverseYAxis[0]||"right"===r&&n.reverseYAxis[1])&&(w=[p,g]),v.domain(w).range([e.dataAreaSize.height,0]),"left"===r?t.leftYScale=v:"right"===r&&(t.rightYScale=v);let x="";"left"===r?x=n.yAxisColor[0]:"right"===r&&(x=n.yAxisColor[1]);let A="";"left"===r?A=n.yAxisLabelColor[0]:"right"===r&&(A=n.yAxisLabelColor[1]);let b="";"left"===r?b=n.yAxisLabel[0]:"right"===r&&(b=n.yAxisLabel[1]);let D,M="";if("left"===r?M=n.yAxisUnit[0]:"right"===r&&(M=n.yAxisUnit[1]),"left"===r?D=k(v):"right"===r&&(D=C(2,v)),D&&s){let t=Cl(g,p),e=function(t,e){let n=[];return n=Math.abs(e-t)>18e3?y(t=3600*Math.floor(t/3600),e=3600*Math.ceil(e/3600),3600):y(t=1800*Math.floor(t/1800),e=1800*Math.ceil(e/1800),1800),n}(g,p);D.tickValues(e).tickFormat(t)}let T=t.dataArea.append("g").attr("id","yAxis").call(D).attr("class","tracker-axis");"right"==r&&T.attr("transform","translate("+e.dataAreaSize.width+" ,0)"),"left"===r?t.leftYAxis=T:"right"===r&&(t.rightYAxis=T);let F=T.selectAll("path");x&&F.style("stroke",x);let _=T.selectAll("line");x&&_.style("stroke",x);let S=T.selectAll("text").attr("class","tracker-tick-label");x&&S.style("fill",x);let E=Qr(g,p,10);s&&(E=Cl(g,p,!1));let B=Jo(E(g),"tracker-axis-label"),N=Jo(E(p),"tracker-axis-label"),I=Math.max(B.width,N.width);""!==M&&(b+=" ("+M+")");let L=Jo(b),V=T.append("text").text(b).attr("transform","rotate(-90)").attr("x",-1*e.dataAreaSize.height/2).attr("class","tracker-axis-label");"left"===r?V.attr("y",-6-I-L.height/2):V.attr("y",6+I+L.height),A&&V.style("fill",A);let P=L.height+I+6;T.attr("width",P),Ko(t.svg,P,0),Ko(t.graphArea,P,0),"left"===r&&(tl(t.dataArea,P,0),t.title&&tl(t.title,P,0))}function Fl(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showLine[r.getId()]){let e=function(t,e){var n=Xi(!0),r=null,a=xo,i=null;function o(o){var l,u,s,f=(o=vo(o)).length,c=!1;for(null==r&&(i=a(s=lr())),l=0;l<=f;++l)!(l<f&&n(u=o[l],l,o))===c&&((c=!c)?i.lineStart():i.lineEnd()),c&&i.point(+t(u,l,o),+e(u,l,o));if(s)return i=null,s+""||null}return t="function"==typeof t?t:void 0===t?Ao:Xi(t),e="function"==typeof e?e:void 0===e?bo:Xi(e),o.x=function(e){return arguments.length?(t="function"==typeof e?e:Xi(+e),o):t},o.y=function(t){return arguments.length?(e="function"==typeof t?t:Xi(+t),o):e},o.defined=function(t){return arguments.length?(n="function"==typeof t?t:Xi(!!t),o):n},o.curve=function(t){return arguments.length?(a=t,null!=r&&(i=a(r)),o):a},o.context=function(t){return arguments.length?(null==t?r=i=null:i=a(r=t),o):r},o}().defined((function(t){return null!==t.value})).x((function(e){return t.xScale(e.date)})).y((function(t){return i(t.value)})),a=t.dataArea.append("path").attr("class","tracker-line").style("stroke-width",n.lineWidth[r.getId()]);n.fillGap[r.getId()]?a.datum(Array.from(r).filter((function(t){return null!==t.value}))).attr("d",e):a.datum(r).attr("d",e),n.lineColor[r.getId()]&&a.style("stroke",n.lineColor[r.getId()])}}function _l(t,e,n,r,a){if(!e||!n)return;let i=null;if("left"===a?i=t.leftYScale:"right"===a&&(i=t.rightYScale),n.showPoint[r.getId()]){let a=t.dataArea.selectAll("dot").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("circle").attr("r",n.pointSize[r.getId()]).attr("cx",(function(e){return t.xScale(e.date)})).attr("cy",(function(t){return i(t.value)})).attr("date",(function(t){return Ta("%y-%m-%d")(t.date)})).attr("value",(function(t){if(null!==t.value)return Number.isInteger(t.value)?t.value.toFixed(0):t.value.toFixed(2)})).attr("valueType",Zi[r.valueType]).attr("class","tracker-dot");if(n.pointColor[r.getId()]&&(a.style("fill",n.pointColor[r.getId()]),n.pointBorderColor[r.getId()]&&n.pointBorderWidth[r.getId()]>0&&(a.style("stroke",n.pointBorderColor[r.getId()]),a.style("stroke-width",n.pointBorderWidth[r.getId()]))),n.allowInspectData){let n=t.svg.append("g").style("opacity",0);n.append("rect").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip");let r=n.append("text").attr("width",e.tooltipSize.width).attr("height",e.tooltipSize.height).attr("class","tracker-tooltip-label"),i=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*2),o=r.append("tspan").attr("x",4).attr("y",e.tooltipSize.height/5*4);a.on("mouseenter",(function(t){i.text("date:"+Xt(this).attr("date"));let r=Xt(this).attr("valueType"),a=Xt(this).attr("value");if("Time"===r){let t=window.moment("00:00","HH:mm",!0).add(parseFloat(a),"seconds").format("HH:mm");o.text("value:"+t)}else o.text("value:"+a);const[l,u]=function(t,e){if(t=function(t){let e;for(;e=t.sourceEvent;)t=e;return t}(t),void 0===e&&(e=t.currentTarget),e){var n=e.ownerSVGElement||e;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(e.getScreenCTM().inverse())).x,r.y]}if(e.getBoundingClientRect){var a=e.getBoundingClientRect();return[t.clientX-a.left-e.clientLeft,t.clientY-a.top-e.clientTop]}}return[t.pageX,t.pageY]}(t);l<e.dataAreaSize.width/2?n.attr("transform","translate("+(l+1.3*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"):n.attr("transform","translate("+(l-0*e.tooltipSize.width)+","+(u-1*e.tooltipSize.height)+")"),n.transition().duration(200).style("opacity",1)})).on("mouseleave",(function(){n.transition().duration(500).style("opacity",0)}))}}}function Sl(t,e,n,r,a,i,o){if(!e||!n)return;let l=e.dataAreaSize.width/r.getLength(),u=l;l-1>0&&(u=l-1),u/=o;let s=null;"left"===a?s=t.leftYScale:"right"===a&&(s=t.rightYScale);let f=t.dataArea.selectAll("bar").data(Array.from(r).filter((function(t){return null!==t.value}))).enter().append("rect").attr("x",(function(e,n){if(0===n){let n=i+1-o/2;if(n<1)return t.xScale(e.date)-l/2+i*u+n*u}return t.xScale(e.date)-l/2+i*u})).attr("y",(function(t){return s(Math.max(t.value,0))})).attr("width",(function(t,e){if(0===e){let t=i+1-o/2;return t<0?0:t<1?u*t:u}if(e===r.getLength()-1){let t=1-(i+1-o/2);return t<0?0:t<1?u*t:u}return u})).attr("height",(function(t){if(null!==t.value)return Math.abs(s(t.value)-s(0))})).attr("class","tracker-bar");n.barColor[r.getId()]&&f.style("fill",n.barColor[r.getId()])}function El(t,e,n){let r=t.svg;t.graphArea;let a=t.dataArea,i=t.title,o=t.xAxis,l=t.leftYAxis,u=t.rightYAxis,s=0;i&&(s=parseFloat(i.attr("height")));let f=parseFloat(o.attr("height")),c=0;l&&(c=parseFloat(l.attr("width")));let h=0;u&&(h=parseFloat(u.attr("width")));let d=e.datasets,g=d.getXDatasetIds(),p=d.getNames(),y=p.map((function(t){return Jo(t,"tracker-legend-label")})),v=0,w=0;for(let t=0;t<p.length;t++)g.includes(t)||y[t].width>w&&(w=y[t].width,v=t);let x=w/p[v].length,A=y[v].height,b=p.length-g.length,D=2*x,M=A,C=2*x,T=0,k=0;"vertical"===n.legendOrientation?(T=3*D+C+w,k=(b+1)*M):"horizontal"===n.legendOrientation&&(T=(2*D+C)*b+D+m(y,(function(t,e){return g.includes(e)?0:t.width})),k=M+A);let F=0,_=0;if("top"===n.legendPosition)F=c+e.dataAreaSize.width/2-T/2,_=s,Ko(r,0,k+M),tl(a,0,k+M);else if("bottom"===n.legendPosition)F=c+e.dataAreaSize.width/2-T/2,_=s+e.dataAreaSize.height+f+M,Ko(r,0,k+M);else if("left"===n.legendPosition)F=0,_=s+e.dataAreaSize.height/2-k/2,Ko(r,T+D,0),tl(a,T+D,0);else{if("right"!==n.legendPosition)return;F=e.dataAreaSize.width+c+h+D,_=s+e.dataAreaSize.height/2-k/2,Ko(r,T+D,0)}let S=t.graphArea.append("g").attr("id","legend").attr("transform","translate("+F+","+_+")"),E=S.append("rect").attr("class","tracker-legend").attr("width",T).attr("height",k);n.legendBgColor&&E.style("fill",n.legendBgColor),n.legendBorderColor&&E.style("stroke",n.legendBorderColor);let B=D,N=A,I=B+D+C,L=N;if("vertical"===n.legendOrientation){n.GetGraphType()===Gi.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",B).attr("x2",B+C).attr("y1",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M})).attr("y2",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M})).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),S.selectAll("markers").data(p).enter().append("circle").attr("cx",B+C/2).attr("cy",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M})).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetGraphType()===Gi.Bar&&S.selectAll("markers").data(p).enter().append("rect").attr("x",B).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return N+(e-=n)*M-A/2})).attr("width",C).attr("height",A).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}));let t=S.selectAll("labels").data(p).enter().append("text").attr("x",I).attr("y",(function(t,e){let n=g.filter((t=>t<e)).length;return L+(e-=n)*M})).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetGraphType()===Gi.Line?t.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetGraphType()===Gi.Bar&&t.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}else if("horizontal"===n.legendOrientation){let t=0,e=0;n.GetGraphType()===Gi.Line?(S.selectAll("markers").data(p).enter().append("line").attr("x1",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=y[n].width+D+C+D,t})).attr("x2",(function(t,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?e=B+C:e+=y[n].width+D+C+D,e})).attr("y1",N).attr("y2",N).style("stroke",(function(t,e){if(!g.includes(e))return n.lineColor[e]})),t=0,S.selectAll("markers").data(p).enter().append("circle").attr("cx",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B+C/2:t+=y[n].width+D+C+D,t})).attr("cy",N).attr("r",(function(t,e){if(!g.includes(e))return n.showPoint[e]?n.pointSize[e]:0})).style("fill",(function(t,e){if(!g.includes(e))return n.pointColor[e]}))):n.GetGraphType()===Gi.Bar&&(t=0,S.selectAll("markers").data(p.filter(((t,e)=>!g.includes(e)))).enter().append("rect").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=B:t+=y[n].width+D+C+D,t})).attr("y",N-A/2).attr("width",C).attr("height",A).style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))),t=0;let r=S.selectAll("labels").data(p).enter().append("text").attr("x",(function(e,n){let r=g.filter((t=>t<n)).length;return 0===(n-=r)?t=I:t+=y[n].width+D+C+D,t})).attr("y",L).text((function(t,e){return g.includes(e)?"":t})).style("alignment-baseline","middle").attr("class","tracker-legend-label");n.GetGraphType()===Gi.Line?r.style("fill",(function(t,e){if(!g.includes(e))return n.lineColor[e]})):n.GetGraphType()===Gi.Bar&&r.style("fill",(function(t,e){if(!g.includes(e))return n.barColor[e]}))}}function Bl(t,e,n){if(!e||!n)return;if(!n.title)return;let r=Jo(n.title,"tracker-title"),a=t.graphArea.append("text").text(n.title).attr("id","title").attr("transform","translate("+e.dataAreaSize.width/2+","+r.height/2+")").attr("height",r.height).attr("class","tracker-title");t.title=a,Ko(t.svg,0,r.height),Ko(t.graphArea,0,r.height),tl(t.dataArea,0,r.height)}function Nl(t,e,n){let r=Xt(t),a=e.svg,i=parseFloat(a.attr("width")),o=parseFloat(a.attr("height"));a.attr("width",null).attr("height",null).attr("viewBox",`0 0 ${i} ${o}`).attr("preserveAspectRatio","xMidYMid meet"),n.fitPanelWidth?r.style("width","100%"):(r.style("width",(i*n.fixedScale).toString()+"px"),r.style("height",(o*n.fixedScale).toString()+"px"))}function Il(t,e){let n={},r=Xt(t).append("svg").attr("id","svg").attr("width",e.dataAreaSize.width+e.margin.left+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.top+e.margin.bottom);n.svg=r;let a=r.append("g").attr("id","graphArea").attr("transform","translate("+e.margin.left+","+e.margin.top+")").attr("width",e.dataAreaSize.width+e.margin.right).attr("height",e.dataAreaSize.height+e.margin.bottom);n.graphArea=a;let i=a.append("g").attr("id","dataArea").attr("width",e.dataAreaSize.width).attr("height",e.dataAreaSize.height);return n.dataArea=i,n}function Ll(t,e,n){if(!e||!n)return;let r=Il(t,e);Bl(r,e,n),Tl(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=kl(r,e,n,"left",a);if("string"==typeof l)return l;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Fl(r,e,n,a,"left"),_l(r,e,n,a,"left"))}let u=kl(r,e,n,"right",i);if("string"==typeof u)return u;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Fl(r,e,n,a,"right"),_l(r,e,n,a,"right"))}n.showLegend&&El(r,e,n),Nl(t,r,e)}function Vl(t,e,n){if(!e||!n)return;let r=Il(t,e);Bl(r,e,n),Tl(r,e,n);let a=[],i=[],o=e.datasets.getXDatasetIds();for(let t=0;t<n.yAxisLocation.length;t++){if(o.includes(t))continue;let e=n.yAxisLocation[t];"left"===e.toLowerCase()?a.push(t):"right"===e.toLocaleLowerCase()&&i.push(t)}let l=kl(r,e,n,"left",a);if("string"==typeof l)return l;let u=a.length+i.length,s=0;if(r.leftYAxis&&r.leftYScale)for(let t of a){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Sl(r,e,n,a,"left",s,u),s++)}let f=kl(r,e,n,"right",i);if("string"==typeof f)return f;if(r.rightYAxis&&r.rightYScale)for(let t of i){let a=e.datasets.getDatasetById(t);a.getQuery().usedAsXDataset||(Sl(r,e,n,a,"right",s,u),s++)}n.showLegend&&El(r,e,n),Nl(t,r,e)}function Pl(t,e){Xt(t).select("#svg").remove(),Xt(t).append("div").text(e).style("background-color","white").style("margin-bottom","20px").style("padding","10px").style("color","red")}function zl(t){switch(t=t.trim().toLowerCase()){case"true":case"1":case"on":case"yes":return!0;case"false":case"0":case"off":case"no":return!1}return null}function Yl(t){return"tag"===t.toLowerCase()||"text"===t.toLowerCase()||"frontmatter"===t.toLowerCase()||"wiki"===t.toLowerCase()||"dvfield"===t.toLowerCase()||"table"===t.toLowerCase()||"filemeta"===t.toLowerCase()||"task"===t.toLowerCase()||"task.all"===t.toLowerCase()||"task.done"===t.toLowerCase()||"task.notdone"===t.toLowerCase()}function Ul(t){return"left"===t||"right"===t||"none"===t}function Ol(t){return!0}function Rl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("boolean"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let e=0;e<i.length;e++)if(e<a.length){let n=a[e].trim(),u=null;if(e>0&&(u=zl(a[e-1].trim())),""===n)i[e]=null!==u?u:r;else{let r=zl(n);if(null===r){o="Invalid inputs for "+t;break}i[e]=r,l++}}else{let t=zl(a[a.length-1].trim());i[e]=l>0&&null!==t?t:r}}else if(""===e);else{let n=zl(e);if(null!==n){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("boolean"==typeof e){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function Hl(t,e,n,r,a){let i=[],o="",l=0;for(;n>i.length;)i.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return o="Too many inputs for parameter '"+t+"'",o;if(0===e.length)return o="Empty array not allowd for "+t,o;for(let n=0;n<i.length;n++)if(n<e.length){let a=e[n],u=null;if(n>0&&(u=e[n-1].trim()),"string"==typeof a){if(a=a.trim(),""!==a){o="Invalid inputs for "+t;break}i[n]=null!==u?u:r}else{if("number"!=typeof a){o="Invalid inputs for "+t;break}i[n]=a,l++}}else{let t=e[e.length-1];i[n]=l>0?t:r}}}else if("string"==typeof e){let a=e.split(",");if(a.length>1){if(a.length>n)return o="Too many inputs for parameter '"+t+"'",o;for(let n=0;n<i.length;n++)if(n<a.length){let e=a[n].trim(),u=null;if(n>0&&(u=Qo(a[n-1].trim()).value),""===e)null!==u&&Number.isNumber(u)?i[n]=u:i[n]=r;else{let r=Qo(e).value;if(!Number.isNumber(r)){o="Invalid inputs for "+t;break}i[n]=r,l++}}else{let t=Qo(a[e.length-1].trim()).value;l>0&&Number.isNumber(t)?i[n]=t:i[n]=r}}else if(""===e);else{let n=Qo(e).value;if(Number.isNumber(n)){i[0]=n,l++;for(let t=1;t<i.length;t++)i[t]=n}else o="Invalid inputs for "+t}}else if("number"==typeof e)if(Number.isNumber(e)){i[0]=e,l++;for(let t=1;t<i.length;t++)i[t]=e}else o="Invalid inputs for "+t;else o="Invalid inputs for "+t;return a||0!==l||(o="No valid input for "+t),""!==o?o:i}function Wl(t,e,n,r,a,i){let o=[],l="",u=0;for(;n>o.length;)o.push(r);if(null==e);else if("object"==typeof e&&null!==e){if(Array.isArray(e)){if(e.length>n)return l="Too many inputs for parameter '"+t+"'",l;if(0===e.length)return l="Empty array not allowd for "+t,l;for(let n=0;n<o.length;n++)if(n<e.length){let i=e[n],s=null;if(n>0&&(s=e[n-1].trim()),"string"!=typeof i){l="Invalid inputs for "+t;break}if(i=i.trim(),""===i)o[n]=null!==s?s:r;else if(a){if(!a(i)){l="Invalid inputs for "+t;break}o[n]=i,u++}else o[n]=i,u++}else{let t=e[e.length-1].trim();o[n]=u>0?t:r}}}else if("string"==typeof e){let i=e.split(",");if(i.length>1){if(i.length>n)return l="Too many inputs for parameter '"+t+"'",l;for(let e=0;e<o.length;e++)if(e<i.length){let n=i[e].trim(),s=null;if(e>0&&(s=i[e-1].trim()),""===n)o[e]=null!==s?s:r;else if(a){if(!a(n)){l="Invalid inputs for "+t;break}o[e]=n,u++}else o[e]=n,u++}else{let t=i[i.length-1].trim();o[e]=u>0?t:r}}else if(""===e);else if(a)if(a(e)){o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}else l="Invalid inputs for "+t;else{o[0]=e,u++;for(let t=1;t<o.length;t++)o[t]=e}}else l="Invalid inputs for "+t;return i||0!==u||(l="No valid input for "+t),""!==l?l:o}function $l(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let r of e)if("string"==typeof r){let e=parseFloat(r);if(!Number.isNumber(e)){return`Parameter '${t}' accepts only numbers`}n.push(e)}}else if("string"==typeof e){let r=e.split(",");if(r.length>1)for(let e of r){let r=parseFloat(e.trim());if(Number.isNaN(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}else{if(""===e){return`Empty ${t} is not allowed.`}{let r=parseFloat(e);if(!Number.isNumber(r)){return`Parameter '${t}' accepts only numbers`}n.push(r)}}}else{if("number"!=typeof e){return`Invalid ${t}`}n.push(e)}return n}function ql(t,e){let n=[];if(null==e)return n;if("object"==typeof e){if(Array.isArray(e))for(let t of e)"string"==typeof t&&n.push(t)}else{if("string"!=typeof e){return`Invalid ${t}`}{let r=e.split(",");if(r.length>1)for(let t of r)n.push(t);else{if(""===e){return`Empty ${t} is not allowed.`}n.push(e)}}}return n}function Xl(t,e){t&&("string"==typeof t.title&&(e.title=t.title),"string"==typeof t.xAxisLabel&&(e.xAxisLabel=t.xAxisLabel),"string"==typeof t.xAxisColor&&(e.xAxisColor=t.xAxisColor),"string"==typeof t.xAxisLabelColor&&(e.xAxisLabelColor=t.xAxisLabelColor),"boolean"==typeof t.allowInspectData&&(e.allowInspectData=t.allowInspectData),"boolean"==typeof t.showLegend&&(e.showLegend=t.showLegend),"string"==typeof t.legendPosition?e.legendPosition=t.legendPosition:e.legendPosition="bottom","string"==typeof t.legendOrientation?e.legendOrientation=t.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof t.legendBgColor&&(e.legendBgColor=t.legendBgColor),"string"==typeof t.legendBorderColor&&(e.legendBorderColor=t.legendBorderColor));let n=Wl("yAxisLabel",null==t?void 0:t.yAxisLabel,2,"Value",null,!0);if("string"==typeof n)return n;if(n.length>2)return"yAxisLabel accepts not more than two values for left and right y-axes";e.yAxisLabel=n;let r=Wl("yAxisColor",null==t?void 0:t.yAxisColor,2,"",Ol,!0);if("string"==typeof r)return r;if(r.length>2)return"yAxisColor accepts not more than two values for left and right y-axes";e.yAxisColor=r;let a=Wl("yAxisLabelColor",null==t?void 0:t.yAxisLabelColor,2,"",Ol,!0);if("string"==typeof a)return a;if(a.length>2)return"yAxisLabelColor accepts not more than two values for left and right y-axes";e.yAxisLabelColor=a;let i=Wl("yAxisUnit",null==t?void 0:t.yAxisUnit,2,"",null,!0);if("string"==typeof i)return i;if(i.length>2)return"yAxisUnit accepts not more than two values for left and right y-axes";e.yAxisUnit=i;let o=Hl("yMin",null==t?void 0:t.yMin,2,null,!0);if("string"==typeof o)return o;if(o.length>2)return"yMin accepts not more than two values for left and right y-axes";e.yMin=o;let l=Hl("yMax",null==t?void 0:t.yMax,2,null,!0);if("string"==typeof l)return l;if(l.length>2)return"yMax accepts not more than two values for left and right y-axes";e.yMax=l;let u=Rl("reverseYAxis",null==t?void 0:t.reverseYAxis,2,!1,!0);return"string"==typeof u?u:u.length>2?"reverseYAxis accepts not more than two values for left and right y-axes":void(e.reverseYAxis=u)}function jl(t){let e=[];if(null!==t){const n=Object.keys(t);for(let t of n)e.push(t.toString())}return e}function Gl(t,e){let n=t.basename;return e.dateFormatPrefix&&n.startsWith(e.dateFormatPrefix)&&(n=n.slice(e.dateFormatPrefix.length)),e.dateFormatSuffix&&n.endsWith(e.dateFormatSuffix)&&(n=n.slice(0,n.length-e.dateFormatSuffix.length)),Wo(n,e.dateFormat)}function Zl(t,e,n){let r=window.moment(""),a=t.frontmatter;if(a&&Go(a,e.getTarget())){r=Wo(Go(a,e.getTarget()),n.dateFormat)}return r}function Ql(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget());let i,o=new RegExp("(^|\\s)#"+a+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=Wo(i.groups.values,n.dateFormat),r.isValid())break}return r}function Jl(t,e,n){let r,a=window.moment(""),i=e.getTarget(),o=new RegExp(i,"gm");for(;r=o.exec(t);)if(void 0!==r.groups&&void 0!==r.groups.value){if(a=Wo(r.groups.value.trim(),n.dateFormat),a.isValid())break}return a}function Kl(t,e,n){let r=window.moment(""),a=e.getTarget();e.getParentTarget()&&(a=e.getParentTarget()),a=a.replace("-","[\\s\\-]");let i,o=new RegExp("(^| |\\t)\\*{0,2}"+a+"\\*{0,2}(::[ |\\t]*(?<values>[\\d\\.\\/\\-\\w,@; \\t:]*))(\\r\\?\\n|\\r|$)","gm");for(;i=o.exec(t);)if(void 0!==i.groups&&void 0!==i.groups.values){if(r=Wo(i.groups.values.trim(),n.dateFormat),r.isValid())break}return r}function tu(e,n,r){let a=window.moment("");if(e&&e instanceof t.TFile){let t=n.getTarget();if("cDate"===t){a=Xo(e.stat.ctime,r.dateFormat)}else if("mDate"===t){a=Xo(e.stat.mtime,r.dateFormat)}}return a}function eu(t,e,n){let r=window.moment(""),a=e.getType(),i=e.getTarget();i=a===ji.Task?"\\[[\\sx]\\]\\s"+i:a===ji.TaskDone?"\\[x\\]\\s"+i:a===ji.TaskNotDone?"\\[\\s\\]\\s"+i:"\\[[\\sx]\\]\\s"+i;let o,l=new RegExp(i,"gm");for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.value){if(r=Wo(o.groups.value.trim(),n.dateFormat),r.isValid())break}return r}function nu(t,e,n,r){if(t.has(e)){t.get(e).push({query:n,value:r})}else{let a=new Array;a.push({query:n,value:r}),t.set(e,a)}}function ru(e,n,r,a,i,o){if(e&&e instanceof t.TFile){let t=r.getTarget(),l=o.get(a.xDataset[r.getId()]);if("cDate"===t){let t=e.stat.ctime;r.valueType=Zi.Date,r.addNumTargets(),nu(i,l,r,t)}else if("mDate"===t){let t=e.stat.mtime;r.valueType=Zi.Date,r.addNumTargets(),nu(i,l,r,t)}else if("size"===t){let t=e.stat.size;r.addNumTargets(),nu(i,l,r,t)}else if("numWords"===t){nu(i,l,r,function(t){t=el(t);var e=new RegExp(["(?:[0-9]+(?:(?:,|\\.)[0-9]+)*|[\\-"+/A-Za-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC/.source+"])+",/[\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u4E00-\u9FD5]{1}/.source].join("|"),"g");return(t.match(e)||[]).length}(n))}else if("numChars"===t){let t=n.length;r.addNumTargets(),nu(i,l,r,t)}else if("numSentences"===t){let t=function(t){return(((t=el(t))||"").match(/[^.。!！?？\s][^.。!！?？]*(?:[.!?](?!['‘’"“”「」『』]?\s|$)[^.。!！?？]*)*[.。!！?？]?['’"”」』]?(?=\s||$)/gm)||[]).length}(n);r.addNumTargets(),nu(i,l,r,t)}}}const au={folder:"/",dateFormat:"YYYY-MM-DD"};class iu extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){let{containerEl:n}=this;n.empty(),new t.Setting(n).setName("Default folder location").setDesc("Files in this folder will be parsed and used as input data of the tracker plugin.\nYou can also override it using 'folder' argument int the tracker codeblock.").addText((t=>t.setPlaceholder("Folder Path").setValue(this.plugin.settings.folder).onChange((t=>e(this,void 0,void 0,(function*(){this.plugin.settings.folder=t,yield this.plugin.saveSettings()})))))),new t.Setting(n).setName("Default date format").setDesc("This format is used to parse the date in your diary title.\nYou can also override it using 'date-format' argument in the tracker codeblock.").addText((t=>t.setPlaceholder("YYYY-MM-DD").setValue(this.plugin.settings.dateFormat).onChange((t=>e(this,void 0,void 0,(function*(){this.plugin.settings.dateFormat=t,yield this.plugin.saveSettings()}))))))}}class ou extends t.Plugin{onload(){return e(this,void 0,void 0,(function*(){console.log("loading obsidian-tracker plugin"),yield this.loadSettings(),this.addSettingTab(new iu(this.app,this)),this.registerMarkdownCodeBlockProcessor("tracker",this.postprocessor.bind(this)),this.addCommand({id:"add-line-chart-tracker",name:"Add Line Chart Tracker",callback:()=>this.addCodeBlock(Gi.Line)}),this.addCommand({id:"add-bar-chart-tracker",name:"Add Bar Chart Tracker",callback:()=>this.addCodeBlock(Gi.Bar)}),this.addCommand({id:"add-summary-tracker",name:"Add Summary Tracker",callback:()=>this.addCodeBlock(Gi.Summary)})}))}loadSettings(){return e(this,void 0,void 0,(function*(){this.settings=Object.assign({},au,yield this.loadData())}))}saveSettings(){return e(this,void 0,void 0,(function*(){yield this.saveData(this.settings)}))}onunload(){console.log("unloading obsidian-tracker plugin")}getFilesInFolder(e,n=!0){let r=[];for(let a of e.children)a instanceof t.TFile?"md"===a.extension&&r.push(a):a instanceof t.TFolder&&n&&(r=r.concat(this.getFilesInFolder(a)));return r}getFiles(e,n=!0){let r=[],a=this.app.vault.getAbstractFileByPath(t.normalizePath(e));return a&&a instanceof t.TFolder&&(r=r.concat(this.getFilesInFolder(a))),r}postprocessor(n,r,a){return e(this,void 0,void 0,(function*(){const a=document.createElement("div");let i=function(e,n){let r;try{r=t.parseYaml(e)}catch(t){let e="Error parsing YAML";return console.log(t),e}if(!r)return"Error parsing YAML";let a=jl(r),i="";if(!a.includes("searchTarget"))return"Parameter 'searchTarget' not found in YAML";let o=[];if("object"==typeof r.searchTarget&&null!==r.searchTarget){if(Array.isArray(r.searchTarget))for(let t of r.searchTarget)if("string"==typeof t){if(""===t){i="Empty search target is not allowed.";break}o.push(t)}}else if("string"==typeof r.searchTarget){let t=r.searchTarget.split(",");if(t.length>1)for(let e of t){if(e=e.trim(),""===e){i="Empty search target is not allowed.";break}o.push(e)}else""===r.searchTarget?i="Empty search target is not allowed.":o.push(r.searchTarget)}else i="Invalid search target (searchTarget)";if(""!==i)return i;let l=o.length;if(!a.includes("searchType"))return"Parameter 'searchType' not found in YAML";let u=[],s=Wl("searchType",r.searchType,l,"",Yl,!1);if("string"==typeof s)return s;for(let t of s)switch(t.toLowerCase()){case"tag":u.push(ji.Tag);break;case"frontmatter":u.push(ji.Frontmatter);break;case"wiki":u.push(ji.Wiki);break;case"text":u.push(ji.Text);break;case"dvfield":u.push(ji.dvField);break;case"table":u.push(ji.Table);break;case"filemeta":u.push(ji.FileMeta);break;case"task":case"task.all":u.push(ji.Task);break;case"task.done":u.push(ji.TaskDone);break;case"task.notdone":u.push(ji.TaskNotDone)}if(u.includes(ji.Table)&&u.filter((t=>t!==ji.Table)).length>0)return"searchType 'table' doestn't work with other types for now";let f=[],c=Wl("separator",r.separator,l,"/",null,!0);if("string"==typeof c)return c;f=c.map((t=>"comma"===t?",":t));let h=Hl("xDataset",r.xDataset,l,-1,!0);if("string"==typeof h)return h;let d=h.map((t=>t<0||t>=l?-1:t)),g=[];for(let t=0;t<o.length;t++){let e=new To(g.length,u[t],o[t]);e.setSeparator(f[t]),d.includes(t)&&(e.usedAsXDataset=!0),g.push(e)}let p=new _o(g),y=jl(p),m=["searchType","searchTarget","separator"],v=[],w=[],x=[],A=[],b=[],D=[],M=[];for(let t of a)/^line[0-9]*$/.test(t)&&(v.push(t),m.push(t)),/^bar[0-9]*$/.test(t)&&(w.push(t),m.push(t)),/^pie[0-9]*$/.test(t)&&(x.push(t),m.push(t)),/^summary[0-9]*$/.test(t)&&(A.push(t),m.push(t)),/^bullet[0-9]*$/.test(t)&&(M.push(t),m.push(t)),/^month[0-9]*$/.test(t)&&(b.push(t),m.push(t)),/^heatmap[0-9]*$/.test(t)&&(D.push(t),m.push(t));let C=[];for(let t of a)if(/^dataset[0-9]*$/.test(t)){let e=-1,n=t.replace("dataset","");if(e=""===n?0:parseFloat(n),g.some((t=>t.getId()===e)))return i="Duplicated dataset id for key '"+t+"'",i;C.push(t),m.push(t)}for(let t of a)if(!y.includes(t)&&!m.includes(t))return i="'"+t+"' is not an available key",i;if(0===v.length+w.length+x.length+A.length+M.length+b.length+D.length)return"No output parameter provided, please place line, bar, pie, month, bullet, or summary.";"string"==typeof r.folder?""===r.folder?p.folder=n.settings.folder:p.folder=r.folder:p.folder=n.settings.folder;let T=n.app.vault.getAbstractFileByPath(t.normalizePath(p.folder));if(!(T&&T instanceof t.TFolder))return"Folder '"+p.folder+"' doesn't exist";const k=r.dateFormat;if("string"==typeof r.dateFormat?""===r.dateFormat?p.dateFormat=n.settings.dateFormat:p.dateFormat=k:p.dateFormat=n.settings.dateFormat,"string"==typeof r.dateFormatPrefix&&(p.dateFormatPrefix=r.dateFormatPrefix),"string"==typeof r.dateFormatSuffix&&(p.dateFormatSuffix=r.dateFormatSuffix),"string"==typeof r.startDate){let t=r.startDate;p.dateFormatPrefix&&t.startsWith(p.dateFormatPrefix)&&(t=t.slice(p.dateFormatPrefix.length)),p.dateFormatSuffix&&t.endsWith(p.dateFormatSuffix)&&(t=t.slice(0,t.length-p.dateFormatSuffix.length));let e=null,n=!1;if(e=$o(t,p.dateFormat),e?n=!0:(e=Wo(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid startDate, the format of startDate may not match your dateFormat "+p.dateFormat;p.startDate=e}if("string"==typeof r.endDate){let t=r.endDate;p.dateFormatPrefix&&t.startsWith(p.dateFormatPrefix)&&(t=t.slice(p.dateFormatPrefix.length)),p.dateFormatSuffix&&t.endsWith(p.dateFormatSuffix)&&(t=t.slice(0,t.length-p.dateFormatSuffix.length));let e=null,n=!1;if(e=$o(t,p.dateFormat),e?n=!0:(e=Wo(t,p.dateFormat),e.isValid()&&(n=!0)),!n||null===e)return"Invalid endDate, the format of endDate may not match your dateFormat "+p.dateFormat;p.endDate=e}if(null!==p.startDate&&p.startDate.isValid()&&null!==p.endDate&&p.endDate.isValid()&&p.endDate<p.startDate)return"Invalid date range (startDate larger than endDate)";p.xDataset=d;let F=Wl("datasetName",r.datasetName,l,"untitled",null,!0);if("string"==typeof F)return F;let _=0;for(let t=0;t<F.length;t++)p.xDataset.includes(t)||"untitled"===F[t]&&(F[t]="untitled"+_.toString(),_++);if(new Set(F).size!==F.length)return"Not enough dataset names or duplicated names";p.datasetName=F;let S=Hl("constValue",r.constValue,l,1,!0);if("string"==typeof S)return S;p.constValue=S;let E=Rl("ignoreAttachedValue",r.ignoreAttachedValue,l,!1,!0);if("string"==typeof E)return E;p.ignoreAttachedValue=E;let B=Rl("ignoreZeroValue",r.ignoreZeroValue,l,!1,!0);if("string"==typeof B)return B;p.ignoreZeroValue=B;let N=Rl("accum",r.accum,l,!1,!0);if("string"==typeof N)return N;p.accum=N;let I=Hl("penalty",r.penalty,l,null,!0);if("string"==typeof I)return I;p.penalty=I;let L=Hl("valueShift",r.valueShift,l,0,!0);if("string"==typeof L)return L;p.valueShift=L,"number"==typeof r.fixedScale&&(p.fixedScale=r.fixedScale),"boolean"==typeof r.fitPanelWidth&&(p.fitPanelWidth=r.fitPanelWidth);let V=Hl("margin",r.margin,4,10,!0);if("string"==typeof V)return V;if(V.length>4)return"margin accepts not more than four values for top, right, bottom, and left margins.";p.margin=new Uo(V[0],V[1],V[2],V[3]);for(let t of C){let e=new So,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let l=-1,u=t.replace("dataset","");l=""===u?0:parseFloat(u),e.id=l,"string"==typeof(null==n?void 0:n.name)&&(e.name=n.name);let s=ql("xData",null==n?void 0:n.xData);if("string"==typeof s)return s;e.xData=s;let f=e.xData.length,c=ql("yData",null==n?void 0:n.yData);if("string"==typeof c)return c;if(e.yData=c,e.yData.length!==f)return"Number of elements in xData and yData not matched";p.customDataset.push(e)}for(let t of v){let e=new Bo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=Xl(n,e);if("string"==typeof u)return u;let s=Wl("lineColor",null==n?void 0:n.lineColor,l,"",Ol,!0);if("string"==typeof s)return s;e.lineColor=s;let f=Hl("lineWidth",null==n?void 0:n.lineWidth,l,1.5,!0);if("string"==typeof f)return f;e.lineWidth=f;let c=Rl("showLine",null==n?void 0:n.showLine,l,!0,!0);if("string"==typeof c)return c;e.showLine=c;let h=Rl("showPoint",null==n?void 0:n.showPoint,l,!0,!0);if("string"==typeof h)return h;e.showPoint=h;let d=Wl("pointColor",null==n?void 0:n.pointColor,l,"#69b3a2",Ol,!0);if("string"==typeof d)return d;e.pointColor=d;let g=Wl("pointBorderColor",null==n?void 0:n.pointBorderColor,l,"#69b3a2",Ol,!0);if("string"==typeof g)return g;e.pointBorderColor=g;let y=Hl("pointBorderWidth",null==n?void 0:n.pointBorderWidth,l,0,!0);if("string"==typeof y)return y;e.pointBorderWidth=y;let m=Hl("pointSize",null==n?void 0:n.pointSize,l,3,!0);if("string"==typeof m)return m;e.pointSize=m;let v=Rl("fillGap",null==n?void 0:n.fillGap,l,!1,!0);if("string"==typeof v)return v;e.fillGap=v;let w=Wl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",Ul,!0);if("string"==typeof w)return w;e.yAxisLocation=w,p.line.push(e)}for(let t of w){let e=new No,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let u=Xl(n,e);if("string"==typeof u)return u;let s=Wl("barColor",null==n?void 0:n.barColor,l,"",Ol,!0);if("string"==typeof s)return s;e.barColor=s;let f=Wl("yAxisLocation",null==n?void 0:n.yAxisLocation,l,"left",Ul,!0);if("string"==typeof f)return f;e.yAxisLocation=f,p.bar.push(e)}for(let t of x){let e=new Io,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title);let l=ql("data",null==n?void 0:n.data);if("string"==typeof l)return l;e.data=l;let u=e.data.length,s=Wl("dataColor",null==n?void 0:n.dataColor,u,"none",Ol,!0);if("string"==typeof s)return s;e.dataColor=s;let f=Wl("dataName",null==n?void 0:n.dataName,u,"",null,!0);if("string"==typeof f)return f;e.dataName=f;let c=Wl("label",null==n?void 0:n.label,u,"",null,!0);if("string"==typeof c)return c;e.label=c,"number"==typeof(null==n?void 0:n.hideLabelLessThan)&&(e.hideLabelLessThan=n.hideLabelLessThan);let h=Wl("extLabel",null==n?void 0:n.extLabel,u,"",null,!0);if("string"==typeof h)return h;e.extLabel=h,"boolean"==typeof(null==n?void 0:n.showExtLabelOnlyIfNoLabel)&&(e.showExtLabelOnlyIfNoLabel=n.showExtLabelOnlyIfNoLabel),"number"==typeof(null==n?void 0:n.ratioInnerRadius)&&(e.ratioInnerRadius=n.ratioInnerRadius),"boolean"==typeof(null==n?void 0:n.showLegend)&&(e.showLegend=n.showLegend),"string"==typeof(null==n?void 0:n.legendPosition)?e.legendPosition=n.legendPosition:e.legendPosition="right","string"==typeof(null==n?void 0:n.legendOrientation)?e.legendOrientation=n.legendOrientation:"top"===e.legendPosition||"bottom"===e.legendPosition?e.legendOrientation="horizontal":"left"===e.legendPosition||"right"===e.legendPosition?e.legendOrientation="vertical":e.legendOrientation="horizontal","string"==typeof(null==n?void 0:n.legendBgColor)&&(e.legendBgColor=n.legendBgColor),"string"==typeof(null==n?void 0:n.legendBorderColor)&&(e.legendBorderColor=n.legendBorderColor),p.pie.push(e)}for(let t of A){let e=new Lo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.template)&&(e.template=n.template),"string"==typeof(null==n?void 0:n.style)&&(e.style=n.style),p.summary.push(e)}for(let t of b){let e=new Vo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;let l=$l("dataset",null==n?void 0:n.dataset);if("string"==typeof l)return l;if(0===l.length)for(let t of g)l.push(t.getId());e.dataset=l;let u=e.dataset.length;"string"==typeof(null==n?void 0:n.startWeekOn)&&(e.startWeekOn=n.startWeekOn),"boolean"==typeof(null==n?void 0:n.showCircle)&&(e.showCircle=n.showCircle);let s=$l("threshold",null==n?void 0:n.threshold);if("string"==typeof s)return s;if(e.threshold=s,0===e.threshold.length)for(let t=0;t<u;t++)e.threshold.push(0);if(e.threshold.length!==e.dataset.length)return"The number of inputs of threshold and dataset not matched";let f=$l("yMin",null==n?void 0:n.yMin);if("string"==typeof f)return f;if(e.yMin=f,0===e.yMin.length)for(let t=0;t<u;t++)e.yMin.push(null);if(e.yMin.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";let c=$l("yMax",null==n?void 0:n.yMax);if("string"==typeof c)return c;if(e.yMax=c,0===e.yMax.length)for(let t=0;t<u;t++)e.yMax.push(null);if(e.yMax.length!==e.dataset.length)return"The number of inputs of yMin and dataset not matched";"string"==typeof(null==n?void 0:n.color)&&(e.color=n.color),"boolean"==typeof(null==n?void 0:n.dimNotInMonth)&&(e.dimNotInMonth=n.dimNotInMonth),"boolean"==typeof(null==n?void 0:n.showStreak)&&(e.showStreak=n.showStreak),"boolean"==typeof(null==n?void 0:n.showTodayRing)&&(e.showTodayRing=n.showTodayRing),"boolean"==typeof(null==n?void 0:n.showSelectedValue)&&(e.showSelectedValue=n.showSelectedValue),"boolean"==typeof(null==n?void 0:n.showSelectedRing)&&(e.showSelectedRing=n.showSelectedRing),"string"==typeof(null==n?void 0:n.circleColor)&&(e.circleColor=n.circleColor),"boolean"==typeof(null==n?void 0:n.circleColorByValue)&&(e.circleColorByValue=n.circleColorByValue),"string"==typeof(null==n?void 0:n.headerYearColor)&&(e.headerYearColor=n.headerYearColor),"string"==typeof(null==n?void 0:n.headerMonthColor)&&(e.headerMonthColor=n.headerMonthColor),"string"==typeof(null==n?void 0:n.dividingLineColor)&&(e.dividingLineColor=n.dividingLineColor),"string"==typeof(null==n?void 0:n.todayRingColor)&&(e.todayRingColor=n.todayRingColor),"string"==typeof(null==n?void 0:n.selectedRingColor)&&(e.selectedRingColor=n.selectedRingColor),"string"==typeof(null==n?void 0:n.initMonth)&&(e.initMonth=n.initMonth),p.month.push(e)}for(let t of D){let e=new Po,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;p.heatmap.push(e)}for(let t of M){let e=new zo,n=r[t],a=jl(e),o=jl(n);for(let t of o)if(!a.includes(t))return i="'"+t+"' is not an available key",i;"string"==typeof(null==n?void 0:n.title)&&(e.title=n.title),"string"==typeof(null==n?void 0:n.dataset)&&(e.dataset=n.dataset),"string"==typeof(null==n?void 0:n.orientation)&&(e.orientation=n.orientation);let l=$l("range",null==n?void 0:n.range);if("string"==typeof l)return l;let u=l;if(1===u.length){if(u[0]<0)return i="Negative range value is not allowed",i}else{if(!(u.length>1))return i="Empty range is not allowed",i;{let t=u[0];if(t<0)return i="Negative range value is not allowed",i;for(let e=1;e<u.length;e++)if(u[e]<=t)return i="Values in parameter 'range' should be monotonically increasing",i}}e.range=u;let s=u.length,f=Wl("rangeColor",null==n?void 0:n.rangeColor,s,"",Ol,!0);if("string"==typeof f)return f;e.rangeColor=f,"string"==typeof(null==n?void 0:n.value)?e.value=n.value:"number"==typeof(null==n?void 0:n.value)&&(e.value=n.value.toString()),"string"==typeof(null==n?void 0:n.valueUnit)&&(e.valueUnit=n.valueUnit),"string"==typeof(null==n?void 0:n.valueColor)&&(e.valueColor=n.valueColor),"boolean"==typeof(null==n?void 0:n.showMarker)&&(e.showMarker=n.showMarker),"number"==typeof(null==n?void 0:n.markerValue)&&(e.markerValue=n.markerValue),"string"==typeof(null==n?void 0:n.markerColor)&&(e.markerColor=n.markerColor),p.bullet.push(e)}return p}(n.trim(),this);if("string"==typeof i){return Pl(a,i),void r.appendChild(a)}let o,l=i;try{o=this.getFiles(l.folder)}catch(t){return Pl(a,t.message),void r.appendChild(a)}let u=window.moment(""),s=window.moment(""),f=0,c=new Map;const h=o.map((t=>e(this,void 0,void 0,(function*(){let n=null;l.queries.some((t=>{let e=t.getType();return t.getTarget(),e===ji.Frontmatter||e===ji.Tag||e===ji.Wiki}))&&(n=this.app.metadataCache.getFileCache(t));let r=null;l.queries.some((t=>{let e=t.getType(),n=t.getTarget();return e===ji.Tag||e===ji.Text||e===ji.dvField||e===ji.Task||e===ji.TaskDone||e===ji.TaskNotDone||e===ji.FileMeta&&("numWords"===n||"numChars"===n||"numSentences"===n)}))&&(r=yield this.app.vault.adapter.read(t.path));let a=new Map,i=!1;for(let e of l.xDataset)if(!a.has(e)){let o=window.moment("");if(-1===e)o=Gl(t,l);else{let a=l.queries[e];switch(a.getType()){case ji.Frontmatter:o=Zl(n,a,l);break;case ji.Tag:o=Ql(r,a,l);break;case ji.Text:o=Jl(r,a,l);break;case ji.dvField:o=Kl(r,a,l);break;case ji.FileMeta:o=tu(t,a,l);break;case ji.Task:case ji.TaskDone:case ji.TaskNotDone:o=eu(r,a,l)}}o.isValid()?(null!==l.startDate&&o<l.startDate&&(i=!0),null!==l.endDate&&o>l.endDate&&(i=!0)):i=!0,i||(a.set(e,qo(o,l.dateFormat)),f++,1==f?(u=o.clone(),s=o.clone()):(o<u&&(u=o.clone()),o>s&&(s=o.clone())))}if(i)return;const o=l.queries.filter((t=>t.getType()!==ji.Table&&!t.usedAsXDataset)).map((i=>e(this,void 0,void 0,(function*(){n&&i.getType()===ji.Tag&&function(t,e,n,r,a){let i=t.frontmatter,o=[];if(i&&i.tags){let t=0,l=!1;Array.isArray(i.tags)?o=o.concat(i.tags):o.push(i.tags);for(let i of o){if(i===e.getTarget())t+=n.constValue[e.getId()],l=!0,e.addNumTargets();else{if(!i.startsWith(e.getTarget()+"/"))continue;t+=n.constValue[e.getId()],l=!0,e.addNumTargets()}let o=null;l&&(o=t),nu(r,a.get(n.xDataset[e.getId()]),e,o)}}}(n,i,l,c,a),n&&i.getType()===ji.Frontmatter&&"tags"!==i.getTarget()&&function(t,e,n,r,a){let i=t.frontmatter;if(i)if(Go(i,e.getTarget())){let t=Qo(Go(i,e.getTarget()));null!==t.value&&(t.type===Zi.Time&&(e.valueType=Zi.Time),e.addNumTargets(),nu(r,a.get(n.xDataset[e.getId()]),e,t.value))}else if(e.getParentTarget()&&Go(i,e.getParentTarget())){let t=Go(i,e.getParentTarget()),o=null;if(Array.isArray(t)?o=t.map((t=>t.toString())):"string"==typeof t&&(o=t.split(e.getSeparator())),o&&o.length>e.getAccessor()&&e.getAccessor()>=0){let t=Qo(o[e.getAccessor()].trim());null!==t.value&&(t.type===Zi.Time&&(e.valueType=Zi.Time),e.addNumTargets(),nu(r,a.get(n.xDataset[e.getId()]),e,t.value))}}}(n,i,l,c,a),n&&i.getType()===ji.Wiki&&function(t,e,n,r,a){let i=t.links;if(!i)return;let o=0,l=!1;for(let t of i)t.link===e.getTarget()&&(l=!0,o+=n.constValue[e.getId()],e.addNumTargets());let u=null;l&&(u=o),nu(r,a.get(n.xDataset[e.getId()]),e,u)}(n,i,l,c,a),r&&i.getType()===ji.Tag&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i.length>1&&i.startsWith("#")&&(i=i.substring(1));let o,l=new RegExp("(^|\\s)#"+i+"(\\/[\\w-]+)*(:(?<values>[\\d\\.\\/-]*)[a-zA-Z]*)?([\\.!,\\?;~-]*)?(\\s|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===o.groups||void 0===o.groups.values)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else{let t=o.groups.values.split(e.getSeparator());if(!t)continue;if(1===t.length){let r=Qo(t[0].trim());null!==r.value&&(r.type===Zi.Time?(u=r.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=Qo(t[e.getAccessor()].trim());null!==n.value&&(n.type===Zi.Time?(u=n.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}let f=null;s&&(f=u),nu(r,a.get(n.xDataset[e.getId()]),e,f)}(r,i,l,c,a),r&&i.getType()===ji.Text&&function(t,e,n,r,a){let i,o=e.getTarget(),l=new RegExp(o,"gm"),u=0,s=!1;for(;i=l.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===i.groups)u+=n.constValue[e.getId()],s=!0,e.addNumTargets();else if(void 0!==i.groups.value){let t=parseFloat(i.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(u+=t,s=!0,e.addNumTargets())}s&&nu(r,a.get(n.xDataset[e.getId()]),e,u)}(r,i,l,c,a),i.getType()===ji.FileMeta&&ru(t,r,i,l,c,a),r&&i.getType()===ji.dvField&&function(t,e,n,r,a){let i=e.getTarget();e.getParentTarget()&&(i=e.getParentTarget()),i=i.replace("-","[\\s\\-]");let o,l=new RegExp("(^| |\\t)\\*{0,2}"+i+"\\*{0,2}(::[ |\\t]*(?<values>[\\d\\.\\/\\-\\w,@; \\t:]*))(\\r\\?\\n|\\r|$)","gm"),u=0,s=!1;for(;o=l.exec(t);)if(void 0!==o.groups&&void 0!==o.groups.values){let t=o.groups.values.trim().split(e.getSeparator());if(!t)continue;if(1===t.length){let r=Qo(t[0]);null!==r.value&&(r.type===Zi.Time?(u=r.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):n.ignoreZeroValue[e.getId()]&&0===r.value||(u+=r.value,s=!0,e.addNumTargets()))}else if(t.length>e.getAccessor()&&e.getAccessor()>=0){let n=Qo(t[e.getAccessor()].trim());null!==n.value&&(n.type===Zi.Time?(u=n.value,s=!0,e.valueType=Zi.Time,e.addNumTargets()):(u+=n.value,s=!0,e.addNumTargets()))}}else u+=n.constValue[e.getId()],s=!0,e.addNumTargets();let f=null;s&&(f=u),nu(r,a.get(n.xDataset[e.getId()]),e,f)}(r,i,l,c,a),!r||i.getType()!==ji.Task&&i.getType()!==ji.TaskDone&&i.getType()!==ji.TaskNotDone||function(t,e,n,r,a){let i=e.getType(),o=e.getTarget();o=i===ji.Task?"\\[[\\sx]\\]\\s"+o:i===ji.TaskDone?"\\[x\\]\\s"+o:i===ji.TaskNotDone?"\\[\\s\\]\\s"+o:"\\[[\\sx]\\]\\s"+o;let l,u=new RegExp(o,"gm"),s=0,f=!1;for(;l=u.exec(t);)if(n.ignoreAttachedValue[e.getId()]||void 0===l.groups)s+=n.constValue[e.getId()],f=!0,e.addNumTargets();else if(void 0!==l.groups.value){let t=parseFloat(l.groups.value);Number.isNaN(t)||n.ignoreZeroValue[e.getId()]&&0===t||(s+=t,f=!0,e.addNumTargets())}f&&nu(r,a.get(n.xDataset[e.getId()]),e,s)}(r,i,l,c,a)}))));yield Promise.all(o)}))));yield Promise.all(h);let d=l.queries.filter((t=>t.getType()===ji.Table)),g=[],p=!1;for(let e of d){let n=e.getParentTarget(),r=this.app.vault.getAbstractFileByPath(t.normalizePath(n+".md"));if(!(r&&r instanceof t.TFile)){p=!0;break}let a=e.getAccessor(),i=e.usedAsXDataset,o=g.find((t=>t.filePath===n&&t.tableIndex===a));if(o)i?o.xDataset=e:o.yDatasets.push(e);else{let t=new Ro(n,a);i?t.xDataset=e:t.yDatasets.push(e),g.push(t)}}if(p){return Pl(a,"File containing tables not found"),void r.appendChild(a)}for(let e of g){let n=e.xDataset;if(!n)continue;let i=e.yDatasets,o=n.getParentTarget(),h=n.getAccessor(),d="";o+=".md";let g=this.app.vault.getAbstractFileByPath(t.normalizePath(o));if(!(g&&g instanceof t.TFile))continue;{f++;let t,e=yield this.app.vault.adapter.read(g.path),n=new RegExp("((\\r?\\n){2}|^)([^\\r\\n]*\\|[^\\r\\n]*(\\r?\\n)?)+(?=(\\r?\\n){2}|$)","gm"),r=0;for(;t=n.exec(e);){if(r===h){d=t[0];break}r++}}let p=d.split(/\r?\n/);p=p.filter((t=>""!==t));let y=0,m=0;if(p.length>=2){let t=p.shift().trim();t=Zo(t,"|"),y=t.split("|").length;let e=p.shift().trim();e=Zo(e,"|");let n=e.split("|");for(let t of n)if(!t.includes("-"))break;m=p.length}if(0==m)continue;let v=n.getAccessor(1);if(v>=y)continue;let w=[];for(let t of p){let e=Zo(t.trim(),"|").split("|");if(v<e.length){let t=Wo(e[v].trim(),l.dateFormat);t.isValid()?(w.push(t),u.isValid()||s.isValid()?(t<u&&(u=t.clone()),t>s&&(s=t.clone())):(u=t.clone(),s=t.clone())):w.push(null)}else w.push(null)}if(w.every((t=>null===t))){return Pl(a,"No valid X value found"),void r.appendChild(a)}for(let t of i){let e=t.getAccessor(1);if(e>=y)continue;let n=0;for(let r of p){let a=Zo(r.trim(),"|").split("|");if(e<a.length){let r=a[e].trim().split(t.getSeparator());if(!r)continue;if(1===r.length){let e=parseFloat(r[0]);Number.isNumber(e)&&n<w.length&&w[n]&&nu(c,qo(w[n],l.dateFormat),t,e)}else if(r.length>t.getAccessor(2)&&t.getAccessor(2)>=0){let e=null,a=r[t.getAccessor(2)].trim();e=parseFloat(a),Number.isNumber(e)&&n<w.length&&w[n]&&nu(c,qo(w[n],l.dateFormat),t,e)}}n++}}}if(0===f){return Pl(a,"No notes found under the given search condition"),void r.appendChild(a)}if(!u.isValid()||!s.isValid()){return Pl(a,"Invalid date range"),void r.appendChild(a)}if(null===l.startDate&&null===l.endDate)l.startDate=u.clone(),l.endDate=s.clone();else if(null!==l.startDate&&null===l.endDate){if(!(l.startDate<s)){return Pl(a,"Invalid date range"),void r.appendChild(a)}l.endDate=s.clone()}else if(null!==l.endDate&&null===l.startDate){if(!(l.endDate>u)){return Pl(a,"Invalid date range"),void r.appendChild(a)}l.startDate=u.clone()}else if(l.startDate<u&&l.endDate<u||l.startDate>s&&l.endDate>s){return Pl(a,"Invalid date range"),void r.appendChild(a)}let y=new Fo(l.startDate,l.endDate);for(let t of l.queries){let e=y.createDataset(t,l);e.addNumTargets(t.getNumTargets());for(let n=l.startDate.clone();n<=l.endDate;n.add(1,"days"))if(c.has(qo(n,l.dateFormat))){let r=c.get(qo(n,l.dateFormat)).filter((function(e){return e.query.equalTo(t)}));if(r.length>0){let t=null;for(let e=0;e<r.length;e++){let n=r[e].value;Number.isNumber(n)&&!Number.isNaN(n)&&(null===t?t=n:t+=n)}null!==t&&e.setValue(n,t)}}}l.datasets=y;let m=function(t,e){for(let t of e.datasets)t.getQuery().usedAsXDataset||(null!==e.valueShift[t.getId()]&&t.shift(e.valueShift[t.getId()]),null!==e.penalty[t.getId()]&&t.setPenalty(e.penalty[t.getId()]),e.accum[t.getId()]&&t.accumulateValues());for(let n of e.line){let r=Ll(t,e,n);if("string"==typeof r)return r}for(let n of e.bar){let r=Vl(t,e,n);if("string"==typeof r)return r}for(let n of e.pie){let r=gl(t,e,n);if("string"==typeof r)return r}for(let n of e.summary){let r=pl(t,e,n);if("string"==typeof r)return r}for(let n of e.bullet){let r=Ml(t,e,n);if("string"==typeof r)return r}for(let n of e.month){let r=bl(t,e,n);if("string"==typeof r)return r}for(let t of e.heatmap){let t=Dl(0,e);if("string"==typeof t)return t}}(a,l);if("string"==typeof m){return Pl(a,m),void r.appendChild(a)}r.appendChild(a)}))}getEditor(){return this.app.workspace.getActiveViewOfType(t.MarkdownView).editor}addCodeBlock(e){if(!(this.app.workspace.activeLeaf.view instanceof t.MarkdownView))return;let n="";switch(e){case Gi.Line:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nline:\n    title: "Line Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Gi.Bar:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nbar:\n    title: "Bar Chart"\n    xAxisLabel: Date\n    yAxisLabel: Value\n```';break;case Gi.Summary:n='``` tracker\nsearchType: tag\nsearchTarget: tagName\nfolder: /\nstartDate:\nendDate:\nsummary:\n    template: "Average value of tagName is {{average}}"\n    style: "color:white;"\n```'}""!==n&&this.insertToNextLine(n)}insertToNextLine(t){let e=this.getEditor();if(e){let n=e.getCursor(),r=n.line,a=e.getLine(r);return n.ch=a.length,e.setSelection(n),e.replaceSelection("\n"+t),!0}return!1}}module.exports=ou;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> Stashed changes
